{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Artificial Intelligence, Programming and Robotics Artificial intelligence (AI) and robotics are really interesting things that are now part of our daily lives. They are used in many tasks we do every day and are also connected to programming , which is like giving instructions to computers to do incredible things. These are very important things that are changing how we live. In the second half of the last century, there was a digital revolution that made the era of information possible. However, it wasn't until a few years later, when the Internet became more accessible and computers could automatically process large amounts of information, that we truly entered the information society, which is like the successor to the industrial era. Now, since the beginning of this century, computing (which means using computers) and its application in non-biological intelligent systems and robots are causing another significant change in how we live. This is like a new industrial revolution, marking a very important moment in the development of our society. In school, when we learn about artificial intelligence, programming, and robotics , we are using computational thinking , which is like learning to think like a computer. We learn to develop computer programs, use artificial intelligence techniques, and even program robots. We also discuss how these technologies impact society , and we talk about the scientific, ethical, and social aspects of all this. In summary, we are learning very interesting things that help us understand and be part of the modern world. Artificial Intelligence . Identify, research and use artificial intelligence and virtualization techniques of reality in addressing and seeking solutions to basic problems of society, valuing the ethical and inclusive principles applied. Programming . Apply computational thinking in the analysis and resolution of basic and significant problems for students through software development. Robotics . Assemble simple robotic systems, analyzing the responses they provide in their interaction with the environment and assessing their effectiveness in the face of the challenges posed.","title":"Artificial Intelligence, Programming and Robotics"},{"location":"index.html#artificial-intelligence-programming-and-robotics","text":"Artificial intelligence (AI) and robotics are really interesting things that are now part of our daily lives. They are used in many tasks we do every day and are also connected to programming , which is like giving instructions to computers to do incredible things. These are very important things that are changing how we live. In the second half of the last century, there was a digital revolution that made the era of information possible. However, it wasn't until a few years later, when the Internet became more accessible and computers could automatically process large amounts of information, that we truly entered the information society, which is like the successor to the industrial era. Now, since the beginning of this century, computing (which means using computers) and its application in non-biological intelligent systems and robots are causing another significant change in how we live. This is like a new industrial revolution, marking a very important moment in the development of our society. In school, when we learn about artificial intelligence, programming, and robotics , we are using computational thinking , which is like learning to think like a computer. We learn to develop computer programs, use artificial intelligence techniques, and even program robots. We also discuss how these technologies impact society , and we talk about the scientific, ethical, and social aspects of all this. In summary, we are learning very interesting things that help us understand and be part of the modern world. Artificial Intelligence . Identify, research and use artificial intelligence and virtualization techniques of reality in addressing and seeking solutions to basic problems of society, valuing the ethical and inclusive principles applied. Programming . Apply computational thinking in the analysis and resolution of basic and significant problems for students through software development. Robotics . Assemble simple robotic systems, analyzing the responses they provide in their interaction with the environment and assessing their effectiveness in the face of the challenges posed.","title":"Artificial Intelligence, Programming and Robotics"},{"location":"contents/presentation.html","text":"Presentation","title":"Presentation"},{"location":"contents/presentation.html#presentation","text":"","title":"Presentation"},{"location":"contents/ai/activity-turing.html","text":"The Turing test: Can a computer pass for a human? - Alex Gendler What is consciousness? Can an (1) really think? Does the mind just consist of (2) in the brain, or is there some intangible spark at its core? For many, these have been vital considerations for the future of artificial intelligence. But British computer scientist Alan Turing decided to disregard all these questions in favor of a much simpler one: can a computer talk like a human? This question led to an idea for measuring artificial intelligence that would famously come to be known as the (3). In the 1950 paper, \"Computing Machinery and Intelligence,\" Turing proposed the following game. A human (4) has a text conversation with unseen players and evaluates their responses. To pass the test, a computer must be able to replace one of the players without substantially changing the results. In other words, a computer would be considered intelligent if its conversation couldn't be easily distinguished from a human's. Turing predicted that by the year 2000, machines with 100 megabytes of memory would be able to easily pass his test. But he may have jumped the gun. Even though today's computers have far more (5) than that, few have succeeded, and those that have done well focused more on finding clever ways to fool judges than using overwhelming (6). Though it was never subjected to a real test, the first program with some claim to success was called ELIZA. With only a fairly short and simple script, it managed to mislead many people by (7) a psychologist, encouraging them to talk more and reflecting their own questions back at them. Another early script PARRY took the opposite approach by (8) a paranoid schizophrenic who kept steering the conversation back to his own preprogrammed obsessions. Their success in fooling people highlighted one (9) of the test. Humans regularly attribute intelligence to a whole range of things that are not actually intelligent. Nonetheless, annual competitions like the Loebner Prize, have made the test more formal with judges knowing ahead of time that some of their conversation partners are machines. But while the quality has improved, many (10) programmers have used similar strategies to ELIZA and PARRY. 1997's winner Catherine could carry on amazingly focused and intelligent conversation, but mostly if the judge wanted to talk about Bill Clinton. And the more recent winner Eugene Goostman was given the persona of a 13-year-old Ukrainian boy, so judges interpreted its nonsequiturs and awkward grammar as language and culture barriers. Meanwhile, other programs like Cleverbot have taken a different approach by (11) analyzing huge (12) of real conversations to determine the best responses. Some also store memories of previous conversations in order to improve over time. But while Cleverbot's individual responses can sound incredibly human, its lack of a consistent (13) and inability to deal with brand new topics are a dead giveaway. Who in Turing's day could have (14) that today's computers would be able to pilot spacecraft, perform delicate surgeries, and solve massive equations, but still struggle with the most basic small talk? Human (15) turns out to be an amazingly complex phenomenon that can't be captured by even the largest dictionary. Chatbots can be baffled by simple pauses, like \"umm...\" or questions with no correct answer. And a simple (16) sentence, like, \"I took the juice out of the fridge and gave it to him, but forgot to check the date,\" requires a wealth of underlying (17) and intuition to parse. It turns out that (18) a human conversation takes more than just increasing memory and (19) power, and as we get closer to Turing's goal, we may have to deal with all those big questions about (20) after all.","title":"Activity turing"},{"location":"contents/ai/activity-turing.html#the-turing-test-can-a-computer-pass-for-a-human-alex-gendler","text":"","title":"The Turing test: Can a computer pass for a human? - Alex Gendler"},{"location":"contents/ai/activity-turing.html#_1","text":"What is consciousness? Can an (1) really think? Does the mind just consist of (2) in the brain, or is there some intangible spark at its core? For many, these have been vital considerations for the future of artificial intelligence. But British computer scientist Alan Turing decided to disregard all these questions in favor of a much simpler one: can a computer talk like a human? This question led to an idea for measuring artificial intelligence that would famously come to be known as the (3). In the 1950 paper, \"Computing Machinery and Intelligence,\" Turing proposed the following game. A human (4) has a text conversation with unseen players and evaluates their responses. To pass the test, a computer must be able to replace one of the players without substantially changing the results. In other words, a computer would be considered intelligent if its conversation couldn't be easily distinguished from a human's. Turing predicted that by the year 2000, machines with 100 megabytes of memory would be able to easily pass his test. But he may have jumped the gun. Even though today's computers have far more (5) than that, few have succeeded, and those that have done well focused more on finding clever ways to fool judges than using overwhelming (6). Though it was never subjected to a real test, the first program with some claim to success was called ELIZA. With only a fairly short and simple script, it managed to mislead many people by (7) a psychologist, encouraging them to talk more and reflecting their own questions back at them. Another early script PARRY took the opposite approach by (8) a paranoid schizophrenic who kept steering the conversation back to his own preprogrammed obsessions. Their success in fooling people highlighted one (9) of the test. Humans regularly attribute intelligence to a whole range of things that are not actually intelligent. Nonetheless, annual competitions like the Loebner Prize, have made the test more formal with judges knowing ahead of time that some of their conversation partners are machines. But while the quality has improved, many (10) programmers have used similar strategies to ELIZA and PARRY. 1997's winner Catherine could carry on amazingly focused and intelligent conversation, but mostly if the judge wanted to talk about Bill Clinton. And the more recent winner Eugene Goostman was given the persona of a 13-year-old Ukrainian boy, so judges interpreted its nonsequiturs and awkward grammar as language and culture barriers. Meanwhile, other programs like Cleverbot have taken a different approach by (11) analyzing huge (12) of real conversations to determine the best responses. Some also store memories of previous conversations in order to improve over time. But while Cleverbot's individual responses can sound incredibly human, its lack of a consistent (13) and inability to deal with brand new topics are a dead giveaway. Who in Turing's day could have (14) that today's computers would be able to pilot spacecraft, perform delicate surgeries, and solve massive equations, but still struggle with the most basic small talk? Human (15) turns out to be an amazingly complex phenomenon that can't be captured by even the largest dictionary. Chatbots can be baffled by simple pauses, like \"umm...\" or questions with no correct answer. And a simple (16) sentence, like, \"I took the juice out of the fridge and gave it to him, but forgot to check the date,\" requires a wealth of underlying (17) and intuition to parse. It turns out that (18) a human conversation takes more than just increasing memory and (19) power, and as we get closer to Turing's goal, we may have to deal with all those big questions about (20) after all.","title":""},{"location":"contents/ai/equity-inclusion.html","text":"Equity and inclusion in AI systems. Biases in AI Introduction Artificial intelligence (AI) is becoming increasingly important in our daily lives, from voice assistants to self-driving cars. However, it's important to understand that AI systems can also perpetuate and even amplify biases found in the data it is trained on. In this lesson, we will explore the concept of equity and inclusion in AI systems and the potential for biases in AI. What is equity and inclusion in AI systems? Equity and inclusion in AI systems refers to the idea that everyone should have access to the benefits of AI, regardless of their background or characteristics. This means that AI systems should be designed and implemented in a way that is fair and does not discriminate against certain groups of people. What are biases in AI systems? Biases in AI systems occur when the data used to train the AI is not representative of the population it will be used on. For example, if an AI system is trained on data mostly from one racial group, it may not be able to accurately recognize or make predictions about people from other racial groups. This can lead to unfair and harmful outcomes, such as denying certain people access to certain services or opportunities. How can we prevent biases in AI systems? There are several steps that can be taken to prevent biases in AI systems, including: Using diverse data sets to train AI systems: This can help ensure that the AI system is not just learning from one group of people. Regularly testing and evaluating AI systems: This can help identify and address any biases that may exist in the system. Involving diverse perspectives in the development and design of AI systems: This can help ensure that the needs and concerns of all groups are taken into account. Transparency and explainability in AI systems: This can help people understand how the system is making decisions and identify any potential biases. Conclusion AI has the potential to greatly benefit society, but it's important to ensure that it is developed and implemented in a way that is fair and inclusive. By understanding the concept of equity and inclusion and the potential for biases in AI systems, we can take steps to prevent these biases and create AI that truly benefits everyone.","title":"Equity and inclusion in AI systems. Biases in AI"},{"location":"contents/ai/equity-inclusion.html#equity-and-inclusion-in-ai-systems-biases-in-ai","text":"","title":"Equity and inclusion in AI systems. Biases in AI"},{"location":"contents/ai/equity-inclusion.html#introduction","text":"Artificial intelligence (AI) is becoming increasingly important in our daily lives, from voice assistants to self-driving cars. However, it's important to understand that AI systems can also perpetuate and even amplify biases found in the data it is trained on. In this lesson, we will explore the concept of equity and inclusion in AI systems and the potential for biases in AI.","title":"Introduction"},{"location":"contents/ai/equity-inclusion.html#what-is-equity-and-inclusion-in-ai-systems","text":"Equity and inclusion in AI systems refers to the idea that everyone should have access to the benefits of AI, regardless of their background or characteristics. This means that AI systems should be designed and implemented in a way that is fair and does not discriminate against certain groups of people.","title":"What is equity and inclusion in AI systems?"},{"location":"contents/ai/equity-inclusion.html#what-are-biases-in-ai-systems","text":"Biases in AI systems occur when the data used to train the AI is not representative of the population it will be used on. For example, if an AI system is trained on data mostly from one racial group, it may not be able to accurately recognize or make predictions about people from other racial groups. This can lead to unfair and harmful outcomes, such as denying certain people access to certain services or opportunities.","title":"What are biases in AI systems?"},{"location":"contents/ai/equity-inclusion.html#how-can-we-prevent-biases-in-ai-systems","text":"There are several steps that can be taken to prevent biases in AI systems, including: Using diverse data sets to train AI systems: This can help ensure that the AI system is not just learning from one group of people. Regularly testing and evaluating AI systems: This can help identify and address any biases that may exist in the system. Involving diverse perspectives in the development and design of AI systems: This can help ensure that the needs and concerns of all groups are taken into account. Transparency and explainability in AI systems: This can help people understand how the system is making decisions and identify any potential biases.","title":"How can we prevent biases in AI systems?"},{"location":"contents/ai/equity-inclusion.html#conclusion","text":"AI has the potential to greatly benefit society, but it's important to ensure that it is developed and implemented in a way that is fair and inclusive. By understanding the concept of equity and inclusion and the potential for biases in AI systems, we can take steps to prevent these biases and create AI that truly benefits everyone.","title":"Conclusion"},{"location":"contents/ai/sensors-applications.html","text":"Sensors applications","title":"Sensors applications"},{"location":"contents/ai/sensors-applications.html#sensors-applications","text":"","title":"Sensors applications"},{"location":"contents/ai/sensors.html","text":"Sensors Artificial Intelligence Artificial Intelligence (AI) is a technology that allows machines to learn, understand, and process information like humans. One of the key components of AI systems is sensors. Sensors are devices that can detect and measure physical and environmental conditions such as temperature, light, sound, and movement. In this lesson, we will learn about the different types of sensors used in AI applications and the different ways in which they can be used. Types of sensors Optical sensors : These sensors detect light and are used in applications such as facial recognition, object detection, and image processing. Examples of optical sensors include cameras and lidar sensors. Temperature sensors: These sensors measure temperature and are used in applications such as climate control and food safety. Examples of temperature sensors include thermocouples and thermistors. Pressure sensors: These sensors measure pressure and are used in applications such as industrial automation, weather forecasting, and healthcare. Examples of pressure sensors include piezoelectric sensors and strain gauge sensors. Accelerometer sensors: These sensors measure acceleration and are used in applications such as motion detection, navigation, and gaming. Examples of accelerometer sensors include MEMS accelerometers and piezoelectric accelerometers. Gyroscopic sensors: These sensors measure angular velocity and are used in applications such as navigation, gaming, and robotics. Examples of gyroscopic sensors include MEMS gyroscopes and fiber optic gyroscopes. Magnetic sensors: These sensors measure magnetic fields and are used in applications such as navigation, industrial automation, and healthcare. Examples of magnetic sensors include Hall effect sensors and magnetoresistive sensors. Ultrasonic sensors: These sensors measure distance and are used in applications such as object detection, navigation, and industrial automation. Examples of ultrasonic sensors include sonar sensors and lidar sensors. Infrared sensors: These sensors detect infrared radiation and are used in applications such as temperature measurement, night vision, and gesture recognition. Examples of infrared sensors include thermopile sensors and pyroelectric sensors. Proximity sensors: These sensors detect the presence of objects and are used in applications such as gesture recognition, object detection, and access control. Examples of proximity sensors include infrared proximity sensors and ultrasonic proximity sensors. Light sensors: These sensors detect light and are used in applications such as light control, gesture recognition, and object detection. Examples of light sensors include photodiodes and phototransistors. Humidity sensors: These sensors measure humidity and are used in applications such as weather forecasting, agriculture, and healthcare. Examples of humidity sensors include capacitive humidity sensors and resistive humidity sensors. Gas sensors: These sensors detect the presence of gases and are used in applications such as environmental monitoring, industrial automation, and healthcare. Examples of gas sensors include electrochemical gas sensors and metal oxide gas sensors. Images Artificial Intelligence","title":"Sensors"},{"location":"contents/ai/sensors.html#sensors","text":"","title":"Sensors"},{"location":"contents/ai/sensors.html#artificial-intelligence","text":"Artificial Intelligence (AI) is a technology that allows machines to learn, understand, and process information like humans. One of the key components of AI systems is sensors. Sensors are devices that can detect and measure physical and environmental conditions such as temperature, light, sound, and movement. In this lesson, we will learn about the different types of sensors used in AI applications and the different ways in which they can be used.","title":"Artificial Intelligence"},{"location":"contents/ai/sensors.html#types-of-sensors","text":"Optical sensors : These sensors detect light and are used in applications such as facial recognition, object detection, and image processing. Examples of optical sensors include cameras and lidar sensors. Temperature sensors: These sensors measure temperature and are used in applications such as climate control and food safety. Examples of temperature sensors include thermocouples and thermistors. Pressure sensors: These sensors measure pressure and are used in applications such as industrial automation, weather forecasting, and healthcare. Examples of pressure sensors include piezoelectric sensors and strain gauge sensors. Accelerometer sensors: These sensors measure acceleration and are used in applications such as motion detection, navigation, and gaming. Examples of accelerometer sensors include MEMS accelerometers and piezoelectric accelerometers. Gyroscopic sensors: These sensors measure angular velocity and are used in applications such as navigation, gaming, and robotics. Examples of gyroscopic sensors include MEMS gyroscopes and fiber optic gyroscopes. Magnetic sensors: These sensors measure magnetic fields and are used in applications such as navigation, industrial automation, and healthcare. Examples of magnetic sensors include Hall effect sensors and magnetoresistive sensors. Ultrasonic sensors: These sensors measure distance and are used in applications such as object detection, navigation, and industrial automation. Examples of ultrasonic sensors include sonar sensors and lidar sensors. Infrared sensors: These sensors detect infrared radiation and are used in applications such as temperature measurement, night vision, and gesture recognition. Examples of infrared sensors include thermopile sensors and pyroelectric sensors. Proximity sensors: These sensors detect the presence of objects and are used in applications such as gesture recognition, object detection, and access control. Examples of proximity sensors include infrared proximity sensors and ultrasonic proximity sensors. Light sensors: These sensors detect light and are used in applications such as light control, gesture recognition, and object detection. Examples of light sensors include photodiodes and phototransistors. Humidity sensors: These sensors measure humidity and are used in applications such as weather forecasting, agriculture, and healthcare. Examples of humidity sensors include capacitive humidity sensors and resistive humidity sensors. Gas sensors: These sensors detect the presence of gases and are used in applications such as environmental monitoring, industrial automation, and healthcare. Examples of gas sensors include electrochemical gas sensors and metal oxide gas sensors.","title":"Types of sensors"},{"location":"contents/ai/sensors.html#images","text":"Artificial Intelligence","title":"Images"},{"location":"contents/ai/terms.html","text":"Artificial Intelligence (AI) terms AI-Powered Assistant An AI-powered assistant is a virtual assistant that uses artificial intelligence (AI) technology to understand and respond to user requests. AI-powered assistants can be used to perform tasks such as scheduling appointments, setting reminders, providing information, and answering questions. Artificial Intelligence Artificial Intelligence (AI) refers to the simulation of human intelligence in machines that are programmed to perform tasks that would typically require human intelligence, such as reasoning, learning, perception, and problem-solving. Artificial intelligence is everywhere and it's already making a huge impact on our lives. It's autocompleting texts on our cellphones, telling us which videos to watch on YouTube, beating us at video games, recognizing us in photos, ordering products in stores, driving cars, scheduling appointments, you get the idea. Today we're going to explain what AI can (and can't) do right now and explain how we got to where we are today. Chatbot A chatbot is an AI-powered computer program designed to simulate conversation with human users, typically through text messages or voice interactions. Chatbots can be used for customer service, sales, marketing, and other applications. By now most of us have interacted with a chatbot in one form or another, but exactly how do they work? Do chatbots only operate on websites, or are there other mediums that a chatbot can facilitate a conversation? And why would anyone want to use a chatbot? In this lightboard video, Morgan Carroll with IBM Cloud, answers these questions and many more as she walks through an example of Floral company using a chatbot and shows first hand what a chatbot is, how it works, and why you may want to use one for your business. Do you ever lay awake at night wondering what, exactly, a chatbot is? Or how chatbots work? Or even if bots will steal customer service representatives\u2019 jobs? Well, you can rest easy because we\u2019re going to answer all your questions. Computer Vision Computer Vision is a field of artificial intelligence that focuses on enabling machines to interpret and understand visual data from the world around them, such as images and videos. Today we\u2019re going to talk about how computers see. We\u2019ve long known that our digital cameras and smartphones can take incredibly detailed images, but taking pictures is not quite the same thing. For the past half-century, computer scientists have been working to help our computing devices understand the imagery they capture, leading to advancements everywhere, from tracking hands and whole bodies, biometrics to unlock our phones, and eventually giving autonomous cars the ability to understand their surroundings. Decision Tree A decision tree is a graphical representation of a decision-making process that uses a tree-like model of decisions and their possible consequences. Decision trees are often used in machine learning and artificial intelligence applications. Decision tree organizes a series rules in a tree structure. It is one of the most practical methods for non-parametric supervised learning. Our goal in this video is to demonstrate how to create a decision tree that predicts the value of a target by learning decision rules inferred from the training data. Deep Learning Deep learning is a subset of machine learning that involves training artificial neural networks with large amounts of data to perform complex tasks, such as image and speech recognition. Expert System An expert system is an AI-powered system that uses a knowledge base and reasoning algorithms to simulate the decision-making abilities of a human expert in a particular domain. Machine Learning Machine learning is a subset of artificial intelligence that involves training computer programs to learn from data and improve their performance on specific tasks over time, without being explicitly programmed to do so. In this video, you\u2019ll learn more about the evolution of machine learning and its impact on daily life. Narrow AI Narrow AI refers to artificial intelligence systems that are designed to perform a specific task or set of tasks, rather than exhibiting general intelligence. Natural Language Generation Natural Language Generation is a field of artificial intelligence that focuses on using machine learning algorithms to automatically generate natural language text from structured data or other sources. Natural Language Processing Natural Language Processing is a field of artificial intelligence that focuses on enabling computers to understand, interpret, and generate human language. We\u2019re going to talk about how computers understand speech and speak themselves. As computers play an increasing role in our daily lives there has been an growing demand for voice user interfaces, but speech is also terribly complicated. Vocabularies are diverse, sentence structures can often dictate the meaning of certain words, and computers also have to deal with accents, mispronunciations, and many common linguistic faux pas. The field of Natural Language Processing, or NLP, attempts to solve these problems, with a number of techniques we\u2019ll discuss today. And even though our virtual assistants like Siri, Alexa, Google Home, Bixby, and Cortana have come a long way from the first speech processing and synthesis models, there is still much room for improvement. Neural Network A neural network is a type of artificial intelligence algorithm that is modeled after the structure and function of the human brain. Neural networks are often used in deep learning applications. We're going to combine the artificial neuron we created last week into an artificial neural network. Artificial neural networks are better than other methods for more complicated tasks like image recognition, and the key to their success is their hidden layers. We'll talk about how the math of these networks work and how using many hidden layers allows us to do deep learning. Neural networks are really powerful at finding patterns in data which is why they've become one of the most dominant machine learning technologies used today. Reinforcement Learning Reinforcement learning is a type of machine learning that involves training an algorithm to make decisions based on feedback it receives from its environment. Supervised Learning Supervised learning is a type of machine learning that involves training an algorithm using labeled data, where the desired output is known. Today we\u2019re going to teach John Green Bot how to tell the difference between donuts and bagels using supervised learning! Supervised learning is the process of learning WITH training labels, and is the most widely used kind of learning with it comes to AI - helping with stuff like tagging photos on Facebook and filtering spam from your email. We\u2019re going to start small today and show how just a single neuron (or perceptron) is constructed, and explain the differences between precision and recall. Next week, we'll build our first neural network. Training Data Training data is a set of data used to train machine learning algorithms. Training data typically consists of input data and corresponding output data, which is used to teach the algorithm how to make predictions. Turing Test The Turing Test is a test of a machine's ability to exhibit intelligent behavior equivalent to, or indistinguishable from, that of a human. What is consciousness? Can an artificial machine really think? For many, these have been vital considerations for the future of artificial intelligence. But British computer scientist Alan Turing decided to disregard all these questions in favor of a much simpler one: Can a computer talk like a human? Alex Gendler describes the Turing test and details some of its surprising results. Lesson by Alex Gendler, animation by Patrick Smith. Unsupervised Learning Unsupervised learning is a type of machine learning that involves training an algorithm using unlabeled data, where the desired output is unknown. The algorithm must find patterns and relationships in the data on its own. We\u2019re moving on from artificial intelligence that needs training labels, called Supervised Learning, to Unsupervised Learning which is learning by finding patterns in the world. We\u2019ll focus on the performing unsupervised clustering, specifically K-means clustering, and show you how we can extract meaningful patterns from data even when you don't know where those patterns are.","title":"Terms"},{"location":"contents/ai/terms.html#artificial-intelligence-ai-terms","text":"","title":"Artificial Intelligence (AI) terms"},{"location":"contents/ai/terms.html#ai-powered-assistant","text":"An AI-powered assistant is a virtual assistant that uses artificial intelligence (AI) technology to understand and respond to user requests. AI-powered assistants can be used to perform tasks such as scheduling appointments, setting reminders, providing information, and answering questions.","title":"AI-Powered Assistant"},{"location":"contents/ai/terms.html#artificial-intelligence","text":"Artificial Intelligence (AI) refers to the simulation of human intelligence in machines that are programmed to perform tasks that would typically require human intelligence, such as reasoning, learning, perception, and problem-solving. Artificial intelligence is everywhere and it's already making a huge impact on our lives. It's autocompleting texts on our cellphones, telling us which videos to watch on YouTube, beating us at video games, recognizing us in photos, ordering products in stores, driving cars, scheduling appointments, you get the idea. Today we're going to explain what AI can (and can't) do right now and explain how we got to where we are today.","title":"Artificial Intelligence"},{"location":"contents/ai/terms.html#chatbot","text":"A chatbot is an AI-powered computer program designed to simulate conversation with human users, typically through text messages or voice interactions. Chatbots can be used for customer service, sales, marketing, and other applications. By now most of us have interacted with a chatbot in one form or another, but exactly how do they work? Do chatbots only operate on websites, or are there other mediums that a chatbot can facilitate a conversation? And why would anyone want to use a chatbot? In this lightboard video, Morgan Carroll with IBM Cloud, answers these questions and many more as she walks through an example of Floral company using a chatbot and shows first hand what a chatbot is, how it works, and why you may want to use one for your business. Do you ever lay awake at night wondering what, exactly, a chatbot is? Or how chatbots work? Or even if bots will steal customer service representatives\u2019 jobs? Well, you can rest easy because we\u2019re going to answer all your questions.","title":"Chatbot"},{"location":"contents/ai/terms.html#computer-vision","text":"Computer Vision is a field of artificial intelligence that focuses on enabling machines to interpret and understand visual data from the world around them, such as images and videos. Today we\u2019re going to talk about how computers see. We\u2019ve long known that our digital cameras and smartphones can take incredibly detailed images, but taking pictures is not quite the same thing. For the past half-century, computer scientists have been working to help our computing devices understand the imagery they capture, leading to advancements everywhere, from tracking hands and whole bodies, biometrics to unlock our phones, and eventually giving autonomous cars the ability to understand their surroundings.","title":"Computer Vision"},{"location":"contents/ai/terms.html#decision-tree","text":"A decision tree is a graphical representation of a decision-making process that uses a tree-like model of decisions and their possible consequences. Decision trees are often used in machine learning and artificial intelligence applications. Decision tree organizes a series rules in a tree structure. It is one of the most practical methods for non-parametric supervised learning. Our goal in this video is to demonstrate how to create a decision tree that predicts the value of a target by learning decision rules inferred from the training data.","title":"Decision Tree"},{"location":"contents/ai/terms.html#deep-learning","text":"Deep learning is a subset of machine learning that involves training artificial neural networks with large amounts of data to perform complex tasks, such as image and speech recognition.","title":"Deep Learning"},{"location":"contents/ai/terms.html#expert-system","text":"An expert system is an AI-powered system that uses a knowledge base and reasoning algorithms to simulate the decision-making abilities of a human expert in a particular domain.","title":"Expert System"},{"location":"contents/ai/terms.html#machine-learning","text":"Machine learning is a subset of artificial intelligence that involves training computer programs to learn from data and improve their performance on specific tasks over time, without being explicitly programmed to do so. In this video, you\u2019ll learn more about the evolution of machine learning and its impact on daily life.","title":"Machine Learning"},{"location":"contents/ai/terms.html#narrow-ai","text":"Narrow AI refers to artificial intelligence systems that are designed to perform a specific task or set of tasks, rather than exhibiting general intelligence.","title":"Narrow AI"},{"location":"contents/ai/terms.html#natural-language-generation","text":"Natural Language Generation is a field of artificial intelligence that focuses on using machine learning algorithms to automatically generate natural language text from structured data or other sources.","title":"Natural Language Generation"},{"location":"contents/ai/terms.html#natural-language-processing","text":"Natural Language Processing is a field of artificial intelligence that focuses on enabling computers to understand, interpret, and generate human language. We\u2019re going to talk about how computers understand speech and speak themselves. As computers play an increasing role in our daily lives there has been an growing demand for voice user interfaces, but speech is also terribly complicated. Vocabularies are diverse, sentence structures can often dictate the meaning of certain words, and computers also have to deal with accents, mispronunciations, and many common linguistic faux pas. The field of Natural Language Processing, or NLP, attempts to solve these problems, with a number of techniques we\u2019ll discuss today. And even though our virtual assistants like Siri, Alexa, Google Home, Bixby, and Cortana have come a long way from the first speech processing and synthesis models, there is still much room for improvement.","title":"Natural Language Processing"},{"location":"contents/ai/terms.html#neural-network","text":"A neural network is a type of artificial intelligence algorithm that is modeled after the structure and function of the human brain. Neural networks are often used in deep learning applications. We're going to combine the artificial neuron we created last week into an artificial neural network. Artificial neural networks are better than other methods for more complicated tasks like image recognition, and the key to their success is their hidden layers. We'll talk about how the math of these networks work and how using many hidden layers allows us to do deep learning. Neural networks are really powerful at finding patterns in data which is why they've become one of the most dominant machine learning technologies used today.","title":"Neural Network"},{"location":"contents/ai/terms.html#reinforcement-learning","text":"Reinforcement learning is a type of machine learning that involves training an algorithm to make decisions based on feedback it receives from its environment.","title":"Reinforcement Learning"},{"location":"contents/ai/terms.html#supervised-learning","text":"Supervised learning is a type of machine learning that involves training an algorithm using labeled data, where the desired output is known. Today we\u2019re going to teach John Green Bot how to tell the difference between donuts and bagels using supervised learning! Supervised learning is the process of learning WITH training labels, and is the most widely used kind of learning with it comes to AI - helping with stuff like tagging photos on Facebook and filtering spam from your email. We\u2019re going to start small today and show how just a single neuron (or perceptron) is constructed, and explain the differences between precision and recall. Next week, we'll build our first neural network.","title":"Supervised Learning"},{"location":"contents/ai/terms.html#training-data","text":"Training data is a set of data used to train machine learning algorithms. Training data typically consists of input data and corresponding output data, which is used to teach the algorithm how to make predictions.","title":"Training Data"},{"location":"contents/ai/terms.html#turing-test","text":"The Turing Test is a test of a machine's ability to exhibit intelligent behavior equivalent to, or indistinguishable from, that of a human. What is consciousness? Can an artificial machine really think? For many, these have been vital considerations for the future of artificial intelligence. But British computer scientist Alan Turing decided to disregard all these questions in favor of a much simpler one: Can a computer talk like a human? Alex Gendler describes the Turing test and details some of its surprising results. Lesson by Alex Gendler, animation by Patrick Smith.","title":"Turing Test"},{"location":"contents/ai/terms.html#unsupervised-learning","text":"Unsupervised learning is a type of machine learning that involves training an algorithm using unlabeled data, where the desired output is unknown. The algorithm must find patterns and relationships in the data on its own. We\u2019re moving on from artificial intelligence that needs training labels, called Supervised Learning, to Unsupervised Learning which is learning by finding patterns in the world. We\u2019ll focus on the performing unsupervised clustering, specifically K-means clustering, and show you how we can extract meaningful patterns from data even when you don't know where those patterns are.","title":"Unsupervised Learning"},{"location":"contents/ai/the-turing-test.html","text":"The Turing Test The Turing test is a way to measure a machine's ability to think and understand like a human. It was proposed by Alan Turing, a famous computer scientist, in 1950. The test works by having a human judge talk to both a human and a machine through a computer screen or other means of communication. If the judge can't tell which one is the machine, then the machine is said to have passed the Turing test and is considered to have human-like intelligence. It's a way to test the intelligence of machines. Alan Turing Alan Turing was a British computer scientist and mathematician who lived in the 20th century. He is famous for his work on cracking the code used by the Germans during World War II, which helped the Allies win the war. He also proposed the Turing test, which is a way to measure a machine's ability to think and understand like a human.","title":"The Turing Test"},{"location":"contents/ai/the-turing-test.html#the-turing-test","text":"The Turing test is a way to measure a machine's ability to think and understand like a human. It was proposed by Alan Turing, a famous computer scientist, in 1950. The test works by having a human judge talk to both a human and a machine through a computer screen or other means of communication. If the judge can't tell which one is the machine, then the machine is said to have passed the Turing test and is considered to have human-like intelligence. It's a way to test the intelligence of machines.","title":"The Turing Test"},{"location":"contents/ai/the-turing-test.html#alan-turing","text":"Alan Turing was a British computer scientist and mathematician who lived in the 20th century. He is famous for his work on cracking the code used by the Germans during World War II, which helped the Allies win the war. He also proposed the Turing test, which is a way to measure a machine's ability to think and understand like a human.","title":"Alan Turing"},{"location":"contents/ai/types-of-sensors.html","text":"Types of sensors There are different type of sensors are available to choose from and the characteristics of sensors are used for determining the type of sensor to be used for particular application.","title":"Types of sensors"},{"location":"contents/ai/types-of-sensors.html#types-of-sensors","text":"There are different type of sensors are available to choose from and the characteristics of sensors are used for determining the type of sensor to be used for particular application.","title":"Types of sensors"},{"location":"contents/programming/basics.html","text":"Creating an Application: The Basics What is Python? Python is a high-level, interpreted programming language known for its readability and versatility. It supports multiple programming paradigms, including procedural, object-oriented, and functional programming. Python is widely used for web development, data science, artificial intelligence, automation, and more. Basic Syntax Python uses indentation to define blocks of code (no curly braces or semicolons). Comments start with the # symbol. Variables and Data Types Variables are containers for storing data. They don't need explicit declarations. Common data types include integers, floats, strings, lists, tuples, and dictionaries. t1 = 6.0 t2 = 4.0 Functions Functions are reusable blocks of code defined using the def keyword. Parameters are passed inside parentheses. def getAverage ( x1 , x2 ): x = ( x1 + x2 ) / 2 return x Conditional Statements if , elif , and else are used for decision-making. Python relies on indentation to denote code blocks. def getTextGrade ( ngrade ): text = \"\" if ngrade >= 7.5 : text = \"Very good\" elif 5 <= ngrade < 7.5 : text = \"Good\" else : text = \"Fail\" return text Round Numbers The round() function is used to round numerical values. average = round ( average , 2 ) Printing The print() function is used to display output. print ( \"Final grade: \" + str ( average ) + \" (\" + text_average + \")\" ) These fundamentals cover the basics needed to understand and write a Python application. Further exploration of Python will enhance your ability to create more complex and powerful applications.","title":"Creating an App: The Basics"},{"location":"contents/programming/basics.html#creating-an-application-the-basics","text":"","title":"Creating an Application: The Basics"},{"location":"contents/programming/basics.html#what-is-python","text":"Python is a high-level, interpreted programming language known for its readability and versatility. It supports multiple programming paradigms, including procedural, object-oriented, and functional programming. Python is widely used for web development, data science, artificial intelligence, automation, and more.","title":"What is Python?"},{"location":"contents/programming/basics.html#basic-syntax","text":"Python uses indentation to define blocks of code (no curly braces or semicolons). Comments start with the # symbol.","title":"Basic Syntax"},{"location":"contents/programming/basics.html#variables-and-data-types","text":"Variables are containers for storing data. They don't need explicit declarations. Common data types include integers, floats, strings, lists, tuples, and dictionaries. t1 = 6.0 t2 = 4.0","title":"Variables and Data Types"},{"location":"contents/programming/basics.html#functions","text":"Functions are reusable blocks of code defined using the def keyword. Parameters are passed inside parentheses. def getAverage ( x1 , x2 ): x = ( x1 + x2 ) / 2 return x","title":"Functions"},{"location":"contents/programming/basics.html#conditional-statements","text":"if , elif , and else are used for decision-making. Python relies on indentation to denote code blocks. def getTextGrade ( ngrade ): text = \"\" if ngrade >= 7.5 : text = \"Very good\" elif 5 <= ngrade < 7.5 : text = \"Good\" else : text = \"Fail\" return text","title":"Conditional Statements"},{"location":"contents/programming/basics.html#round-numbers","text":"The round() function is used to round numerical values. average = round ( average , 2 )","title":"Round Numbers"},{"location":"contents/programming/basics.html#printing","text":"The print() function is used to display output. print ( \"Final grade: \" + str ( average ) + \" (\" + text_average + \")\" ) These fundamentals cover the basics needed to understand and write a Python application. Further exploration of Python will enhance your ability to create more complex and powerful applications.","title":"Printing"},{"location":"contents/programming/challenges.html","text":"Programming Challenges The Average Create a Python application to calculate the average grade of 3 exams: average.py Solution Time Converter Write the code with Python to create a time converter app: timeconverter.py Instructions: You have to define 4 variables: hours, minutes, seconds, and total_seconds. The app has to print the total seconds. Test the application with these values: 40 hours, 12, minutes and 36 seconds. The total seconds shoul be 144756. Remember: - 1 hour = 60 minutes - 1 minute = 60 seconds Solution","title":"Code Challenges"},{"location":"contents/programming/challenges.html#programming-challenges","text":"","title":"Programming Challenges"},{"location":"contents/programming/challenges.html#the-average","text":"Create a Python application to calculate the average grade of 3 exams: average.py Solution","title":"The Average"},{"location":"contents/programming/challenges.html#time-converter","text":"Write the code with Python to create a time converter app: timeconverter.py Instructions: You have to define 4 variables: hours, minutes, seconds, and total_seconds. The app has to print the total seconds. Test the application with these values: 40 hours, 12, minutes and 36 seconds. The total seconds shoul be 144756. Remember: - 1 hour = 60 minutes - 1 minute = 60 seconds Solution","title":"Time Converter"},{"location":"contents/programming/code_example.html","text":"Understanding Python through a complete example 1. Function Definition and Parameters Theory: In Python, functions are blocks of reusable code. They can take parameters as input, perform operations, and return a result. Exercise: Define a function calculate_average that takes four parameters (x1, x2, x3, x4) and returns their average. def calculate_average ( x1 , x2 , x3 , x4 ): average = ( x1 + x2 + x3 + x4 ) / 4 return average 2. Conditional Statements Theory: Conditional statements (if, elif, else) allow you to execute different blocks of code based on certain conditions. Exercise: Write a function convert_to_text_grade that takes a numeric grade as a parameter and returns the corresponding text grade using conditional statements. def convert_to_text_grade ( numeric_grade ): if numeric_grade >= 7.5 : return \"Very good\" elif numeric_grade >= 5 : return \"Good\" else : return \"Fail\" 3. Variable Assignment and Basic Operations Theory: Variables are used to store and manage data. Basic operations (+, -, *, /) are essential for performing calculations. Exercise: Assign values to variables t1 and t2 representing grades. t1 = 6.0 t2 = 4.0 4. Function Invocation Theory: Functions are invoked (called) to execute the code within them and obtain the result. Exercise: Use the calculate_average function to find the average of t1 and t2 . average = calculate_average ( t1 , t2 ) print ( \"Average:\" , average ) 5. Rounding Numbers Theory: The round() function is used to round numerical values to a specified number of decimal places. Exercise: Round the calculated average to two decimal places. average = round ( average , 2 ) print ( \"Rounded Average:\" , average ) 6. String Concatenation Theory: Strings can be concatenated using the + operator. Exercise: Concatenate strings to print the final grade in the specified format. text_average = convert_to_text_grade ( average ) print ( \"Final grade: \" + str ( average ) + \" (\" + text_average + \")\" ) 7. Application Example Here's a basic example that calculates the average of two grades, converts it to a text grade, and prints the result: # Function to calculate average def getAverage ( x1 , x2 ): x = ( x1 + x2 ) / 2 return x # Function to convert numeric grade to text def getTextGrade ( ngrade ): text = \"\" if ngrade >= 7.5 : text = \"Very good\" elif 5 <= ngrade < 7.5 : text = \"Good\" else : text = \"Fail\" return text # Assign values to variables t1 = 6.0 t2 = 4.0 # Calculate average average = getAverage ( t1 , t2 ) # Round the average to 2 decimals average = round ( average , 2 ) # Convert numeric average to text grade text_average = getTextGrade ( average ) # Print the final grade print ( \"Final grade: \" + str ( average ) + \" (\" + text_average + \")\" ) By working through these exercises, you'll reinforce the fundamental concepts needed to understand and write the Python code needed to create a get_average.py application. Each exercise corresponds to a key aspect of the code, helping you build a solid foundation in Python programming.","title":"Code Example"},{"location":"contents/programming/code_example.html#understanding-python-through-a-complete-example","text":"","title":"Understanding Python through a complete example"},{"location":"contents/programming/code_example.html#1-function-definition-and-parameters","text":"Theory: In Python, functions are blocks of reusable code. They can take parameters as input, perform operations, and return a result. Exercise: Define a function calculate_average that takes four parameters (x1, x2, x3, x4) and returns their average. def calculate_average ( x1 , x2 , x3 , x4 ): average = ( x1 + x2 + x3 + x4 ) / 4 return average","title":"1. Function Definition and Parameters"},{"location":"contents/programming/code_example.html#2-conditional-statements","text":"Theory: Conditional statements (if, elif, else) allow you to execute different blocks of code based on certain conditions. Exercise: Write a function convert_to_text_grade that takes a numeric grade as a parameter and returns the corresponding text grade using conditional statements. def convert_to_text_grade ( numeric_grade ): if numeric_grade >= 7.5 : return \"Very good\" elif numeric_grade >= 5 : return \"Good\" else : return \"Fail\"","title":"2. Conditional Statements"},{"location":"contents/programming/code_example.html#3-variable-assignment-and-basic-operations","text":"Theory: Variables are used to store and manage data. Basic operations (+, -, *, /) are essential for performing calculations. Exercise: Assign values to variables t1 and t2 representing grades. t1 = 6.0 t2 = 4.0","title":"3. Variable Assignment and Basic Operations"},{"location":"contents/programming/code_example.html#4-function-invocation","text":"Theory: Functions are invoked (called) to execute the code within them and obtain the result. Exercise: Use the calculate_average function to find the average of t1 and t2 . average = calculate_average ( t1 , t2 ) print ( \"Average:\" , average )","title":"4. Function Invocation"},{"location":"contents/programming/code_example.html#5-rounding-numbers","text":"Theory: The round() function is used to round numerical values to a specified number of decimal places. Exercise: Round the calculated average to two decimal places. average = round ( average , 2 ) print ( \"Rounded Average:\" , average )","title":"5. Rounding Numbers"},{"location":"contents/programming/code_example.html#6-string-concatenation","text":"Theory: Strings can be concatenated using the + operator. Exercise: Concatenate strings to print the final grade in the specified format. text_average = convert_to_text_grade ( average ) print ( \"Final grade: \" + str ( average ) + \" (\" + text_average + \")\" )","title":"6. String Concatenation"},{"location":"contents/programming/code_example.html#7-application-example","text":"Here's a basic example that calculates the average of two grades, converts it to a text grade, and prints the result: # Function to calculate average def getAverage ( x1 , x2 ): x = ( x1 + x2 ) / 2 return x # Function to convert numeric grade to text def getTextGrade ( ngrade ): text = \"\" if ngrade >= 7.5 : text = \"Very good\" elif 5 <= ngrade < 7.5 : text = \"Good\" else : text = \"Fail\" return text # Assign values to variables t1 = 6.0 t2 = 4.0 # Calculate average average = getAverage ( t1 , t2 ) # Round the average to 2 decimals average = round ( average , 2 ) # Convert numeric average to text grade text_average = getTextGrade ( average ) # Print the final grade print ( \"Final grade: \" + str ( average ) + \" (\" + text_average + \")\" ) By working through these exercises, you'll reinforce the fundamental concepts needed to understand and write the Python code needed to create a get_average.py application. Each exercise corresponds to a key aspect of the code, helping you build a solid foundation in Python programming.","title":"7. Application Example"},{"location":"contents/programming/exercises.html","text":"Exercises 1. Combining strings using concatenation Create two string variables, 'greeting' and 'name', and concatenate them to print a personalized greeting. Code greeting = \"Hello, \" name = \"world!\" print ( greeting + name ) Declare two more string variables, 'first_name' and 'last_name', and concatenate them to print the full name. Code first_name = \"John\" last_name = \"Doe\" print ( \"Full Name: \" + first_name + \" \" + last_name ) 2. Arithmetic expressions in Python Calculate and print the result of the expression: x = 10 + 5 * 2 Code x = 10 + 5 * 2 print ( \"Result of x:\" , x ) Create a new variable 'y' and assign the result of the expression: y = 3 ** 2 Code y = 3 ** 2 print ( \"Result of y:\" , y ) 3. Exponentiation in Python Calculate and print the result of 2 raised to the power of 4 using the exponentiation operator. Code result = 2 ** 4 print ( \"2 to the power of 4:\" , result ) 4. Modulo operator in Python Calculate and print the remainder when 15 is divided by 4 using the modulo operator. Code x = 15 % 4 print ( \"Remainder:\" , x ) 5. Augmented assignment in Python Initialize variables x and y with some values. Code x = 5 y = 3 Use augmented assignment to add y to x and print the result. Code x += y print ( \"Result of x += y:\" , x ) 6. Comments in Python Add comments to the following code explaining the purpose of each line. Code # Calculate the sum of two numbers num1 = 10 num2 = 20 sum_result = num1 + num2 Print the result Code print ( \"Sum:\" , sum_result ) 7. Understanding data types - int vs float Declare an integer variable 'integer_var' and a float variable 'float_var'. Code integer_var = 5 float_var = 3.14 Print the data type of each variable. Code print ( \"Type of integer_var:\" , type ( integer_var )) print ( \"Type of float_var:\" , type ( float_var )) 8. Multi-line string in Python Create a multi-line string containing your address. Code address = \"\"\"123 Main Street Cityville, USA Zip: 12345\"\"\" Print the multi-line string. Code print ( address ) 9. Booleans in Python Declare boolean variables indicating weather conditions. Code is_sunny = True is_raining = False Print the values of the boolean variables. Code print ( \"Is it sunny?\" , is_sunny ) print ( \"Is it raining?\" , is_raining ) 10. Type error in Python Fix the type error in the following statement and print the corrected string. f1 = 0.25 f2 = 40.0 p = f1 * f2 bs = \"The price is \" + p print ( bs ) Code f1 = 0.25 f2 = 40.0 p = f1 * f2 bs = \"The price is \" + str ( p ) print ( bs ) 11. For loop with countries Create a list of countries: Spain, France and Germany. Code countries = [ \"Spain\" , \"France\" , \"Germany\" ] Use a for loop to print a message for each country. Code for country in countries : print ( \"The country is \" + country ) 12. For loop with numbers Create a list of numbers: [1, 2, 3]. Code numbers = [ 1 , 2 , 3 ] Use a for loop to calculate the product of all numbers and print the result. Code total = 1 for num in numbers : total *= num print ( \"Product of numbers:\" , total ) 13. Return statements in Python Define a function 'calculate_sum' that takes two parameters and returns their sum. Code def calculate_sum ( a , b ): return a + b Use the function to calculate and print the sum of 7 and 3. Code result = calculate_sum ( 7 , 3 ) print ( \"The sum is:\" , result ) Create a function 'is_positive' that takes a number as a parameter and returns True if it's positive, False otherwise. Code def is_positive ( number ): return number > 0 Test the 'is_positive' function with both positive and negative numbers and print the results. Code print ( is_positive ( 5 )) # Should print True print ( is_positive ( - 2 )) # Should print False 14. Defining a square function and calling it Define a function 'square' that takes a number as a parameter and returns its square. Code def square ( num ): return num * num Use the 'square' function to calculate and print the square of 8. Code result = square ( 8 ) print ( \"The square is:\" , result ) Create a function 'calculate_area' that calculates the area of a square given its side length. Use the 'square' function to find the area of a square with side length 5. Code def calculate_area ( side_length ): return square ( side_length ) area = calculate_area ( 5 ) print ( \"The area of the square is:\" , area ) 15. Using a for loop Write a program that uses a for loop to print the numbers from 1 to 5. Code for i in range ( 1 , 6 ): print ( i ) 16. Comparison operators in Python Create a function 'compare_numbers' that takes two numbers as parameters and prints a message indicating which number is greater or if they are equal. Code def compare_numbers ( x , y ): if x > y : print ( f \" { x } is greater than { y } .\" ) elif x < y : print ( f \" { x } is less than { y } .\" ) else : print ( f \" { x } is equal to { y } .\" ) Test the 'compare_numbers' function with different pairs of numbers. Code compare_numbers ( 7 , 3 ) compare_numbers ( 5 , 8 ) compare_numbers ( 4 , 4 )","title":"Exercises"},{"location":"contents/programming/exercises.html#exercises","text":"","title":"Exercises"},{"location":"contents/programming/exercises.html#1-combining-strings-using-concatenation","text":"Create two string variables, 'greeting' and 'name', and concatenate them to print a personalized greeting. Code greeting = \"Hello, \" name = \"world!\" print ( greeting + name ) Declare two more string variables, 'first_name' and 'last_name', and concatenate them to print the full name. Code first_name = \"John\" last_name = \"Doe\" print ( \"Full Name: \" + first_name + \" \" + last_name )","title":"1. Combining strings using concatenation"},{"location":"contents/programming/exercises.html#2-arithmetic-expressions-in-python","text":"Calculate and print the result of the expression: x = 10 + 5 * 2 Code x = 10 + 5 * 2 print ( \"Result of x:\" , x ) Create a new variable 'y' and assign the result of the expression: y = 3 ** 2 Code y = 3 ** 2 print ( \"Result of y:\" , y )","title":"2. Arithmetic expressions in Python"},{"location":"contents/programming/exercises.html#3-exponentiation-in-python","text":"Calculate and print the result of 2 raised to the power of 4 using the exponentiation operator. Code result = 2 ** 4 print ( \"2 to the power of 4:\" , result )","title":"3. Exponentiation in Python"},{"location":"contents/programming/exercises.html#4-modulo-operator-in-python","text":"Calculate and print the remainder when 15 is divided by 4 using the modulo operator. Code x = 15 % 4 print ( \"Remainder:\" , x )","title":"4. Modulo operator in Python"},{"location":"contents/programming/exercises.html#5-augmented-assignment-in-python","text":"Initialize variables x and y with some values. Code x = 5 y = 3 Use augmented assignment to add y to x and print the result. Code x += y print ( \"Result of x += y:\" , x )","title":"5. Augmented assignment in Python"},{"location":"contents/programming/exercises.html#6-comments-in-python","text":"Add comments to the following code explaining the purpose of each line. Code # Calculate the sum of two numbers num1 = 10 num2 = 20 sum_result = num1 + num2 Print the result Code print ( \"Sum:\" , sum_result )","title":"6. Comments in Python"},{"location":"contents/programming/exercises.html#7-understanding-data-types-int-vs-float","text":"Declare an integer variable 'integer_var' and a float variable 'float_var'. Code integer_var = 5 float_var = 3.14 Print the data type of each variable. Code print ( \"Type of integer_var:\" , type ( integer_var )) print ( \"Type of float_var:\" , type ( float_var ))","title":"7. Understanding data types - int vs float"},{"location":"contents/programming/exercises.html#8-multi-line-string-in-python","text":"Create a multi-line string containing your address. Code address = \"\"\"123 Main Street Cityville, USA Zip: 12345\"\"\" Print the multi-line string. Code print ( address )","title":"8. Multi-line string in Python"},{"location":"contents/programming/exercises.html#9-booleans-in-python","text":"Declare boolean variables indicating weather conditions. Code is_sunny = True is_raining = False Print the values of the boolean variables. Code print ( \"Is it sunny?\" , is_sunny ) print ( \"Is it raining?\" , is_raining )","title":"9. Booleans in Python"},{"location":"contents/programming/exercises.html#10-type-error-in-python","text":"Fix the type error in the following statement and print the corrected string. f1 = 0.25 f2 = 40.0 p = f1 * f2 bs = \"The price is \" + p print ( bs ) Code f1 = 0.25 f2 = 40.0 p = f1 * f2 bs = \"The price is \" + str ( p ) print ( bs )","title":"10. Type error in Python"},{"location":"contents/programming/exercises.html#11-for-loop-with-countries","text":"Create a list of countries: Spain, France and Germany. Code countries = [ \"Spain\" , \"France\" , \"Germany\" ] Use a for loop to print a message for each country. Code for country in countries : print ( \"The country is \" + country )","title":"11. For loop with countries"},{"location":"contents/programming/exercises.html#12-for-loop-with-numbers","text":"Create a list of numbers: [1, 2, 3]. Code numbers = [ 1 , 2 , 3 ] Use a for loop to calculate the product of all numbers and print the result. Code total = 1 for num in numbers : total *= num print ( \"Product of numbers:\" , total )","title":"12. For loop with numbers"},{"location":"contents/programming/exercises.html#13-return-statements-in-python","text":"Define a function 'calculate_sum' that takes two parameters and returns their sum. Code def calculate_sum ( a , b ): return a + b Use the function to calculate and print the sum of 7 and 3. Code result = calculate_sum ( 7 , 3 ) print ( \"The sum is:\" , result ) Create a function 'is_positive' that takes a number as a parameter and returns True if it's positive, False otherwise. Code def is_positive ( number ): return number > 0 Test the 'is_positive' function with both positive and negative numbers and print the results. Code print ( is_positive ( 5 )) # Should print True print ( is_positive ( - 2 )) # Should print False","title":"13. Return statements in Python"},{"location":"contents/programming/exercises.html#14-defining-a-square-function-and-calling-it","text":"Define a function 'square' that takes a number as a parameter and returns its square. Code def square ( num ): return num * num Use the 'square' function to calculate and print the square of 8. Code result = square ( 8 ) print ( \"The square is:\" , result ) Create a function 'calculate_area' that calculates the area of a square given its side length. Use the 'square' function to find the area of a square with side length 5. Code def calculate_area ( side_length ): return square ( side_length ) area = calculate_area ( 5 ) print ( \"The area of the square is:\" , area )","title":"14. Defining a square function and calling it"},{"location":"contents/programming/exercises.html#15-using-a-for-loop","text":"Write a program that uses a for loop to print the numbers from 1 to 5. Code for i in range ( 1 , 6 ): print ( i )","title":"15. Using a for loop"},{"location":"contents/programming/exercises.html#16-comparison-operators-in-python","text":"Create a function 'compare_numbers' that takes two numbers as parameters and prints a message indicating which number is greater or if they are equal. Code def compare_numbers ( x , y ): if x > y : print ( f \" { x } is greater than { y } .\" ) elif x < y : print ( f \" { x } is less than { y } .\" ) else : print ( f \" { x } is equal to { y } .\" ) Test the 'compare_numbers' function with different pairs of numbers. Code compare_numbers ( 7 , 3 ) compare_numbers ( 5 , 8 ) compare_numbers ( 4 , 4 )","title":"16. Comparison operators in Python"},{"location":"contents/programming/exercises_solution.html","text":"Exercises (Solution) Combining strings using concatenation Create two string variables, 'greeting' and 'name', and concatenate them to print a personalized greeting. greeting = \"Hello, \" name = \"world!\" print ( greeting + name ) Declare two more string variables, 'first_name' and 'last_name', and concatenate them to print the full name. first_name = \"John\" last_name = \"Doe\" print ( \"Full Name: \" + first_name + \" \" + last_name ) Arithmetic expressions in Python Calculate and print the result of the expression: x = 10 + 5 * 2 x = 10 + 5 * 2 print ( \"Result of x:\" , x ) Create a new variable 'y' and assign the result of the expression: y = 3 ** 2 y = 3 ** 2 print ( \"Result of y:\" , y ) Exponentiation in Python Calculate and print the result of 2 raised to the power of 4 using the exponentiation operator. result = 2 ** 4 print ( \"2 to the power of 4:\" , result ) Modulo operator in Python Calculate and print the remainder when 15 is divided by 4 using the modulo operator. x = 15 % 4 print ( \"Remainder:\" , x ) Augmented assignment in Python Initialize variables x and y with some values. x = 5 y = 3 # 2. Use augmented assignment to add y to x and print the result. x += y print ( \"Result of x += y:\" , x ) Comments in Python Add comments to the following code explaining the purpose of each line. # Calculate the sum of two numbers num1 = 10 num2 = 20 sum_result = num1 + num2 # Print the result print ( \"Sum:\" , sum_result ) Understanding data types - int vs float Declare an integer variable 'integer_var' and a float variable 'float_var'. integer_var = 5 float_var = 3.14 Print the data type of each variable. print ( \"Type of integer_var:\" , type ( integer_var )) print ( \"Type of float_var:\" , type ( float_var )) Multi-line string in Python Create a multi-line string containing your address. address = \"\"\"123 Main Street Cityville, USA Zip: 12345\"\"\" Print the multi-line string. print ( address ) Booleans in Python Declare boolean variables indicating weather conditions. is_sunny = True is_raining = False Print the values of the boolean variables. print ( \"Is it sunny?\" , is_sunny ) print ( \"Is it raining?\" , is_raining ) Type error in Python Fix the type error in the following statement and print the corrected string. f1 = 0.25 f2 = 40.0 p = f1 * f2 bs = \"The price is \" + p print ( bs ) Fixed: f1 = 0.25 f2 = 40.0 p = f1 * f2 bs = \"The price is \" + str ( p ) print ( bs ) For loop with countries Create a list of countries: Spain, France and Germany. countries = [ \"Spain\" , \"France\" , \"Germany\" ] Use a for loop to print a message for each country. for country in countries : print ( \"The country is \" + country ) For loop with numbers Create a list of numbers: [1, 2, 3]. numbers = [ 1 , 2 , 3 ] Use a for loop to calculate the product of all numbers and print the result. total = 1 for num in numbers : total *= num print ( \"Product of numbers:\" , total ) Return statements in Python Define a function 'calculate_sum' that takes two parameters and returns their sum. def calculate_sum ( a , b ): return a + b Use the function to calculate and print the sum of 7 and 3. result = calculate_sum ( 7 , 3 ) print ( \"The sum is:\" , result ) Create a function 'is_positive' that takes a number as a parameter and returns True if it's positive, False otherwise. def is_positive ( number ): return number > 0 Test the 'is_positive' function with both positive and negative numbers and print the results. print ( is_positive ( 5 )) # Should print True print ( is_positive ( - 2 )) # Should print False Defining a square function and calling it Define a function 'square' that takes a number as a parameter and returns its square. def square ( num ): return num * num Use the 'square' function to calculate and print the square of 8. result = square ( 8 ) print ( \"The square is:\" , result ) Create a function 'calculate_area' that calculates the area of a square given its side length. Use the 'square' function to find the area of a square with side length 5. def calculate_area ( side_length ): return square ( side_length ) area = calculate_area ( 5 ) print ( \"The area of the square is:\" , area ) Using a for loop Write a program that uses a for loop to print the numbers from 1 to 5. for i in range ( 1 , 6 ): print ( i ) Comparison operators in Python Create a function 'compare_numbers' that takes two numbers as parameters and prints a message indicating which number is greater or if they are equal. def compare_numbers ( x , y ): if x > y : print ( f \" { x } is greater than { y } .\" ) elif x < y : print ( f \" { x } is less than { y } .\" ) else : print ( f \" { x } is equal to { y } .\" ) Test the 'compare_numbers' function with different pairs of numbers. compare_numbers ( 7 , 3 ) compare_numbers ( 5 , 8 ) compare_numbers ( 4 , 4 )","title":"Exercises (Solutions)"},{"location":"contents/programming/exercises_solution.html#exercises-solution","text":"","title":"Exercises (Solution)"},{"location":"contents/programming/exercises_solution.html#combining-strings-using-concatenation","text":"Create two string variables, 'greeting' and 'name', and concatenate them to print a personalized greeting. greeting = \"Hello, \" name = \"world!\" print ( greeting + name ) Declare two more string variables, 'first_name' and 'last_name', and concatenate them to print the full name. first_name = \"John\" last_name = \"Doe\" print ( \"Full Name: \" + first_name + \" \" + last_name )","title":"Combining strings using concatenation"},{"location":"contents/programming/exercises_solution.html#arithmetic-expressions-in-python","text":"Calculate and print the result of the expression: x = 10 + 5 * 2 x = 10 + 5 * 2 print ( \"Result of x:\" , x ) Create a new variable 'y' and assign the result of the expression: y = 3 ** 2 y = 3 ** 2 print ( \"Result of y:\" , y )","title":"Arithmetic expressions in Python"},{"location":"contents/programming/exercises_solution.html#exponentiation-in-python","text":"Calculate and print the result of 2 raised to the power of 4 using the exponentiation operator. result = 2 ** 4 print ( \"2 to the power of 4:\" , result )","title":"Exponentiation in Python"},{"location":"contents/programming/exercises_solution.html#modulo-operator-in-python","text":"Calculate and print the remainder when 15 is divided by 4 using the modulo operator. x = 15 % 4 print ( \"Remainder:\" , x )","title":"Modulo operator in Python"},{"location":"contents/programming/exercises_solution.html#augmented-assignment-in-python","text":"Initialize variables x and y with some values. x = 5 y = 3 # 2. Use augmented assignment to add y to x and print the result. x += y print ( \"Result of x += y:\" , x )","title":"Augmented assignment in Python"},{"location":"contents/programming/exercises_solution.html#comments-in-python","text":"Add comments to the following code explaining the purpose of each line. # Calculate the sum of two numbers num1 = 10 num2 = 20 sum_result = num1 + num2 # Print the result print ( \"Sum:\" , sum_result )","title":"Comments in Python"},{"location":"contents/programming/exercises_solution.html#understanding-data-types-int-vs-float","text":"Declare an integer variable 'integer_var' and a float variable 'float_var'. integer_var = 5 float_var = 3.14 Print the data type of each variable. print ( \"Type of integer_var:\" , type ( integer_var )) print ( \"Type of float_var:\" , type ( float_var ))","title":"Understanding data types - int vs float"},{"location":"contents/programming/exercises_solution.html#multi-line-string-in-python","text":"Create a multi-line string containing your address. address = \"\"\"123 Main Street Cityville, USA Zip: 12345\"\"\" Print the multi-line string. print ( address )","title":"Multi-line string in Python"},{"location":"contents/programming/exercises_solution.html#booleans-in-python","text":"Declare boolean variables indicating weather conditions. is_sunny = True is_raining = False Print the values of the boolean variables. print ( \"Is it sunny?\" , is_sunny ) print ( \"Is it raining?\" , is_raining )","title":"Booleans in Python"},{"location":"contents/programming/exercises_solution.html#type-error-in-python","text":"Fix the type error in the following statement and print the corrected string. f1 = 0.25 f2 = 40.0 p = f1 * f2 bs = \"The price is \" + p print ( bs ) Fixed: f1 = 0.25 f2 = 40.0 p = f1 * f2 bs = \"The price is \" + str ( p ) print ( bs )","title":"Type error in Python"},{"location":"contents/programming/exercises_solution.html#for-loop-with-countries","text":"Create a list of countries: Spain, France and Germany. countries = [ \"Spain\" , \"France\" , \"Germany\" ] Use a for loop to print a message for each country. for country in countries : print ( \"The country is \" + country )","title":"For loop with countries"},{"location":"contents/programming/exercises_solution.html#for-loop-with-numbers","text":"Create a list of numbers: [1, 2, 3]. numbers = [ 1 , 2 , 3 ] Use a for loop to calculate the product of all numbers and print the result. total = 1 for num in numbers : total *= num print ( \"Product of numbers:\" , total )","title":"For loop with numbers"},{"location":"contents/programming/exercises_solution.html#return-statements-in-python","text":"Define a function 'calculate_sum' that takes two parameters and returns their sum. def calculate_sum ( a , b ): return a + b Use the function to calculate and print the sum of 7 and 3. result = calculate_sum ( 7 , 3 ) print ( \"The sum is:\" , result ) Create a function 'is_positive' that takes a number as a parameter and returns True if it's positive, False otherwise. def is_positive ( number ): return number > 0 Test the 'is_positive' function with both positive and negative numbers and print the results. print ( is_positive ( 5 )) # Should print True print ( is_positive ( - 2 )) # Should print False","title":"Return statements in Python"},{"location":"contents/programming/exercises_solution.html#defining-a-square-function-and-calling-it","text":"Define a function 'square' that takes a number as a parameter and returns its square. def square ( num ): return num * num Use the 'square' function to calculate and print the square of 8. result = square ( 8 ) print ( \"The square is:\" , result ) Create a function 'calculate_area' that calculates the area of a square given its side length. Use the 'square' function to find the area of a square with side length 5. def calculate_area ( side_length ): return square ( side_length ) area = calculate_area ( 5 ) print ( \"The area of the square is:\" , area )","title":"Defining a square function and calling it"},{"location":"contents/programming/exercises_solution.html#using-a-for-loop","text":"Write a program that uses a for loop to print the numbers from 1 to 5. for i in range ( 1 , 6 ): print ( i )","title":"Using a for loop"},{"location":"contents/programming/exercises_solution.html#comparison-operators-in-python","text":"Create a function 'compare_numbers' that takes two numbers as parameters and prints a message indicating which number is greater or if they are equal. def compare_numbers ( x , y ): if x > y : print ( f \" { x } is greater than { y } .\" ) elif x < y : print ( f \" { x } is less than { y } .\" ) else : print ( f \" { x } is equal to { y } .\" ) Test the 'compare_numbers' function with different pairs of numbers. compare_numbers ( 7 , 3 ) compare_numbers ( 5 , 8 ) compare_numbers ( 4 , 4 )","title":"Comparison operators in Python"},{"location":"contents/programming/flipcoin.html","text":"Programming Project: Coin Flip Simulation This animation displays a simulation of 500 coin tosses . As can be observed, the percentages of heads and tails are converging towards 50% , which is the theoretical probability of getting a head or a tail in a single toss. 0. Heads or Tails Obviously, we need coins for this simulation. Coin flipping, coin tossing, or heads or tails is the practice of throwing a coin in the air and checking which side is showing when it lands, in order to choose between two alternatives, heads or tails, sometimes used to resolve a dispute between two parties. 1. Definition of variables These are the variables that need to be defined in the simulation application: Heads or tails? result : This variable stores a random integer between 0 and 1, meaning result can have a value of 0 or 1 . We will assign the value 0 to \"heads\" and the value 1 to \"tails.\" Number of heads and tails heads : The variable heads stores the number of heads that have appeared so far. tails : The variable tails stores the number of tails that have appeared so far. Flips or tosses flips : The variable flips stores the number of heads and tails that have appeared so far, in other words, the number of coin tosses performed. nflips : The variable nflips stores the number of tosses the simulator will perform . Frequency and percetages f_heads : The variable f_heads stores the percentage of heads that have appeared so far. It is a numerical value. f_tails : The variable f_tails stores the percentage of tails that have appeared so far. It is a numerical value. p_heads : The variable p_heads stores the percentage of heads that have appeared so far followed by the \"%\" character . It is a text value displayed in the interface. p_tails : The variable p_tails stores the percentage of tails that have appeared so far followed by the \"%\" character . It is a text value displayed in the interface. 2. The Main Loop The structure of the main program should look like this: wait 2 sec flips = 0 heads = 0 tails = 0 repeat nflips result = random(0,1) flips = flips + 1 wait 0.2 sec In Scratch, you can build this main loop using the following instructions and control structures:","title":"Programming Project: Coin Flip Simulation"},{"location":"contents/programming/flipcoin.html#programming-project-coin-flip-simulation","text":"This animation displays a simulation of 500 coin tosses . As can be observed, the percentages of heads and tails are converging towards 50% , which is the theoretical probability of getting a head or a tail in a single toss.","title":"Programming Project: Coin Flip Simulation"},{"location":"contents/programming/flipcoin.html#0-heads-or-tails","text":"Obviously, we need coins for this simulation. Coin flipping, coin tossing, or heads or tails is the practice of throwing a coin in the air and checking which side is showing when it lands, in order to choose between two alternatives, heads or tails, sometimes used to resolve a dispute between two parties.","title":"0. Heads or Tails"},{"location":"contents/programming/flipcoin.html#1-definition-of-variables","text":"These are the variables that need to be defined in the simulation application: Heads or tails? result : This variable stores a random integer between 0 and 1, meaning result can have a value of 0 or 1 . We will assign the value 0 to \"heads\" and the value 1 to \"tails.\" Number of heads and tails heads : The variable heads stores the number of heads that have appeared so far. tails : The variable tails stores the number of tails that have appeared so far. Flips or tosses flips : The variable flips stores the number of heads and tails that have appeared so far, in other words, the number of coin tosses performed. nflips : The variable nflips stores the number of tosses the simulator will perform . Frequency and percetages f_heads : The variable f_heads stores the percentage of heads that have appeared so far. It is a numerical value. f_tails : The variable f_tails stores the percentage of tails that have appeared so far. It is a numerical value. p_heads : The variable p_heads stores the percentage of heads that have appeared so far followed by the \"%\" character . It is a text value displayed in the interface. p_tails : The variable p_tails stores the percentage of tails that have appeared so far followed by the \"%\" character . It is a text value displayed in the interface.","title":"1. Definition of variables"},{"location":"contents/programming/flipcoin.html#2-the-main-loop","text":"The structure of the main program should look like this: wait 2 sec flips = 0 heads = 0 tails = 0 repeat nflips result = random(0,1) flips = flips + 1 wait 0.2 sec In Scratch, you can build this main loop using the following instructions and control structures:","title":"2. The Main Loop"},{"location":"contents/programming/functions.html","text":"Functions in Python: Basic Concepts Introduction In Python, functions are like little helpers that perform specific tasks. They make code organized and reusable. Let's explore two types of functions: those without parameters and those with two parameters. We'll also cover functions with and without a return value. Functions Without Parameters def say_hello (): \"\"\"This function prints a simple greeting.\"\"\" print ( \"Hello, world!\" ) # Function Call say_hello () def say_hello(): : Declares a function named say_hello without parameters. print(\"Hello, world!\") : Code inside the function that prints a greeting. Functions with Two Parameters def add_numbers ( x , y ): \"\"\"This function adds two numbers and prints the result.\"\"\" result = x + y print ( \"Sum:\" , result ) # Function Call add_numbers ( 5 , 3 ) def add_numbers(x, y): : Declares a function named add_numbers with two parameters ( x and y ). result = x + y : Performs addition inside the function. print(\"Sum:\", result) : Prints the result. Functions with Return Value def multiply_numbers ( a , b ): \"\"\"This function multiplies two numbers and returns the result.\"\"\" result = a * b return result # Function Call product = multiply_numbers ( 4 , 7 ) print ( \"Product:\" , product ) def multiply_numbers(a, b): : Declares a function named multiply_numbers with two parameters. return result : Returns the multiplication result. product = multiply_numbers(4, 7) : Calls the function and assigns the result to product . print(\"Product:\", product) : Prints the product. Functions Without Return Value def greet_user (): \"\"\"This function greets the user without returning a value.\"\"\" print ( \"Hey there! Welcome!\" ) # Function Call greet_user () def greet_user(): : Declares a function named greet_user without a return value. print(\"Hey there! Welcome!\") : Prints a friendly greeting. More examples Example 1: Greeting Function def greet_user (): \"\"\"This function greets the user without returning a value.\"\"\" print ( \"Hey there! Welcome!\" ) # Function Call greet_user () Explanation: This function says a friendly greeting. Example Message: \"Hey there! Welcome!\" Example 2: Calculator Function def multiply_numbers ( a , b ): \"\"\"This function multiplies two numbers and returns the result.\"\"\" result = a * b return result # Function Call product = multiply_numbers ( 4 , 7 ) print ( \"Product:\" , product ) Explanation: This function multiplies two numbers. Example Message: \"Product: 28\" These basic functions help keep code organized and are easy to understand. Functions without parameters perform specific actions, while functions with parameters allow customization. Functions with return values provide results that can be used in other parts of the code.","title":"Functions in Python: Basic Concepts"},{"location":"contents/programming/functions.html#functions-in-python-basic-concepts","text":"","title":"Functions in Python: Basic Concepts"},{"location":"contents/programming/functions.html#introduction","text":"In Python, functions are like little helpers that perform specific tasks. They make code organized and reusable. Let's explore two types of functions: those without parameters and those with two parameters. We'll also cover functions with and without a return value.","title":"Introduction"},{"location":"contents/programming/functions.html#functions-without-parameters","text":"def say_hello (): \"\"\"This function prints a simple greeting.\"\"\" print ( \"Hello, world!\" ) # Function Call say_hello () def say_hello(): : Declares a function named say_hello without parameters. print(\"Hello, world!\") : Code inside the function that prints a greeting.","title":"Functions Without Parameters"},{"location":"contents/programming/functions.html#functions-with-two-parameters","text":"def add_numbers ( x , y ): \"\"\"This function adds two numbers and prints the result.\"\"\" result = x + y print ( \"Sum:\" , result ) # Function Call add_numbers ( 5 , 3 ) def add_numbers(x, y): : Declares a function named add_numbers with two parameters ( x and y ). result = x + y : Performs addition inside the function. print(\"Sum:\", result) : Prints the result.","title":"Functions with Two Parameters"},{"location":"contents/programming/functions.html#functions-with-return-value","text":"def multiply_numbers ( a , b ): \"\"\"This function multiplies two numbers and returns the result.\"\"\" result = a * b return result # Function Call product = multiply_numbers ( 4 , 7 ) print ( \"Product:\" , product ) def multiply_numbers(a, b): : Declares a function named multiply_numbers with two parameters. return result : Returns the multiplication result. product = multiply_numbers(4, 7) : Calls the function and assigns the result to product . print(\"Product:\", product) : Prints the product.","title":"Functions with Return Value"},{"location":"contents/programming/functions.html#functions-without-return-value","text":"def greet_user (): \"\"\"This function greets the user without returning a value.\"\"\" print ( \"Hey there! Welcome!\" ) # Function Call greet_user () def greet_user(): : Declares a function named greet_user without a return value. print(\"Hey there! Welcome!\") : Prints a friendly greeting.","title":"Functions Without Return Value"},{"location":"contents/programming/functions.html#more-examples","text":"","title":"More examples"},{"location":"contents/programming/functions.html#example-1-greeting-function","text":"def greet_user (): \"\"\"This function greets the user without returning a value.\"\"\" print ( \"Hey there! Welcome!\" ) # Function Call greet_user () Explanation: This function says a friendly greeting. Example Message: \"Hey there! Welcome!\"","title":"Example 1: Greeting Function"},{"location":"contents/programming/functions.html#example-2-calculator-function","text":"def multiply_numbers ( a , b ): \"\"\"This function multiplies two numbers and returns the result.\"\"\" result = a * b return result # Function Call product = multiply_numbers ( 4 , 7 ) print ( \"Product:\" , product ) Explanation: This function multiplies two numbers. Example Message: \"Product: 28\" These basic functions help keep code organized and are easy to understand. Functions without parameters perform specific actions, while functions with parameters allow customization. Functions with return values provide results that can be used in other parts of the code.","title":"Example 2: Calculator Function"},{"location":"contents/programming/lawlargenumbers.html","text":"The Law of Large Numbers The Law of Large Numbers is a fundamental principle in probability theory that states that as the number of repetitions of a random experiment increases, the average of the results tends to approach the expected value. In this exciting Scratch programming project, you will have the opportunity to explore and visualize this concept through a coin toss simulation.","title":"The Law of Large Numbers"},{"location":"contents/programming/lawlargenumbers.html#the-law-of-large-numbers","text":"The Law of Large Numbers is a fundamental principle in probability theory that states that as the number of repetitions of a random experiment increases, the average of the results tends to approach the expected value. In this exciting Scratch programming project, you will have the opportunity to explore and visualize this concept through a coin toss simulation.","title":"The Law of Large Numbers"},{"location":"contents/programming/overview.html","text":"Python: A Comprehensive Overview Introduction Python is a high-level, versatile, and interpreted programming language known for its readability and ease of use. Guido van Rossum created Python in the late 1980s, and since then, it has evolved into one of the most popular languages in the world. Python's design philosophy emphasizes code readability and encourages developers to write clear and concise code. In this comprehensive overview, we will explore what Python is, how it works, its history, and its current applications. What is Python? High-Level and Interpreted Python is a high-level programming language, which means it abstracts complex details from the machine and allows developers to focus on solving problems more efficiently. Additionally, Python is an interpreted language, meaning the code is executed line by line, making it easier to debug and test. General-Purpose Python is a general-purpose language, meaning it is not limited to specific domains or applications. Whether you're building web applications, data analysis tools, artificial intelligence models, or scripting automation tasks, Python's flexibility makes it suitable for a wide range of applications. Object-Oriented Python supports object-oriented programming (OOP) principles. OOP is a programming paradigm that uses objects, which encapsulate data and behaviors, to model real-world entities. This approach promotes modularity, code reuse, and maintainability. How Python Works Python Interpreter Python code is executed by the Python interpreter, a software program that reads and interprets Python scripts. The interpreter converts high-level code into bytecode, a lower-level representation, which is then executed by the Python Virtual Machine (PVM). This process allows Python code to be platform-independent, running on various operating systems without modification. Dynamic Typing Python is dynamically typed, meaning the data type of a variable is interpreted at runtime. Unlike statically typed languages where variable types are declared explicitly, Python allows variables to change types during execution. This flexibility simplifies coding but requires careful attention to avoid potential issues. Syntax and Indentation Python's syntax is designed to be simple and readable. Instead of using braces or keywords, Python relies on indentation to define code blocks. This forces a consistent and clean coding style, reducing the chances of errors and making the code more accessible to developers. A Brief History of Python Origins and Guido van Rossum Guido van Rossum, a Dutch programmer, created Python in the late 1980s. The language's name is inspired by Monty Python's Flying Circus, a British comedy troupe. Guido envisioned a language that prioritized code readability and embraced a minimalist philosophy. Python 2 and Python 3 Python 2, released in 2000, was a significant milestone for the language. However, as the development community expanded, it became evident that certain features needed improvement. In 2008, Python 3 was introduced to address these issues and enhance the language's consistency. Python 3 is not backward compatible with Python 2, leading to a gradual transition within the community. Community and Open Source One key factor in Python's success is its strong and welcoming community. Python is an open-source language, and developers worldwide contribute to its growth. The Python Software Foundation (PSF) oversees the language's development, ensuring its evolution aligns with community values and needs. Applications of Python Web Development Python is widely used in web development. Frameworks like Django and Flask simplify the creation of dynamic and scalable web applications. Python's simplicity and readability make it an excellent choice for both beginners and experienced developers in the web development domain. Data Science and Machine Learning Python has become a dominant language in the field of data science and machine learning. Libraries such as NumPy, Pandas, and Scikit-learn facilitate data manipulation, analysis, and machine learning model development. The versatility of Python makes it a favorite among data scientists for exploration and experimentation. Automation and Scripting Python's easy-to-read syntax and broad standard library make it a preferred language for automation and scripting tasks. From automating repetitive processes to creating system administration scripts, Python simplifies complex tasks and boosts productivity. Artificial Intelligence and Robotics The popularity of Python extends to artificial intelligence and robotics. Libraries like TensorFlow and PyTorch enable developers to build sophisticated machine learning models. Python's adaptability makes it a language of choice in robotics for controlling and programming robotic systems. Game Development While not as prevalent as in other domains, Python is gaining traction in game development. Libraries like Pygame provide a framework for building 2D games, and Godot Engine supports Python scripting for 3D game development. Python's simplicity appeals to game developers looking for quick prototyping and development. Summary Python stands as a powerful, versatile, and community-driven programming language. Its design principles focus on simplicity, readability, and flexibility, making it an ideal choice for both beginners and experienced developers. Whether in web development, data science, automation, artificial intelligence, or game development, Python's widespread adoption and continuous growth affirm its significance in the ever-evolving landscape of programming languages.","title":"Overview"},{"location":"contents/programming/overview.html#python-a-comprehensive-overview","text":"","title":"Python: A Comprehensive Overview"},{"location":"contents/programming/overview.html#introduction","text":"Python is a high-level, versatile, and interpreted programming language known for its readability and ease of use. Guido van Rossum created Python in the late 1980s, and since then, it has evolved into one of the most popular languages in the world. Python's design philosophy emphasizes code readability and encourages developers to write clear and concise code. In this comprehensive overview, we will explore what Python is, how it works, its history, and its current applications.","title":"Introduction"},{"location":"contents/programming/overview.html#what-is-python","text":"","title":"What is Python?"},{"location":"contents/programming/overview.html#high-level-and-interpreted","text":"Python is a high-level programming language, which means it abstracts complex details from the machine and allows developers to focus on solving problems more efficiently. Additionally, Python is an interpreted language, meaning the code is executed line by line, making it easier to debug and test.","title":"High-Level and Interpreted"},{"location":"contents/programming/overview.html#general-purpose","text":"Python is a general-purpose language, meaning it is not limited to specific domains or applications. Whether you're building web applications, data analysis tools, artificial intelligence models, or scripting automation tasks, Python's flexibility makes it suitable for a wide range of applications.","title":"General-Purpose"},{"location":"contents/programming/overview.html#object-oriented","text":"Python supports object-oriented programming (OOP) principles. OOP is a programming paradigm that uses objects, which encapsulate data and behaviors, to model real-world entities. This approach promotes modularity, code reuse, and maintainability.","title":"Object-Oriented"},{"location":"contents/programming/overview.html#how-python-works","text":"","title":"How Python Works"},{"location":"contents/programming/overview.html#python-interpreter","text":"Python code is executed by the Python interpreter, a software program that reads and interprets Python scripts. The interpreter converts high-level code into bytecode, a lower-level representation, which is then executed by the Python Virtual Machine (PVM). This process allows Python code to be platform-independent, running on various operating systems without modification.","title":"Python Interpreter"},{"location":"contents/programming/overview.html#dynamic-typing","text":"Python is dynamically typed, meaning the data type of a variable is interpreted at runtime. Unlike statically typed languages where variable types are declared explicitly, Python allows variables to change types during execution. This flexibility simplifies coding but requires careful attention to avoid potential issues.","title":"Dynamic Typing"},{"location":"contents/programming/overview.html#syntax-and-indentation","text":"Python's syntax is designed to be simple and readable. Instead of using braces or keywords, Python relies on indentation to define code blocks. This forces a consistent and clean coding style, reducing the chances of errors and making the code more accessible to developers.","title":"Syntax and Indentation"},{"location":"contents/programming/overview.html#a-brief-history-of-python","text":"","title":"A Brief History of Python"},{"location":"contents/programming/overview.html#origins-and-guido-van-rossum","text":"Guido van Rossum, a Dutch programmer, created Python in the late 1980s. The language's name is inspired by Monty Python's Flying Circus, a British comedy troupe. Guido envisioned a language that prioritized code readability and embraced a minimalist philosophy.","title":"Origins and Guido van Rossum"},{"location":"contents/programming/overview.html#python-2-and-python-3","text":"Python 2, released in 2000, was a significant milestone for the language. However, as the development community expanded, it became evident that certain features needed improvement. In 2008, Python 3 was introduced to address these issues and enhance the language's consistency. Python 3 is not backward compatible with Python 2, leading to a gradual transition within the community.","title":"Python 2 and Python 3"},{"location":"contents/programming/overview.html#community-and-open-source","text":"One key factor in Python's success is its strong and welcoming community. Python is an open-source language, and developers worldwide contribute to its growth. The Python Software Foundation (PSF) oversees the language's development, ensuring its evolution aligns with community values and needs.","title":"Community and Open Source"},{"location":"contents/programming/overview.html#applications-of-python","text":"","title":"Applications of Python"},{"location":"contents/programming/overview.html#web-development","text":"Python is widely used in web development. Frameworks like Django and Flask simplify the creation of dynamic and scalable web applications. Python's simplicity and readability make it an excellent choice for both beginners and experienced developers in the web development domain.","title":"Web Development"},{"location":"contents/programming/overview.html#data-science-and-machine-learning","text":"Python has become a dominant language in the field of data science and machine learning. Libraries such as NumPy, Pandas, and Scikit-learn facilitate data manipulation, analysis, and machine learning model development. The versatility of Python makes it a favorite among data scientists for exploration and experimentation.","title":"Data Science and Machine Learning"},{"location":"contents/programming/overview.html#automation-and-scripting","text":"Python's easy-to-read syntax and broad standard library make it a preferred language for automation and scripting tasks. From automating repetitive processes to creating system administration scripts, Python simplifies complex tasks and boosts productivity.","title":"Automation and Scripting"},{"location":"contents/programming/overview.html#artificial-intelligence-and-robotics","text":"The popularity of Python extends to artificial intelligence and robotics. Libraries like TensorFlow and PyTorch enable developers to build sophisticated machine learning models. Python's adaptability makes it a language of choice in robotics for controlling and programming robotic systems.","title":"Artificial Intelligence and Robotics"},{"location":"contents/programming/overview.html#game-development","text":"While not as prevalent as in other domains, Python is gaining traction in game development. Libraries like Pygame provide a framework for building 2D games, and Godot Engine supports Python scripting for 3D game development. Python's simplicity appeals to game developers looking for quick prototyping and development.","title":"Game Development"},{"location":"contents/programming/overview.html#summary","text":"Python stands as a powerful, versatile, and community-driven programming language. Its design principles focus on simplicity, readability, and flexibility, making it an ideal choice for both beginners and experienced developers. Whether in web development, data science, automation, artificial intelligence, or game development, Python's widespread adoption and continuous growth affirm its significance in the ever-evolving landscape of programming languages.","title":"Summary"},{"location":"contents/programming/problem-modeling.html","text":"Interpretation of reality through problem modeling Problem modeling In programming, problem modeling is the process of representing a real-world problem in a way that can be solved by a computer program. This typically involves breaking down the problem into smaller, more manageable parts and identifying the relationships between those parts. The interpretation of reality The interpretation of reality through problem modeling is the process of understanding how the problem to be solved relates to the real-world situation that it is intended to address, and using that understanding to inform the design of the program. This can help ensure that the program correctly captures the relevant aspects of the problem and produces accurate and useful results.","title":"Interpretation of reality through problem modeling"},{"location":"contents/programming/problem-modeling.html#interpretation-of-reality-through-problem-modeling","text":"","title":"Interpretation of reality through problem modeling"},{"location":"contents/programming/problem-modeling.html#problem-modeling","text":"In programming, problem modeling is the process of representing a real-world problem in a way that can be solved by a computer program. This typically involves breaking down the problem into smaller, more manageable parts and identifying the relationships between those parts.","title":"Problem modeling"},{"location":"contents/programming/problem-modeling.html#the-interpretation-of-reality","text":"The interpretation of reality through problem modeling is the process of understanding how the problem to be solved relates to the real-world situation that it is intended to address, and using that understanding to inform the design of the program. This can help ensure that the program correctly captures the relevant aspects of the problem and produces accurate and useful results.","title":"The interpretation of reality"},{"location":"contents/programming/python_basic.html","text":"Introduction to Python Python is a beginner-friendly programming language that is easy to read and write. It is widely used in web development, data science, automation, and artificial intelligence. 1. Printing Messages The print() function is used to display messages on the screen. print ( \"Hello, world!\" ) 2. Variables and Data Types Variables store information that can be used later. name = \"Alice\" # String age = 13 # Integer height = 1.6 # Float is_student = True # Boolean 3. User Input The input() function allows users to enter information. name = input ( \"What is your name? \" ) print ( \"Hello, \" + name + \"!\" ) 4. Basic Operations Python can perform mathematical operations like addition, subtraction, multiplication, and division. x = 10 y = 3 print ( x + y ) # Addition print ( x - y ) # Subtraction print ( x * y ) # Multiplication print ( x / y ) # Division print ( x % y ) # Modulus (remainder) 5. Conditional Statements The if statement allows you to make decisions in your code. age = 13 if age >= 18 : print ( \"You are an adult.\" ) else : print ( \"You are a minor.\" ) 6. Loops Loops help repeat a block of code multiple times. a) for loop for i in range ( 5 ): print ( \"Iteration\" , i ) b) while loop count = 0 while count < 5 : print ( \"Count is\" , count ) count += 1 7. Functions Functions allow us to reuse code by defining reusable blocks. def greet ( name ): print ( \"Hello, \" + name + \"!\" ) greet ( \"Alice\" ) greet ( \"Bob\" ) These are the basic concepts of Python. As you progress, you will learn about more advanced topics like lists, dictionaries, and object-oriented programming!","title":"Python Basics"},{"location":"contents/programming/python_basic.html#introduction-to-python","text":"Python is a beginner-friendly programming language that is easy to read and write. It is widely used in web development, data science, automation, and artificial intelligence.","title":"Introduction to Python"},{"location":"contents/programming/python_basic.html#1-printing-messages","text":"The print() function is used to display messages on the screen. print ( \"Hello, world!\" )","title":"1. Printing Messages"},{"location":"contents/programming/python_basic.html#2-variables-and-data-types","text":"Variables store information that can be used later. name = \"Alice\" # String age = 13 # Integer height = 1.6 # Float is_student = True # Boolean","title":"2. Variables and Data Types"},{"location":"contents/programming/python_basic.html#3-user-input","text":"The input() function allows users to enter information. name = input ( \"What is your name? \" ) print ( \"Hello, \" + name + \"!\" )","title":"3. User Input"},{"location":"contents/programming/python_basic.html#4-basic-operations","text":"Python can perform mathematical operations like addition, subtraction, multiplication, and division. x = 10 y = 3 print ( x + y ) # Addition print ( x - y ) # Subtraction print ( x * y ) # Multiplication print ( x / y ) # Division print ( x % y ) # Modulus (remainder)","title":"4. Basic Operations"},{"location":"contents/programming/python_basic.html#5-conditional-statements","text":"The if statement allows you to make decisions in your code. age = 13 if age >= 18 : print ( \"You are an adult.\" ) else : print ( \"You are a minor.\" )","title":"5. Conditional Statements"},{"location":"contents/programming/python_basic.html#6-loops","text":"Loops help repeat a block of code multiple times.","title":"6. Loops"},{"location":"contents/programming/python_basic.html#a-for-loop","text":"for i in range ( 5 ): print ( \"Iteration\" , i )","title":"a) for loop"},{"location":"contents/programming/python_basic.html#b-while-loop","text":"count = 0 while count < 5 : print ( \"Count is\" , count ) count += 1","title":"b) while loop"},{"location":"contents/programming/python_basic.html#7-functions","text":"Functions allow us to reuse code by defining reusable blocks. def greet ( name ): print ( \"Hello, \" + name + \"!\" ) greet ( \"Alice\" ) greet ( \"Bob\" ) These are the basic concepts of Python. As you progress, you will learn about more advanced topics like lists, dictionaries, and object-oriented programming!","title":"7. Functions"},{"location":"contents/programming/slides.html","text":"Unit 3. Presentation Slides Learning Python","title":"Presentation"},{"location":"contents/programming/slides.html#unit-3-presentation-slides","text":"","title":"Unit 3. Presentation Slides"},{"location":"contents/programming/slides.html#learning-python","text":"","title":"Learning Python"},{"location":"contents/programming/variables.html","text":"Introduction to Python Programming What is Python? Python is a versatile, high-level programming language known for its simplicity and readability. It supports various programming paradigms, making it suitable for diverse applications, including web development, data analysis, artificial intelligence, and automation. 1. Variables and Data Types In Python, variables are used to store and manipulate data. Variables do not require explicit declarations; you simply assign a value to them. # Integer variable age = 25 # Floating-point variable height = 1.75 # String variable name = \"John Doe\" 2. Declaration and Assignment Declaration: You don't need to declare the data type explicitly. Python infers it based on the assigned value. Assignment: Use the = operator to assign a value to a variable. # Integer declaration and assignment num_of_students = 100 # Floating-point declaration and assignment pi_value = 3.14 # String declaration and assignment greeting_message = \"Hello, Python!\" 3. Data Types in Python Python supports various data types, including: int: Integer (whole numbers) float: Floating-point (decimal numbers) str: String (text) 4. Printing Values The print() function is used to display values. You can print variables or direct values. # Printing integer value print ( num_of_students ) # Printing floating-point value print ( pi_value ) # Printing string value print ( greeting_message ) 5. Operations with Variables You can perform mathematical operations on numeric variables. # Mathematical operations result = num_of_students * 2 print ( result ) # Combining strings full_name = name + \" Smith\" print ( full_name ) These fundamental concepts form the basis of Python programming. As you progress, you'll explore more advanced topics and gain the skills to build complex applications.","title":"Variables and data types"},{"location":"contents/programming/variables.html#introduction-to-python-programming","text":"","title":"Introduction to Python Programming"},{"location":"contents/programming/variables.html#what-is-python","text":"Python is a versatile, high-level programming language known for its simplicity and readability. It supports various programming paradigms, making it suitable for diverse applications, including web development, data analysis, artificial intelligence, and automation.","title":"What is Python?"},{"location":"contents/programming/variables.html#1-variables-and-data-types","text":"In Python, variables are used to store and manipulate data. Variables do not require explicit declarations; you simply assign a value to them. # Integer variable age = 25 # Floating-point variable height = 1.75 # String variable name = \"John Doe\"","title":"1. Variables and Data Types"},{"location":"contents/programming/variables.html#2-declaration-and-assignment","text":"Declaration: You don't need to declare the data type explicitly. Python infers it based on the assigned value. Assignment: Use the = operator to assign a value to a variable. # Integer declaration and assignment num_of_students = 100 # Floating-point declaration and assignment pi_value = 3.14 # String declaration and assignment greeting_message = \"Hello, Python!\"","title":"2. Declaration and Assignment"},{"location":"contents/programming/variables.html#3-data-types-in-python","text":"Python supports various data types, including: int: Integer (whole numbers) float: Floating-point (decimal numbers) str: String (text)","title":"3. Data Types in Python"},{"location":"contents/programming/variables.html#4-printing-values","text":"The print() function is used to display values. You can print variables or direct values. # Printing integer value print ( num_of_students ) # Printing floating-point value print ( pi_value ) # Printing string value print ( greeting_message )","title":"4. Printing Values"},{"location":"contents/programming/variables.html#5-operations-with-variables","text":"You can perform mathematical operations on numeric variables. # Mathematical operations result = num_of_students * 2 print ( result ) # Combining strings full_name = name + \" Smith\" print ( full_name ) These fundamental concepts form the basis of Python programming. As you progress, you'll explore more advanced topics and gain the skills to build complex applications.","title":"5. Operations with Variables"},{"location":"contents/robotics/actuators.html","text":"Actuators An actuator is a component of a robot that is responsible for creating movement or motion . In other words, an actuator is what makes a robot move, grab, lift, or perform any other physical action. There are different types of actuators used in robotics, depending on the purpose and design of the robot. Some common types of actuators include: Motors : These are electrical or mechanical devices that convert electrical energy into mechanical energy to create motion. Motors are commonly used in robots to drive wheels, move robot arms, or control the position of robot joints. Pneumatic cylinders : These are devices that use compressed air to create motion. Pneumatic cylinders are often used in industrial robots to move heavy loads or in applications where precision and speed are important. Hydraulic cylinders : Similar to pneumatic cylinders, hydraulic cylinders use fluid instead of air to create motion. They are often used in large industrial robots for heavy-duty applications. Solenoids : These are electromechanical devices that convert electrical energy into linear or rotary motion. Solenoids are commonly used in small robots for precise movements, such as opening and closing robot grippers. In summary, an actuator is a critical component of a robot that creates motion or movement . Different types of actuators are used depending on the application and design of the robot. By using actuators, robots can perform physical tasks and interact with their environment, making them useful for a wide range of applications, from manufacturing to healthcare. Glossary English Spanish Example Sentence (English) Actuators Actuadores \"The robot's actuators allowed it to perform precise movements and interact with objects.\" Applications Aplicaciones \"Robots have various applications in industries such as manufacturing, healthcare, and more.\" Arms Brazos \"The robot's multiple arms enabled it to manipulate objects with dexterity.\" Component Componente \"The actuator is an essential component of a robot's mechanism.\" Control Control \"The robot's actuators were operated by a sophisticated control system.\" Convert Convertir \"The motor converts electrical energy into mechanical energy for locomotion.\" Create Crear \"The hydraulic cylinder creates powerful motion to lift heavy loads.\" Critical Cr\u00edtico \"The actuator is a critical element for the robot's functionality.\" Design Dise\u00f1o \"The choice of actuators depends on the robot's design and intended tasks.\" Devices Dispositivos \"Motors, solenoids, and cylinders are common devices used as actuators.\" Drive Impulsar \"The motors drive the robot's wheels, propelling it forward.\" Electrical El\u00e9ctrico \"Solenoids are electrical devices that convert energy into motion.\" Energy Energ\u00eda \"Actuators require a power source to operate and convert energy into motion.\" Fluid Fluido \"Hydraulic cylinders use fluid to generate motion in the robot's limbs.\" Grab Agarrar \"The robot's gripper can grab and manipulate objects of different shapes and sizes.\" Heavy-duty Resistente \"Industrial robots equipped with hydraulic cylinders can handle heavy-duty tasks.\" Important Importante \"Precision and speed are important factors in choosing pneumatic cylinders for a robot.\" Interact Interactuar \"Robots can interact with humans and their surroundings using various actuators.\" Linear Lineal \"Solenoids can produce linear or rotary motion depending on the design.\" Mechanical Mec\u00e1nico \"Motors are mechanical devices that convert electrical energy into mechanical motion.\" Motion Movimiento \"Actuators are responsible for creating motion and enabling a robot's locomotion.\" Multiple M\u00faltiple \"The robot had multiple actuators that worked together for coordinated movements.\" Perform Realizar \"Actuators allow robots to perform complex tasks with precision and accuracy.\" Position Posici\u00f3n \"Motors can control the position of a robot's arm or joint with high accuracy.\"","title":"Actuators"},{"location":"contents/robotics/actuators.html#actuators","text":"An actuator is a component of a robot that is responsible for creating movement or motion . In other words, an actuator is what makes a robot move, grab, lift, or perform any other physical action. There are different types of actuators used in robotics, depending on the purpose and design of the robot. Some common types of actuators include: Motors : These are electrical or mechanical devices that convert electrical energy into mechanical energy to create motion. Motors are commonly used in robots to drive wheels, move robot arms, or control the position of robot joints. Pneumatic cylinders : These are devices that use compressed air to create motion. Pneumatic cylinders are often used in industrial robots to move heavy loads or in applications where precision and speed are important. Hydraulic cylinders : Similar to pneumatic cylinders, hydraulic cylinders use fluid instead of air to create motion. They are often used in large industrial robots for heavy-duty applications. Solenoids : These are electromechanical devices that convert electrical energy into linear or rotary motion. Solenoids are commonly used in small robots for precise movements, such as opening and closing robot grippers. In summary, an actuator is a critical component of a robot that creates motion or movement . Different types of actuators are used depending on the application and design of the robot. By using actuators, robots can perform physical tasks and interact with their environment, making them useful for a wide range of applications, from manufacturing to healthcare.","title":"Actuators"},{"location":"contents/robotics/actuators.html#glossary","text":"English Spanish Example Sentence (English) Actuators Actuadores \"The robot's actuators allowed it to perform precise movements and interact with objects.\" Applications Aplicaciones \"Robots have various applications in industries such as manufacturing, healthcare, and more.\" Arms Brazos \"The robot's multiple arms enabled it to manipulate objects with dexterity.\" Component Componente \"The actuator is an essential component of a robot's mechanism.\" Control Control \"The robot's actuators were operated by a sophisticated control system.\" Convert Convertir \"The motor converts electrical energy into mechanical energy for locomotion.\" Create Crear \"The hydraulic cylinder creates powerful motion to lift heavy loads.\" Critical Cr\u00edtico \"The actuator is a critical element for the robot's functionality.\" Design Dise\u00f1o \"The choice of actuators depends on the robot's design and intended tasks.\" Devices Dispositivos \"Motors, solenoids, and cylinders are common devices used as actuators.\" Drive Impulsar \"The motors drive the robot's wheels, propelling it forward.\" Electrical El\u00e9ctrico \"Solenoids are electrical devices that convert energy into motion.\" Energy Energ\u00eda \"Actuators require a power source to operate and convert energy into motion.\" Fluid Fluido \"Hydraulic cylinders use fluid to generate motion in the robot's limbs.\" Grab Agarrar \"The robot's gripper can grab and manipulate objects of different shapes and sizes.\" Heavy-duty Resistente \"Industrial robots equipped with hydraulic cylinders can handle heavy-duty tasks.\" Important Importante \"Precision and speed are important factors in choosing pneumatic cylinders for a robot.\" Interact Interactuar \"Robots can interact with humans and their surroundings using various actuators.\" Linear Lineal \"Solenoids can produce linear or rotary motion depending on the design.\" Mechanical Mec\u00e1nico \"Motors are mechanical devices that convert electrical energy into mechanical motion.\" Motion Movimiento \"Actuators are responsible for creating motion and enabling a robot's locomotion.\" Multiple M\u00faltiple \"The robot had multiple actuators that worked together for coordinated movements.\" Perform Realizar \"Actuators allow robots to perform complex tasks with precision and accuracy.\" Position Posici\u00f3n \"Motors can control the position of a robot's arm or joint with high accuracy.\"","title":"Glossary"},{"location":"contents/robotics/controllers.html","text":"Controller A controller is a device or system that manages and controls the behavior of a robot. It receives input from sensors and provides output to actuators to ensure the robot moves or behaves in a specific way. Controllers are essential for ensuring that a robot operates safely, efficiently, and effectively. They can be simple or complex, depending on the complexity of the robot and the tasks it is designed to perform. For example, a simple controller might be used to control the motion of a small robot that moves in a straight line, while a more complex controller might be used to manage the movements of a larger robot with multiple arms and sensors. There are different types of controllers used in robotics, such as: Microcontrollers : These are small computers that are embedded within the robot itself. They can receive input from sensors, process data, and provide output to actuators, all in real-time. Microcontrollers are often used in small, simple robots. Programmable Logic Controllers (PLCs) : These are specialized computers that are designed to control industrial machinery, including robots. They can manage multiple inputs and outputs, and are often used in large, complex robotic systems. Robot Operating System (ROS) : This is an open-source platform for programming robots. It provides a range of tools and libraries that enable developers to create and manage the behavior of robots, including controllers. In summary, a controller is a device or system that manages and controls the behavior of a robot. It receives input from sensors and provides output to actuators, ensuring that the robot moves and behaves in a specific way. Different types of controllers are used depending on the complexity of the robot and the tasks it is designed to perform. Glossary English Spanish Example Sentence (English) Actuators Actuadores \"The robot's actuators responded to the controller's commands, enabling precise movements.\" Behavior Comportamiento \"The controller dictated the robot's behavior , ensuring it followed the desired operating parameters.\" Complexity Complejidad \"The controller's design varied based on the robot's complexity and the tasks it needed to accomplish.\" Computers Computadoras \"Microcontrollers and PLCs are types of computers used as controllers in robotics.\" Control Control \"The controller's main function was to control the robot's actions and responses to the environment.\" Efficiency Eficiencia \"The advanced controller improved the robot's efficiency by optimizing its movements and power usage.\" Embedded Incorporado \"Microcontrollers are embedded within the robot's structure, enabling real-time control.\" Input Entrada \"The controller processed the input from various sensors to make informed decisions.\" Manage Gestionar \"The controller was responsible for managing the robot's operations and maintaining its performance.\" Microcontrollers Microcontroladores \"Small robots often rely on microcontrollers as their primary controllers due to their compact size.\" Movements Movimientos \"The controller coordinated the robot's movements with precision and smoothness.\" Multiple M\u00faltiple \"Complex robots with multiple arms and sensors required a sophisticated controller for coordinated control.\" Open-source C\u00f3digo abierto \"ROS, an open-source platform, provided flexible and accessible tools for robot behavior control.\" Output Salida \"The controller generated output signals to direct the actuators and influence the robot's behavior.\" Platform Plataforma \"ROS served as a powerful platform for developing and implementing robot controllers.\" Programmable Programable \"PLCs offered a programmable solution for controlling complex robotic systems in industrial settings.\" Real-time Tiempo real \"Microcontrollers processed sensor data and produced real-time control signals for immediate robot response.\" Receive Recibir \"The controller could receive and interpret signals from various sensors to make informed decisions.\" Robotic systems Sistemas rob\u00f3ticos \"PLCs were commonly used in large robotic systems for managing multiple actuators and sensors.\" Sensors Sensores \"The controller relied on sensors to gather information about the robot's environment and conditions.\" Simple Simple \"A simple controller sufficed for the basic motion control of a small line-following robot.\" Tasks Tareas \"The controller assigned specific tasks to different actuators, enabling coordinated robot behavior.\" Tools Herramientas \"ROS provided a rich set of","title":"Controllers"},{"location":"contents/robotics/controllers.html#controller","text":"A controller is a device or system that manages and controls the behavior of a robot. It receives input from sensors and provides output to actuators to ensure the robot moves or behaves in a specific way. Controllers are essential for ensuring that a robot operates safely, efficiently, and effectively. They can be simple or complex, depending on the complexity of the robot and the tasks it is designed to perform. For example, a simple controller might be used to control the motion of a small robot that moves in a straight line, while a more complex controller might be used to manage the movements of a larger robot with multiple arms and sensors. There are different types of controllers used in robotics, such as: Microcontrollers : These are small computers that are embedded within the robot itself. They can receive input from sensors, process data, and provide output to actuators, all in real-time. Microcontrollers are often used in small, simple robots. Programmable Logic Controllers (PLCs) : These are specialized computers that are designed to control industrial machinery, including robots. They can manage multiple inputs and outputs, and are often used in large, complex robotic systems. Robot Operating System (ROS) : This is an open-source platform for programming robots. It provides a range of tools and libraries that enable developers to create and manage the behavior of robots, including controllers. In summary, a controller is a device or system that manages and controls the behavior of a robot. It receives input from sensors and provides output to actuators, ensuring that the robot moves and behaves in a specific way. Different types of controllers are used depending on the complexity of the robot and the tasks it is designed to perform.","title":"Controller"},{"location":"contents/robotics/controllers.html#glossary","text":"English Spanish Example Sentence (English) Actuators Actuadores \"The robot's actuators responded to the controller's commands, enabling precise movements.\" Behavior Comportamiento \"The controller dictated the robot's behavior , ensuring it followed the desired operating parameters.\" Complexity Complejidad \"The controller's design varied based on the robot's complexity and the tasks it needed to accomplish.\" Computers Computadoras \"Microcontrollers and PLCs are types of computers used as controllers in robotics.\" Control Control \"The controller's main function was to control the robot's actions and responses to the environment.\" Efficiency Eficiencia \"The advanced controller improved the robot's efficiency by optimizing its movements and power usage.\" Embedded Incorporado \"Microcontrollers are embedded within the robot's structure, enabling real-time control.\" Input Entrada \"The controller processed the input from various sensors to make informed decisions.\" Manage Gestionar \"The controller was responsible for managing the robot's operations and maintaining its performance.\" Microcontrollers Microcontroladores \"Small robots often rely on microcontrollers as their primary controllers due to their compact size.\" Movements Movimientos \"The controller coordinated the robot's movements with precision and smoothness.\" Multiple M\u00faltiple \"Complex robots with multiple arms and sensors required a sophisticated controller for coordinated control.\" Open-source C\u00f3digo abierto \"ROS, an open-source platform, provided flexible and accessible tools for robot behavior control.\" Output Salida \"The controller generated output signals to direct the actuators and influence the robot's behavior.\" Platform Plataforma \"ROS served as a powerful platform for developing and implementing robot controllers.\" Programmable Programable \"PLCs offered a programmable solution for controlling complex robotic systems in industrial settings.\" Real-time Tiempo real \"Microcontrollers processed sensor data and produced real-time control signals for immediate robot response.\" Receive Recibir \"The controller could receive and interpret signals from various sensors to make informed decisions.\" Robotic systems Sistemas rob\u00f3ticos \"PLCs were commonly used in large robotic systems for managing multiple actuators and sensors.\" Sensors Sensores \"The controller relied on sensors to gather information about the robot's environment and conditions.\" Simple Simple \"A simple controller sufficed for the basic motion control of a small line-following robot.\" Tasks Tareas \"The controller assigned specific tasks to different actuators, enabling coordinated robot behavior.\" Tools Herramientas \"ROS provided a rich set of","title":"Glossary"},{"location":"contents/robotics/crashcourse_robotics_ai.html","text":"Robotics: Crash Course AI #11 Video #2: Robotics (Crash Course AI #11) Robots aren\u2019t like humans who can do a lot of different things. They\u2019re designed for very specific tasks like vacuuming our homes, assembling cars in a factory, or exploring the surface of other planets. So even though it may be a while before we have a general household robot that can do it all, robots are still really important because they can do some things incredibly well even better than humans. So today, we're going to take a look at the role of AI in overcoming three key challenges in the field of robotics: localization, planning, and manipulation.","title":"Robotics: Crash Course AI #11"},{"location":"contents/robotics/crashcourse_robotics_ai.html#robotics-crash-course-ai-11","text":"","title":"Robotics: Crash Course AI #11"},{"location":"contents/robotics/crashcourse_robotics_ai.html#video-2-robotics-crash-course-ai-11","text":"Robots aren\u2019t like humans who can do a lot of different things. They\u2019re designed for very specific tasks like vacuuming our homes, assembling cars in a factory, or exploring the surface of other planets. So even though it may be a while before we have a general household robot that can do it all, robots are still really important because they can do some things incredibly well even better than humans. So today, we're going to take a look at the role of AI in overcoming three key challenges in the field of robotics: localization, planning, and manipulation.","title":"Video #2: Robotics (Crash Course AI #11)"},{"location":"contents/robotics/crashcourse_robots.html","text":"Robots Video #1: Robots (Crash Course Computer Science #37) Today we're going to talk about robots! Robots are often thought as a technology of the future, but they're already here by the millions in the workplace, our homes, and pretty soon on the roads. We'll discuss the origins of robotics to its proliferation, and even look at some common control designs that were implemented to make them more useful in the workplace. Robots are often thought of as a menace or danger to society, and although there definitely is the propensity for malicious uses, robots also have the potential to drastically improve the world. Video #1 Transcription Hi, I\u2019m Carrie Anne, and welcome to CrashCourse Computer Science! Today we\u2019re going to talk about robots. The word \u201crobot\u201d was first used in a 1920 Czech play to denote artificial, humanoid characters. The word was derived from \u201crobota\u201d, the slavic-language word for a forced laborer, indicating peasants in compulsory service in feudal, nineteenth century Europe. But even a century later, it\u2019s still a common portrayal: mass-produced, efficient, tireless creatures that look human-esque, but are emotionless, indifferent to self-preservation and lack creativity. There are many definitions for robots, but in general, these are machines capable of carrying out a series of actions automatically, guided by computer control. How they look isn\u2019t part of the equation \u2013 robots can be industrial arms that spray paint cars, drones that fly, snake-like medical robots that assist surgeons, as well as humanoid robotic assistants. Although the term \u201crobot\u201d is sometimes applied to interactive virtual characters, it\u2019s more appropriate to call these \u201cbots\u201d, or even better, \u201cagents.\u201d That\u2019s because the term \u201crobot\u201d carries a physical connotation, a machine that lives in and acts on the real world. The more general idea of self-operating machines goes back even further than the 1920s. Many ancient inventors created mechanical devices that performed functions automatically, like keeping the time and striking bells on the hour. There are plenty of examples of automated animal and humanoid figures that would perform dances, sing songs, strike drums, and do other physical actions. These non-electrical and certainly non-electronic machines were called automatons. For instance, an early automaton created in 1739 by the Frenchman Jacques de Vaucanson was the Canard Digerateur or Digesting Duck, a machine in the shape of a duck that appeared to eat grain and then defecate. The first machines controlled by computers emerged in the late 1940s. These Computer Numerical Control, or CNC, machines could run programs that instructed a machine to perform a series of operations. This level of control also enabled the creation of new manufactured goods, like milling a complex propellor design out of a block of aluminum \u2013 something that was difficult to do using standard machine tools, and with tolerances too small to be done by hand. CNC machines were a huge boon to industry, not just due to increased capability and precision, but also in terms of reducing labor costs by automating human jobs \u2013 a topic we\u2019ll revisit in a later episode. The first commercial deployment was a programmable industrial robot called the Unimate, sold to General Motors in 1960 to lift hot pieces of metal from a die casting machine and stack them. This was the start of the robotics industry. Soon, robots were stacking pallets, welding parts, painting cars and much more. The first image that jumps to your mind is probably a humanoid robot, like we usually see in shows or movies. Sometimes they\u2019re our friends and colleagues, but more often, they\u2019re sinister, apathetic, and battle-hardened. We also tend to think of robots as a technology of the future. But the reality is: they\u2019re already here \u2013 by the millions \u2013 and they\u2019re our workmates, helping us to do things harder, better, faster, and stronger. For simple motions \u2013 like a robotic gripper that moves back and forth on a track \u2013 a robot can be instructed to move to a particular position, and it\u2019ll keep moving in that direction until the desired position is reached, at which point it\u2019ll stop. This behavior can be achieved through a simple control loop. First, sense the robot position. Are we there yet? Nope. So keep moving. Now sense position again. Are we there yet? Nope So keep moving. Now sense position again. Are we there yet? Nope, so keep moving. Are we there yet? Yes! So we can stop moving, and also please be quiet! Because we\u2019re trying to minimize the distance between the sensed position and the desired position, this control loop is, more specifically, a negative feedback loop. A negative feedback control loop has three key pieces. There\u2019s a sensor, that measures things in the real world, like water pressure, motor position, air temperature, or whatever you\u2019re trying to control. From this measurement, we calculate how far we are from where we want to be \u2013 the error. The error is then interpreted by a controller, which decides how to instruct the system to minimize that error. Then, the system acts on the world though pumps, motors, heating elements, and other physical actuators. In tightly controlled environments, simple control loops, like this, work OK. But in many real world applications, things are a tad more complicated. Imagine that our gripper is really heavy, and even when the control loop says to stop, momentum causes the gripper to overshoot the desired position. That would cause the control loop to take over again, this time backing the gripper up. A badly tuned control loop might overshoot and overshoot and overshoot, and maybe even wobble forever. To make matters worse, in real world settings, there are typically external and variable forces acting on a robot, like friction, wind and items of different weight. To handle this gracefully, more sophisticated control logic is needed. A widely used control-loop, feedback mechanism is a proportional\u2013integral\u2013derivative controller. That\u2019s a bit of a mouthful, so people call them PID controllers. These used to be mechanical devices, but now it\u2019s all done in software. Let\u2019s imagine a robot that delivers coffee. Its goal is to travel between customers at two meters per second, which has been determined to be the ideal speed that\u2019s both safe and expedient. Of course, the environment doesn\u2019t always cooperate. Sometimes there\u2019s wind, and sometimes there's uphills and downhills and all sorts of things that affect the speed of the robot. So, it\u2019s going to have to increase and decrease power to its motors to maintain the desired speed. Using the robot's speed sensor, we can keep track of its actual speed and plot that alongside its desired speed. PID controllers calculate three values from this data. First is the proportional value, which is the difference between the desired value and the actual value at the most recent instant in time or the present. This is what our simpler control loop used before. The bigger the gap between actual and desired, the harder you'll push towards your target. In other words, it\u2019s proportional control. Next, the integral value is computed, which is the sum of error over a window of time, like the last few seconds. This look back helps compensate for steady state errors, resulting from things like motoring up a long hill. If this value is large, it means proportional control is not enough, and we have to push harder still. Finally, there\u2019s the derivative value, which is the rate of change between the desired and actual values. This helps account for possible future error and is sometimes called \"anticipatory control\". For example, if you are screaming in towards your goal too fast, you\u2019ll need to ease up a little to prevent overshoot. These three values are summed together, with different relative weights, to produce a controller output that\u2019s passed to the system. PID controllers are everywhere, from the cruise control in your car to drones that automatically adjust their rotor speeds to maintain level flight, as well as more exotic robots, like this one that balances on a ball to move around. Advanced robots often require many control loops running in parallel, working together, managing everything from robot balance to limb position. Control loops are responsible for getting robot attributes like location to desired values. So, you may be wondering where these values come from. This is the responsibility of higher-level robot software, which plans and executes robot actions, like plotting a path around sensed obstacles, or breaking down physical tasks, like picking up a ball, into simple, sequential motions. Using these techniques, robots have racked up some impressive achievements \u2013 they\u2019ve been to the deepest depths of Earth\u2019s oceans and roved around on Mars for over a decade. But interestingly, lots of problems that are trivial for many humans have turned out to be devilishly difficult for robots: like walking on two legs, opening a door, picking up objects without crushing them, putting on a t-shirt, or petting a dog. These are tasks you may be able to do without thinking, but a supercomputer-powered robot fails at spectacularly. These sorts of tasks are all active areas of robotics research. Artificial intelligence techniques, which we discussed a few episodes ago, are perhaps the most promising avenue to overcome these challenges. For example, Google has been running an experiment with a series of robotic arms that spend their days moving miscellaneous objects from one box to another, learning from trial and error. After thousands of hours of practice, the robots had cut their error rate in half. Of course, unlike humans, robots can run twenty-four hours a day and practice with many arms at the same time. So, it may just be a matter of time until they become adept at grasping things. But, for the time being, toddlers can out-grasp them. One of the biggest and most visible robotic breakthroughs in recent years has been self-driving, autonomous cars. If you think about it, cars don\u2019t have too many system inputs \u2013 you can speed up or slow down, and you can steer left or right. The tough part is sensing lanes, reading signs, and anticipating and navigating traffic, pedestrians, bicyclists, and a whole host of obstacles. In addition to being studded with proximity sensors, these robotic vehicles heavily rely on Computer Vision algorithms, which we discussed in Episode 35. We\u2019re also seeing the emergence of very primitive androids \u2013 robots that look and act like humans. Arguably, we\u2019re not close on either of those goals, as they tend to look pretty weird and act even weirder. At least we\u2019ll always have Westworld. But anyway, these remain a tantalizing goal for roboticists that combine many computer science topics we\u2019ve touched on over the last few episodes, like artificial intelligence, computer vision, and natural language processing. As for why humans are so fascinated by creating artificial embodiments of ourselves...you\u2019ll have to go to Crash Course Philosophy for that. And for the foreseeable future, realistic androids will continue to be the stuff of science fiction. Militaries also have a great interest in robots \u2013 they\u2019re not only replaceable but can surpass humans in attributes like strength, endurance, attention, and accuracy. Bomb disposal robots and reconnaissance drones are fairly common today. But fully autonomous, armed-to-the-teeth robots are slowly appearing, like the Samsung SGR-A1 sentry gun deployed by South Korea. Robots with the intelligence and capability to take human lives are called lethal autonomous weapons. And they\u2019re widely considered a complex and thorny issue. Without doubt, these systems could save soldiers lives by taking them off the battlefield and out of harm\u2019s way. It might even discourage war altogether. Though it\u2019s worth noting that people said the same thing about dynamite and nuclear weapons. On the flip side, we might be creating ruthlessly efficient killing machines that don\u2019t apply human judgment or compassion to complex situations. And the fog of war is about as complex and murky as they come. These robots would be taking orders and executing them as efficiently as they can, and sometimes human orders turn out to be really bad. This debate is going to continue for a long time, and pundits on both sides will grow louder as robotic technology improves. It\u2019s also an old debate \u2013 the danger was obvious to science fiction writer Isaac Asimov, who introduced a fictional \u201cThree Laws of Robotics\u201d in his 1942 short story \"Runaround\". And then, later he added a zeroth rule. In short, it\u2019s a code of conduct or moral compass for robots \u2013 guiding them to do no harm, especially to humans. It\u2019s pretty inadequate for practical application and it leaves plenty of room for equivocation. But still, Asimov\u2019s laws inspired a ton of science fiction and academic discussion, and today there are whole conferences on robot ethics. Importantly, Asimov crafted his fictional rules as a way to push back on \u201cRobot as a Menace\u201d memes common in fiction from his childhood. These were stories where robots went off the rails, harming or even destroying their creators in the process. Asimov, on the other hand, envisioned robots as useful, reliable, and even lovable machines. And it\u2019s this duality I want to leave you thinking about today. Like many of the technologies we\u2019ve discussed throughout this series, there are benevolent and malicious uses. Our job is to carefully reflect on computing's potential and peril, and wield our inventive talents to improve the state of the world. And robots are one of the most potent reminders of this responsibility. I\u2019ll see you next week.","title":"Robots"},{"location":"contents/robotics/crashcourse_robots.html#robots","text":"","title":"Robots"},{"location":"contents/robotics/crashcourse_robots.html#video-1-robots-crash-course-computer-science-37","text":"Today we're going to talk about robots! Robots are often thought as a technology of the future, but they're already here by the millions in the workplace, our homes, and pretty soon on the roads. We'll discuss the origins of robotics to its proliferation, and even look at some common control designs that were implemented to make them more useful in the workplace. Robots are often thought of as a menace or danger to society, and although there definitely is the propensity for malicious uses, robots also have the potential to drastically improve the world.","title":"Video #1: Robots (Crash Course Computer Science #37)"},{"location":"contents/robotics/crashcourse_robots.html#video-1-transcription","text":"Hi, I\u2019m Carrie Anne, and welcome to CrashCourse Computer Science! Today we\u2019re going to talk about robots. The word \u201crobot\u201d was first used in a 1920 Czech play to denote artificial, humanoid characters. The word was derived from \u201crobota\u201d, the slavic-language word for a forced laborer, indicating peasants in compulsory service in feudal, nineteenth century Europe. But even a century later, it\u2019s still a common portrayal: mass-produced, efficient, tireless creatures that look human-esque, but are emotionless, indifferent to self-preservation and lack creativity. There are many definitions for robots, but in general, these are machines capable of carrying out a series of actions automatically, guided by computer control. How they look isn\u2019t part of the equation \u2013 robots can be industrial arms that spray paint cars, drones that fly, snake-like medical robots that assist surgeons, as well as humanoid robotic assistants. Although the term \u201crobot\u201d is sometimes applied to interactive virtual characters, it\u2019s more appropriate to call these \u201cbots\u201d, or even better, \u201cagents.\u201d That\u2019s because the term \u201crobot\u201d carries a physical connotation, a machine that lives in and acts on the real world. The more general idea of self-operating machines goes back even further than the 1920s. Many ancient inventors created mechanical devices that performed functions automatically, like keeping the time and striking bells on the hour. There are plenty of examples of automated animal and humanoid figures that would perform dances, sing songs, strike drums, and do other physical actions. These non-electrical and certainly non-electronic machines were called automatons. For instance, an early automaton created in 1739 by the Frenchman Jacques de Vaucanson was the Canard Digerateur or Digesting Duck, a machine in the shape of a duck that appeared to eat grain and then defecate. The first machines controlled by computers emerged in the late 1940s. These Computer Numerical Control, or CNC, machines could run programs that instructed a machine to perform a series of operations. This level of control also enabled the creation of new manufactured goods, like milling a complex propellor design out of a block of aluminum \u2013 something that was difficult to do using standard machine tools, and with tolerances too small to be done by hand. CNC machines were a huge boon to industry, not just due to increased capability and precision, but also in terms of reducing labor costs by automating human jobs \u2013 a topic we\u2019ll revisit in a later episode. The first commercial deployment was a programmable industrial robot called the Unimate, sold to General Motors in 1960 to lift hot pieces of metal from a die casting machine and stack them. This was the start of the robotics industry. Soon, robots were stacking pallets, welding parts, painting cars and much more. The first image that jumps to your mind is probably a humanoid robot, like we usually see in shows or movies. Sometimes they\u2019re our friends and colleagues, but more often, they\u2019re sinister, apathetic, and battle-hardened. We also tend to think of robots as a technology of the future. But the reality is: they\u2019re already here \u2013 by the millions \u2013 and they\u2019re our workmates, helping us to do things harder, better, faster, and stronger. For simple motions \u2013 like a robotic gripper that moves back and forth on a track \u2013 a robot can be instructed to move to a particular position, and it\u2019ll keep moving in that direction until the desired position is reached, at which point it\u2019ll stop. This behavior can be achieved through a simple control loop. First, sense the robot position. Are we there yet? Nope. So keep moving. Now sense position again. Are we there yet? Nope So keep moving. Now sense position again. Are we there yet? Nope, so keep moving. Are we there yet? Yes! So we can stop moving, and also please be quiet! Because we\u2019re trying to minimize the distance between the sensed position and the desired position, this control loop is, more specifically, a negative feedback loop. A negative feedback control loop has three key pieces. There\u2019s a sensor, that measures things in the real world, like water pressure, motor position, air temperature, or whatever you\u2019re trying to control. From this measurement, we calculate how far we are from where we want to be \u2013 the error. The error is then interpreted by a controller, which decides how to instruct the system to minimize that error. Then, the system acts on the world though pumps, motors, heating elements, and other physical actuators. In tightly controlled environments, simple control loops, like this, work OK. But in many real world applications, things are a tad more complicated. Imagine that our gripper is really heavy, and even when the control loop says to stop, momentum causes the gripper to overshoot the desired position. That would cause the control loop to take over again, this time backing the gripper up. A badly tuned control loop might overshoot and overshoot and overshoot, and maybe even wobble forever. To make matters worse, in real world settings, there are typically external and variable forces acting on a robot, like friction, wind and items of different weight. To handle this gracefully, more sophisticated control logic is needed. A widely used control-loop, feedback mechanism is a proportional\u2013integral\u2013derivative controller. That\u2019s a bit of a mouthful, so people call them PID controllers. These used to be mechanical devices, but now it\u2019s all done in software. Let\u2019s imagine a robot that delivers coffee. Its goal is to travel between customers at two meters per second, which has been determined to be the ideal speed that\u2019s both safe and expedient. Of course, the environment doesn\u2019t always cooperate. Sometimes there\u2019s wind, and sometimes there's uphills and downhills and all sorts of things that affect the speed of the robot. So, it\u2019s going to have to increase and decrease power to its motors to maintain the desired speed. Using the robot's speed sensor, we can keep track of its actual speed and plot that alongside its desired speed. PID controllers calculate three values from this data. First is the proportional value, which is the difference between the desired value and the actual value at the most recent instant in time or the present. This is what our simpler control loop used before. The bigger the gap between actual and desired, the harder you'll push towards your target. In other words, it\u2019s proportional control. Next, the integral value is computed, which is the sum of error over a window of time, like the last few seconds. This look back helps compensate for steady state errors, resulting from things like motoring up a long hill. If this value is large, it means proportional control is not enough, and we have to push harder still. Finally, there\u2019s the derivative value, which is the rate of change between the desired and actual values. This helps account for possible future error and is sometimes called \"anticipatory control\". For example, if you are screaming in towards your goal too fast, you\u2019ll need to ease up a little to prevent overshoot. These three values are summed together, with different relative weights, to produce a controller output that\u2019s passed to the system. PID controllers are everywhere, from the cruise control in your car to drones that automatically adjust their rotor speeds to maintain level flight, as well as more exotic robots, like this one that balances on a ball to move around. Advanced robots often require many control loops running in parallel, working together, managing everything from robot balance to limb position. Control loops are responsible for getting robot attributes like location to desired values. So, you may be wondering where these values come from. This is the responsibility of higher-level robot software, which plans and executes robot actions, like plotting a path around sensed obstacles, or breaking down physical tasks, like picking up a ball, into simple, sequential motions. Using these techniques, robots have racked up some impressive achievements \u2013 they\u2019ve been to the deepest depths of Earth\u2019s oceans and roved around on Mars for over a decade. But interestingly, lots of problems that are trivial for many humans have turned out to be devilishly difficult for robots: like walking on two legs, opening a door, picking up objects without crushing them, putting on a t-shirt, or petting a dog. These are tasks you may be able to do without thinking, but a supercomputer-powered robot fails at spectacularly. These sorts of tasks are all active areas of robotics research. Artificial intelligence techniques, which we discussed a few episodes ago, are perhaps the most promising avenue to overcome these challenges. For example, Google has been running an experiment with a series of robotic arms that spend their days moving miscellaneous objects from one box to another, learning from trial and error. After thousands of hours of practice, the robots had cut their error rate in half. Of course, unlike humans, robots can run twenty-four hours a day and practice with many arms at the same time. So, it may just be a matter of time until they become adept at grasping things. But, for the time being, toddlers can out-grasp them. One of the biggest and most visible robotic breakthroughs in recent years has been self-driving, autonomous cars. If you think about it, cars don\u2019t have too many system inputs \u2013 you can speed up or slow down, and you can steer left or right. The tough part is sensing lanes, reading signs, and anticipating and navigating traffic, pedestrians, bicyclists, and a whole host of obstacles. In addition to being studded with proximity sensors, these robotic vehicles heavily rely on Computer Vision algorithms, which we discussed in Episode 35. We\u2019re also seeing the emergence of very primitive androids \u2013 robots that look and act like humans. Arguably, we\u2019re not close on either of those goals, as they tend to look pretty weird and act even weirder. At least we\u2019ll always have Westworld. But anyway, these remain a tantalizing goal for roboticists that combine many computer science topics we\u2019ve touched on over the last few episodes, like artificial intelligence, computer vision, and natural language processing. As for why humans are so fascinated by creating artificial embodiments of ourselves...you\u2019ll have to go to Crash Course Philosophy for that. And for the foreseeable future, realistic androids will continue to be the stuff of science fiction. Militaries also have a great interest in robots \u2013 they\u2019re not only replaceable but can surpass humans in attributes like strength, endurance, attention, and accuracy. Bomb disposal robots and reconnaissance drones are fairly common today. But fully autonomous, armed-to-the-teeth robots are slowly appearing, like the Samsung SGR-A1 sentry gun deployed by South Korea. Robots with the intelligence and capability to take human lives are called lethal autonomous weapons. And they\u2019re widely considered a complex and thorny issue. Without doubt, these systems could save soldiers lives by taking them off the battlefield and out of harm\u2019s way. It might even discourage war altogether. Though it\u2019s worth noting that people said the same thing about dynamite and nuclear weapons. On the flip side, we might be creating ruthlessly efficient killing machines that don\u2019t apply human judgment or compassion to complex situations. And the fog of war is about as complex and murky as they come. These robots would be taking orders and executing them as efficiently as they can, and sometimes human orders turn out to be really bad. This debate is going to continue for a long time, and pundits on both sides will grow louder as robotic technology improves. It\u2019s also an old debate \u2013 the danger was obvious to science fiction writer Isaac Asimov, who introduced a fictional \u201cThree Laws of Robotics\u201d in his 1942 short story \"Runaround\". And then, later he added a zeroth rule. In short, it\u2019s a code of conduct or moral compass for robots \u2013 guiding them to do no harm, especially to humans. It\u2019s pretty inadequate for practical application and it leaves plenty of room for equivocation. But still, Asimov\u2019s laws inspired a ton of science fiction and academic discussion, and today there are whole conferences on robot ethics. Importantly, Asimov crafted his fictional rules as a way to push back on \u201cRobot as a Menace\u201d memes common in fiction from his childhood. These were stories where robots went off the rails, harming or even destroying their creators in the process. Asimov, on the other hand, envisioned robots as useful, reliable, and even lovable machines. And it\u2019s this duality I want to leave you thinking about today. Like many of the technologies we\u2019ve discussed throughout this series, there are benevolent and malicious uses. Our job is to carefully reflect on computing's potential and peril, and wield our inventive talents to improve the state of the world. And robots are one of the most potent reminders of this responsibility. I\u2019ll see you next week.","title":"Video #1 Transcription"},{"location":"contents/robotics/crashcourse_robots_engineering.html","text":"How Engineering Robots Works Video #3: How Engineering Robots Works (Crash Course Engineering #33) In this episode we looked at robots and the engineering principles of robots. We learned how robots use sensors to interpret their environment, how actuators and effectors allow a robot to manipulate the objects around it to accomplish a task, and how computers coordinate the efforts of the two.","title":"How Engineering Robots Works"},{"location":"contents/robotics/crashcourse_robots_engineering.html#how-engineering-robots-works","text":"","title":"How Engineering Robots Works"},{"location":"contents/robotics/crashcourse_robots_engineering.html#video-3-how-engineering-robots-works-crash-course-engineering-33","text":"In this episode we looked at robots and the engineering principles of robots. We learned how robots use sensors to interpret their environment, how actuators and effectors allow a robot to manipulate the objects around it to accomplish a task, and how computers coordinate the efforts of the two.","title":"Video #3: How Engineering Robots Works (Crash Course Engineering #33)"},{"location":"contents/robotics/intro_sens_act_contr.html","text":"Sensors, actuators and controllers Sensors are devices that detect or measure physical quantities such as temperature, light, pressure, and distance. In robotics, sensors are used to detect changes in the environment and provide feedback to the system. For example, a robot may use sensors to detect obstacles in its path or to measure the distance to an object. Actuators , on the other hand, are devices that are responsible for controlling motion or movement in a robot. They are used to make a robot move or perform a specific action based on the input received from the controller. Examples of actuators include motors, pneumatic cylinders, and solenoids. Controllers are devices or systems that manage and control the overall behavior of a robot. They process input from sensors and provide output to actuators to ensure the robot moves or behaves in a specific way. Controllers can be simple or complex, depending on the complexity of the robot and the tasks it is designed to perform. To summarize, sensors detect changes in the environment, actuators create motion or movement, and controllers manage the overall behavior of the robot. All three components work together to allow a robot to perform specific tasks and interact with its environment.","title":"Intro sens act contr"},{"location":"contents/robotics/intro_sens_act_contr.html#sensors-actuators-and-controllers","text":"Sensors are devices that detect or measure physical quantities such as temperature, light, pressure, and distance. In robotics, sensors are used to detect changes in the environment and provide feedback to the system. For example, a robot may use sensors to detect obstacles in its path or to measure the distance to an object. Actuators , on the other hand, are devices that are responsible for controlling motion or movement in a robot. They are used to make a robot move or perform a specific action based on the input received from the controller. Examples of actuators include motors, pneumatic cylinders, and solenoids. Controllers are devices or systems that manage and control the overall behavior of a robot. They process input from sensors and provide output to actuators to ensure the robot moves or behaves in a specific way. Controllers can be simple or complex, depending on the complexity of the robot and the tasks it is designed to perform. To summarize, sensors detect changes in the environment, actuators create motion or movement, and controllers manage the overall behavior of the robot. All three components work together to allow a robot to perform specific tasks and interact with its environment.","title":"Sensors, actuators and controllers"},{"location":"contents/robotics/mblock.html","text":"mBlock What Is mBlock 5? mBlock 5 is designed for the Science, Technology, Engineering, Arts and Mathematics (STEAM) education. Inspired by Scratch 3.0, it supports both graphical and textual programming languages. Currently, more than 10 million people are using it to learn programming, create their own projects, and share their creations. With mBlock 5, you can design engaging stories, games, and animations, and program devices such as Makeblock robots and microbit. On mBlock 5, you can switch to the Python mode simply with one-click. In addition, mBlock 5 integrates cutting-edge technologies including Artificial Intelligence (AI) and Internet of Things (IoT). Software versions Currently, the following versions are available: For PCs (software required): www.mblock.cc/en-us/download Web version (no software required): ide.mblock.cc/ For Android and iOS : Search for mBlock on any app store to download it","title":"mBlock"},{"location":"contents/robotics/mblock.html#mblock","text":"","title":"mBlock"},{"location":"contents/robotics/mblock.html#what-is-mblock-5","text":"mBlock 5 is designed for the Science, Technology, Engineering, Arts and Mathematics (STEAM) education. Inspired by Scratch 3.0, it supports both graphical and textual programming languages. Currently, more than 10 million people are using it to learn programming, create their own projects, and share their creations. With mBlock 5, you can design engaging stories, games, and animations, and program devices such as Makeblock robots and microbit. On mBlock 5, you can switch to the Python mode simply with one-click. In addition, mBlock 5 integrates cutting-edge technologies including Artificial Intelligence (AI) and Internet of Things (IoT).","title":"What Is mBlock 5?"},{"location":"contents/robotics/mblock.html#software-versions","text":"Currently, the following versions are available: For PCs (software required): www.mblock.cc/en-us/download Web version (no software required): ide.mblock.cc/ For Android and iOS : Search for mBlock on any app store to download it","title":"Software versions"},{"location":"contents/robotics/mbot.html","text":"mBot Ultrasonic Sensor Me Ultrasonic module is an electronic module designed for distance detection. The distance range it can detect is 3-400 cm. mBot can use this module to avoid obstacles or for other programs about distance detection. The yellow tag on the interface of this module indicates that it is a single digital interface and that it should be connected to a port with the yellow tag on the main control board. The ultrasonic sensor measures distance. One of the \u201ceyes\u201d transmits a sound, and the other waits for the echo of the sound to return. From the time this process takes, the distance of the object from the sensor can be calculated. The ultrasonic sensor has a range of 3-400cm. If an object is outside this range, the sensor will return a value of 400. Line Follower Sensors Me Line Follower is designed for line-following robots. There are two sensors, each with an IR transmitting LED and an IR static induction phototransistor. mBot can move along a black line on a white background or a white line on a black background. It features fast detection and simple circuits. The blue tag on the interface of this module indicates that it is a dual digital interface and that it should be connected to a port with the blue tag on the main control board. The line follower has 2 sensors which can detect a white surface (within the range of 1-2cm). It works by emitting IR (InfraRed) light and recording how much is reflected back: If a lot is reflected back, it can be deduced it is close to a white surface. If a little is reflected back, it can be deduced that the surface is black, or the sensor is not near a surface. A light surface reflects a lot of infrared light back to the receiver. A dark surface only reflects a little light back to the receiver. TT Geared Motor TT Geared Motor DC 6 V / 200 RPM is the new power source with plastic gears. The TT Geared Motor perfectly works with Makeblock Plastic Timing Pulley 62T and Plastic Timing Pulley 90T for the wheel systems of DIY projects. It can be used to power mBot.","title":"mBot"},{"location":"contents/robotics/mbot.html#mbot","text":"","title":"mBot"},{"location":"contents/robotics/mbot.html#ultrasonic-sensor","text":"Me Ultrasonic module is an electronic module designed for distance detection. The distance range it can detect is 3-400 cm. mBot can use this module to avoid obstacles or for other programs about distance detection. The yellow tag on the interface of this module indicates that it is a single digital interface and that it should be connected to a port with the yellow tag on the main control board. The ultrasonic sensor measures distance. One of the \u201ceyes\u201d transmits a sound, and the other waits for the echo of the sound to return. From the time this process takes, the distance of the object from the sensor can be calculated. The ultrasonic sensor has a range of 3-400cm. If an object is outside this range, the sensor will return a value of 400.","title":"Ultrasonic Sensor"},{"location":"contents/robotics/mbot.html#line-follower-sensors","text":"Me Line Follower is designed for line-following robots. There are two sensors, each with an IR transmitting LED and an IR static induction phototransistor. mBot can move along a black line on a white background or a white line on a black background. It features fast detection and simple circuits. The blue tag on the interface of this module indicates that it is a dual digital interface and that it should be connected to a port with the blue tag on the main control board. The line follower has 2 sensors which can detect a white surface (within the range of 1-2cm). It works by emitting IR (InfraRed) light and recording how much is reflected back: If a lot is reflected back, it can be deduced it is close to a white surface. If a little is reflected back, it can be deduced that the surface is black, or the sensor is not near a surface. A light surface reflects a lot of infrared light back to the receiver. A dark surface only reflects a little light back to the receiver.","title":"Line Follower Sensors"},{"location":"contents/robotics/mbot.html#tt-geared-motor","text":"TT Geared Motor DC 6 V / 200 RPM is the new power source with plastic gears. The TT Geared Motor perfectly works with Makeblock Plastic Timing Pulley 62T and Plastic Timing Pulley 90T for the wheel systems of DIY projects. It can be used to power mBot.","title":"TT Geared Motor"},{"location":"contents/robotics/mbotcode.html","text":"mBot Robot Programming Main code The Ultrasonic Sensor Me Ultrasonic module is an electronic module designed for distance detection. The distance range it can detect is 3-400 cm. mBot can use this module to avoid obstacles or for other programs about distance detection. The yellow tag on the interface of this module indicates that it is a single digital interface and that it should be connected to a port with the yellow tag on the main control board. The ultrasonic sensor measures distance. One of the \u201ceyes\u201d transmits a sound, and the other waits for the echo of the sound to return. From the time this process takes, the distance of the object from the sensor can be calculated. The ultrasonic sensor has a range of 3-400cm. If an object is outside this range, the sensor will return a value of 400. CheckObstacles block This block is used to check for obstacles in front of the mBot. It allows the program to detect if there is an obstacle in the path of the robot using its sensors, such as the ultrasonic sensor. MoveForward block This block commands the mBot to move forward in a straight line. TurnRandom block This block instructs the mBot to turn in a random direction. It can be used to introduce randomness in the robot's movement or to create unpredictable behaviors. The Line Follower The line follower has 2 sensors which can detect a white surface (within the range of 1-2cm). It works by emitting IR (InfraRed) light and recording how much is reflected back: If a lot is reflected back, it can be deduced it is close to a white surface. If a little is reflected back, it can be deduced that the surface is black, or the sensor is not near a surface. FollowPath block This block instructs the mBot to follow a line using its line-following sensors. The block typically includes parameters or inputs to specify the speed or power at which the robot should move and the behavior it should exhibit when encountering different line configurations. The line-following sensors on the mBot detect the contrast between a line and the surrounding surface. The robot uses this information to determine its position relative to the line and adjust its movement accordingly. The mBot_FollowPath block allows users to define the specific actions the robot should take to stay on the line, such as turning left or right, stopping, or adjusting its speed.","title":"mBot Robot Programming"},{"location":"contents/robotics/mbotcode.html#mbot-robot-programming","text":"","title":"mBot Robot Programming"},{"location":"contents/robotics/mbotcode.html#main-code","text":"","title":"Main code"},{"location":"contents/robotics/mbotcode.html#the-ultrasonic-sensor","text":"Me Ultrasonic module is an electronic module designed for distance detection. The distance range it can detect is 3-400 cm. mBot can use this module to avoid obstacles or for other programs about distance detection. The yellow tag on the interface of this module indicates that it is a single digital interface and that it should be connected to a port with the yellow tag on the main control board. The ultrasonic sensor measures distance. One of the \u201ceyes\u201d transmits a sound, and the other waits for the echo of the sound to return. From the time this process takes, the distance of the object from the sensor can be calculated. The ultrasonic sensor has a range of 3-400cm. If an object is outside this range, the sensor will return a value of 400.","title":"The Ultrasonic Sensor"},{"location":"contents/robotics/mbotcode.html#checkobstacles-block","text":"This block is used to check for obstacles in front of the mBot. It allows the program to detect if there is an obstacle in the path of the robot using its sensors, such as the ultrasonic sensor.","title":"CheckObstacles block"},{"location":"contents/robotics/mbotcode.html#moveforward-block","text":"This block commands the mBot to move forward in a straight line.","title":"MoveForward block"},{"location":"contents/robotics/mbotcode.html#turnrandom-block","text":"This block instructs the mBot to turn in a random direction. It can be used to introduce randomness in the robot's movement or to create unpredictable behaviors.","title":"TurnRandom block"},{"location":"contents/robotics/mbotcode.html#the-line-follower","text":"The line follower has 2 sensors which can detect a white surface (within the range of 1-2cm). It works by emitting IR (InfraRed) light and recording how much is reflected back: If a lot is reflected back, it can be deduced it is close to a white surface. If a little is reflected back, it can be deduced that the surface is black, or the sensor is not near a surface.","title":"The Line Follower"},{"location":"contents/robotics/mbotcode.html#followpath-block","text":"This block instructs the mBot to follow a line using its line-following sensors. The block typically includes parameters or inputs to specify the speed or power at which the robot should move and the behavior it should exhibit when encountering different line configurations. The line-following sensors on the mBot detect the contrast between a line and the surrounding surface. The robot uses this information to determine its position relative to the line and adjust its movement accordingly. The mBot_FollowPath block allows users to define the specific actions the robot should take to stay on the line, such as turning left or right, stopping, or adjusting its speed.","title":"FollowPath block"},{"location":"contents/robotics/robotresearch.html","text":"Project: Researching an Advanced and Innovative Robot In this activity, you will work in pairs to research a specific advanced and innovative robot. You will gather information about the robot and create a presentation to share with the class. Part 1: Choosing a robot Start by discussing advanced and innovative robots with your partner. Choose a specific robot to research. Try to choose a robot that you find interesting or that relates to your personal interests. Part 2: Researching the robot Use reliable sources such as academic journals, reputable websites, and news articles to gather information about the robot you have chosen. Gather information on the following aspects of the robot: Purpose : What is the robot designed to do? Design : What does the robot look like? What components make up the robot? Sensors : What sensors does the robot use to interact with its environment? Actuators : What actuators does the robot use to move and interact with its environment? Controller : What type of controller does the robot use to manage its behavior? Innovations : What makes this robot advanced and innovative? What sets it apart from other robots? Applications : What are some of the potential applications for this robot? How might it be used in industry or everyday life? Part 3: Creating a presentation Use PowerPoint to create a presentation to share your research with the class. Your presentation should include the following: Introduction : Introduce the robot and explain why you chose it. Purpose : Describe what the robot is designed to do. Design : Share images and descriptions of the robot's design and components. Sensors : Explain what sensors the robot uses and how they work. Actuators : Explain what actuators the robot uses and how they work. Controller : Describe the type of controller the robot uses and how it manages the robot's behavior. Innovations : Discuss what makes this robot advanced and innovative. Applications : Share some potential applications for the robot. Conclusion : Summarize the key points and why this robot is interesting or important. Part 4: Presenting to the class Present your research to the class, using your presentation. Be prepared to answer questions from your classmates about your robot. This activity will allow you to explore and learn about advanced and innovative robots, while also developing your research and presentation skills. Have fun!","title":"Robotresearch"},{"location":"contents/robotics/robotresearch.html#project-researching-an-advanced-and-innovative-robot","text":"In this activity, you will work in pairs to research a specific advanced and innovative robot. You will gather information about the robot and create a presentation to share with the class.","title":"Project: Researching an Advanced and Innovative Robot"},{"location":"contents/robotics/robotresearch.html#part-1-choosing-a-robot","text":"Start by discussing advanced and innovative robots with your partner. Choose a specific robot to research. Try to choose a robot that you find interesting or that relates to your personal interests.","title":"Part 1: Choosing a robot"},{"location":"contents/robotics/robotresearch.html#part-2-researching-the-robot","text":"Use reliable sources such as academic journals, reputable websites, and news articles to gather information about the robot you have chosen. Gather information on the following aspects of the robot: Purpose : What is the robot designed to do? Design : What does the robot look like? What components make up the robot? Sensors : What sensors does the robot use to interact with its environment? Actuators : What actuators does the robot use to move and interact with its environment? Controller : What type of controller does the robot use to manage its behavior? Innovations : What makes this robot advanced and innovative? What sets it apart from other robots? Applications : What are some of the potential applications for this robot? How might it be used in industry or everyday life?","title":"Part 2: Researching the robot"},{"location":"contents/robotics/robotresearch.html#part-3-creating-a-presentation","text":"Use PowerPoint to create a presentation to share your research with the class. Your presentation should include the following: Introduction : Introduce the robot and explain why you chose it. Purpose : Describe what the robot is designed to do. Design : Share images and descriptions of the robot's design and components. Sensors : Explain what sensors the robot uses and how they work. Actuators : Explain what actuators the robot uses and how they work. Controller : Describe the type of controller the robot uses and how it manages the robot's behavior. Innovations : Discuss what makes this robot advanced and innovative. Applications : Share some potential applications for the robot. Conclusion : Summarize the key points and why this robot is interesting or important.","title":"Part 3: Creating a presentation"},{"location":"contents/robotics/robotresearch.html#part-4-presenting-to-the-class","text":"Present your research to the class, using your presentation. Be prepared to answer questions from your classmates about your robot. This activity will allow you to explore and learn about advanced and innovative robots, while also developing your research and presentation skills. Have fun!","title":"Part 4: Presenting to the class"},{"location":"contents/robotics/robots.html","text":"Robots What is a robot? A robot is a machine that can be programmed to perform a variety of tasks. These tasks can range from simple actions like moving objects from one place to another, to more complex actions like assembling parts or performing surgery. Robots can be designed to operate autonomously or be controlled by a human operator. What sets robots apart from other machines is their ability to sense their environment and respond to it. They do this through the use of sensors such as cameras, microphones, and touch sensors. Based on the information they receive from these sensors, robots can make decisions about what actions to take. Robots come in many different shapes and sizes, and can be designed for a variety of purposes. For example, some robots are designed to work in factories, while others are used in healthcare settings to assist with surgeries or help patients with mobility issues. As you study robotics, you'll learn more about the different types of robots and how they are used in various industries. Overall, robots are an exciting and rapidly developing field in technology, and studying robotics can lead to many interesting career opportunities. Glossary English Spanish Example Sentence (English) Robots Robots \" Robots are used in manufacturing to automate repetitive tasks.\" Machine M\u00e1quina \"The robotic machine assembled the components with precision.\" Programmed Programado/a \"The robot was programmed to navigate through a maze.\" Tasks Tareas \"The robot was assigned multiple tasks in the industrial setting.\" Actions Acciones \"Robots can perform complex actions such as grasping and manipulating objects.\" Moving Mover \"The robot is capable of moving heavy objects from one location to another.\" Objects Objetos \"The robot detected and identified objects using its vision system.\" Place Lugar \"The robot placed the finished product on the conveyor belt.\" Assembling Ensamblaje \"The robot is responsible for assembling electronic components in the production line.\" Parts Partes \"The robotic arm picked up the small parts and assembled them together.\" Performing Realizar \"The surgical robot is capable of performing precise and delicate procedures.\" Surgery Cirug\u00eda \"Robotic surgery offers the advantages of minimally invasive procedures.\" Operate Operar \"The robot can operate autonomously or be controlled by a human operator.\" Autonomously Aut\u00f3nomamente \"The autonomous robot navigated through the obstacle course without human intervention.\" Controlled Controlado/a \"The robot was controlled remotely by a skilled operator.\" Human operator Operador humano \"The robot collaborated with the human operator to perform complex tasks.\" Environment Entorno \"Robots use sensors to perceive and interact with their environment .\" Sensors Sensores \"The robot's sensors detected the presence of obstacles in its path.\" Cameras C\u00e1maras \"The robot's camera captured high-resolution images for visual inspection.\" Microphones Micr\u00f3fonos \"The robot's microphones picked up sound signals for voice recognition.\" Touch sensors Sensores t\u00e1ctiles \"The robot's touch sensors enabled it to detect and respond to tactile stimuli.\" Decisions Decisiones \"Based on sensor data, the robot made intelligent decisions to navigate its surroundings.\" Shapes Formas \"The robot's gripper was designed to handle objects of various shapes and sizes.\" Sizes Tama\u00f1os \"The robot adjusted its grip strength based on the size of the object it handled.\" Purposes Prop\u00f3sitos \"Robots are used in various industries for different purposes , such as manufacturing and healthcare.\"","title":"Robots"},{"location":"contents/robotics/robots.html#robots","text":"","title":"Robots"},{"location":"contents/robotics/robots.html#what-is-a-robot","text":"A robot is a machine that can be programmed to perform a variety of tasks. These tasks can range from simple actions like moving objects from one place to another, to more complex actions like assembling parts or performing surgery. Robots can be designed to operate autonomously or be controlled by a human operator. What sets robots apart from other machines is their ability to sense their environment and respond to it. They do this through the use of sensors such as cameras, microphones, and touch sensors. Based on the information they receive from these sensors, robots can make decisions about what actions to take. Robots come in many different shapes and sizes, and can be designed for a variety of purposes. For example, some robots are designed to work in factories, while others are used in healthcare settings to assist with surgeries or help patients with mobility issues. As you study robotics, you'll learn more about the different types of robots and how they are used in various industries. Overall, robots are an exciting and rapidly developing field in technology, and studying robotics can lead to many interesting career opportunities.","title":"What is a robot?"},{"location":"contents/robotics/robots.html#glossary","text":"English Spanish Example Sentence (English) Robots Robots \" Robots are used in manufacturing to automate repetitive tasks.\" Machine M\u00e1quina \"The robotic machine assembled the components with precision.\" Programmed Programado/a \"The robot was programmed to navigate through a maze.\" Tasks Tareas \"The robot was assigned multiple tasks in the industrial setting.\" Actions Acciones \"Robots can perform complex actions such as grasping and manipulating objects.\" Moving Mover \"The robot is capable of moving heavy objects from one location to another.\" Objects Objetos \"The robot detected and identified objects using its vision system.\" Place Lugar \"The robot placed the finished product on the conveyor belt.\" Assembling Ensamblaje \"The robot is responsible for assembling electronic components in the production line.\" Parts Partes \"The robotic arm picked up the small parts and assembled them together.\" Performing Realizar \"The surgical robot is capable of performing precise and delicate procedures.\" Surgery Cirug\u00eda \"Robotic surgery offers the advantages of minimally invasive procedures.\" Operate Operar \"The robot can operate autonomously or be controlled by a human operator.\" Autonomously Aut\u00f3nomamente \"The autonomous robot navigated through the obstacle course without human intervention.\" Controlled Controlado/a \"The robot was controlled remotely by a skilled operator.\" Human operator Operador humano \"The robot collaborated with the human operator to perform complex tasks.\" Environment Entorno \"Robots use sensors to perceive and interact with their environment .\" Sensors Sensores \"The robot's sensors detected the presence of obstacles in its path.\" Cameras C\u00e1maras \"The robot's camera captured high-resolution images for visual inspection.\" Microphones Micr\u00f3fonos \"The robot's microphones picked up sound signals for voice recognition.\" Touch sensors Sensores t\u00e1ctiles \"The robot's touch sensors enabled it to detect and respond to tactile stimuli.\" Decisions Decisiones \"Based on sensor data, the robot made intelligent decisions to navigate its surroundings.\" Shapes Formas \"The robot's gripper was designed to handle objects of various shapes and sizes.\" Sizes Tama\u00f1os \"The robot adjusted its grip strength based on the size of the object it handled.\" Purposes Prop\u00f3sitos \"Robots are used in various industries for different purposes , such as manufacturing and healthcare.\"","title":"Glossary"},{"location":"contents/robotics/robots_ai.html","text":"Robots and AI Robots and Artificial Intelligence Robots and artificial intelligence (AI) are closely related, but they are not the same thing. A robot is a machine that can be programmed to perform a variety of tasks, while AI refers to the ability of machines to perform tasks that would normally require human intelligence, such as learning, problem solving, and decision making. In many cases, robots use AI to make decisions about what actions to take. For example, a robot in a manufacturing plant might use AI to decide which parts to pick up and assemble based on the shape and size of the parts. Similarly, a robot in a healthcare setting might use AI to analyze medical images and make recommendations to doctors. However, not all robots use AI. Some robots are programmed to perform a specific set of tasks without any decision making capabilities. For example, a robot used to move heavy objects in a warehouse might simply follow a predetermined path and pick up objects along the way. On the other hand, not all AI is used in robots. AI can be used in many different applications, such as virtual assistants, self-driving cars, and fraud detection systems. These applications do not necessarily involve physical robots. Overall, the relationship between robots and AI is complex and evolving. As you study robotics and AI, you'll learn more about how these technologies are used together and separately to solve real-world problems. Glossary English Spanish Example Sentence (English) Robots Robots \" Robots are used in manufacturing to automate repetitive tasks.\" Artificial Intelligence Inteligencia Artificial \" Artificial Intelligence enables machines to learn, reason, and make decisions.\" Closely related Estrechamente relacionados/as \" Robots and artificial intelligence are closely related in the field of robotics.\" Not the same thing No es lo mismo \" Robots and AI are not the same thing , although they have connections.\" Machine M\u00e1quina \"The robotic machine performed complex tasks with precision.\" Programmed Programado/a \"The robot was programmed to follow a specific set of instructions.\" Variety of tasks Variedad de tareas \"Robots can be programmed to perform a variety of tasks in different industries.\" Learning Aprendizaje \"Artificial Intelligence involves learning from data to improve performance.\" Problem solving Resoluci\u00f3n de problemas \"AI algorithms are capable of problem solving in various domains.\" Decision making Toma de decisiones \"Robots equipped with AI can make intelligent decision making based on sensor data.\" Manufacturing plant Planta de manufactura \"The manufacturing plant used robots to automate the assembly line.\" Parts Partes \"The robot identified and sorted the different parts in the production process.\" Shape and size Forma y tama\u00f1o \"The robot used AI to determine the appropriate shape and size of the objects to handle.\" Healthcare setting Entorno sanitario \"Robots with AI are being used in healthcare settings to assist doctors and nurses.\" Analyze Analizar \"The robot analyzed the medical images to detect anomalies and abnormalities.\" Recommendations Recomendaciones \"Based on AI analysis, the robot provided accurate recommendations for treatment options.\" Decision making capabilities Capacidad de toma de decisiones \"This robot has advanced decision making capabilities based on its AI algorithms.\" Warehouse Almac\u00e9n \"The robot efficiently navigated the warehouse to retrieve and store items.\" Predetermined path Ruta predeterminada \"The robot followed a predetermined path to perform its tasks in the factory.\" Virtual assistants Asistentes virtuales \"Virtual assistants use AI to interact with users and provide helpful information.\" Self-driving cars Coches aut\u00f3nomos \"AI technology is driving the development of self-driving cars .\" Fraud detection systems Sistemas de detecci\u00f3n de fraude \"AI algorithms are employed in fraud detection systems to identify suspicious activities.\" Physical robots Robots f\u00edsicos \"Not all applications of AI involve physical robots ; some are purely software-based.\" Complex Complejo/a \"The relationship between robots and AI is complex and constantly evolving.\"","title":"Robots and Artificial Intelligence"},{"location":"contents/robotics/robots_ai.html#robots-and-ai","text":"","title":"Robots and AI"},{"location":"contents/robotics/robots_ai.html#robots-and-artificial-intelligence","text":"Robots and artificial intelligence (AI) are closely related, but they are not the same thing. A robot is a machine that can be programmed to perform a variety of tasks, while AI refers to the ability of machines to perform tasks that would normally require human intelligence, such as learning, problem solving, and decision making. In many cases, robots use AI to make decisions about what actions to take. For example, a robot in a manufacturing plant might use AI to decide which parts to pick up and assemble based on the shape and size of the parts. Similarly, a robot in a healthcare setting might use AI to analyze medical images and make recommendations to doctors. However, not all robots use AI. Some robots are programmed to perform a specific set of tasks without any decision making capabilities. For example, a robot used to move heavy objects in a warehouse might simply follow a predetermined path and pick up objects along the way. On the other hand, not all AI is used in robots. AI can be used in many different applications, such as virtual assistants, self-driving cars, and fraud detection systems. These applications do not necessarily involve physical robots. Overall, the relationship between robots and AI is complex and evolving. As you study robotics and AI, you'll learn more about how these technologies are used together and separately to solve real-world problems.","title":"Robots and Artificial Intelligence"},{"location":"contents/robotics/robots_ai.html#glossary","text":"English Spanish Example Sentence (English) Robots Robots \" Robots are used in manufacturing to automate repetitive tasks.\" Artificial Intelligence Inteligencia Artificial \" Artificial Intelligence enables machines to learn, reason, and make decisions.\" Closely related Estrechamente relacionados/as \" Robots and artificial intelligence are closely related in the field of robotics.\" Not the same thing No es lo mismo \" Robots and AI are not the same thing , although they have connections.\" Machine M\u00e1quina \"The robotic machine performed complex tasks with precision.\" Programmed Programado/a \"The robot was programmed to follow a specific set of instructions.\" Variety of tasks Variedad de tareas \"Robots can be programmed to perform a variety of tasks in different industries.\" Learning Aprendizaje \"Artificial Intelligence involves learning from data to improve performance.\" Problem solving Resoluci\u00f3n de problemas \"AI algorithms are capable of problem solving in various domains.\" Decision making Toma de decisiones \"Robots equipped with AI can make intelligent decision making based on sensor data.\" Manufacturing plant Planta de manufactura \"The manufacturing plant used robots to automate the assembly line.\" Parts Partes \"The robot identified and sorted the different parts in the production process.\" Shape and size Forma y tama\u00f1o \"The robot used AI to determine the appropriate shape and size of the objects to handle.\" Healthcare setting Entorno sanitario \"Robots with AI are being used in healthcare settings to assist doctors and nurses.\" Analyze Analizar \"The robot analyzed the medical images to detect anomalies and abnormalities.\" Recommendations Recomendaciones \"Based on AI analysis, the robot provided accurate recommendations for treatment options.\" Decision making capabilities Capacidad de toma de decisiones \"This robot has advanced decision making capabilities based on its AI algorithms.\" Warehouse Almac\u00e9n \"The robot efficiently navigated the warehouse to retrieve and store items.\" Predetermined path Ruta predeterminada \"The robot followed a predetermined path to perform its tasks in the factory.\" Virtual assistants Asistentes virtuales \"Virtual assistants use AI to interact with users and provide helpful information.\" Self-driving cars Coches aut\u00f3nomos \"AI technology is driving the development of self-driving cars .\" Fraud detection systems Sistemas de detecci\u00f3n de fraude \"AI algorithms are employed in fraud detection systems to identify suspicious activities.\" Physical robots Robots f\u00edsicos \"Not all applications of AI involve physical robots ; some are purely software-based.\" Complex Complejo/a \"The relationship between robots and AI is complex and constantly evolving.\"","title":"Glossary"},{"location":"contents/robotics/sensors.html","text":"Sensors Definition of sensor Sensors are devices that can detect and measure physical and environmental conditions such as temperature, light, sound, and movement. In this lesson, we will learn about the different types of sensors used in AI applications and the different ways in which they can be used. Types of sensors Optical sensors : These sensors detect light and are used in applications such as facial recognition, object detection, and image processing. Examples of optical sensors include cameras and lidar sensors. Temperature sensors : These sensors measure temperature and are used in applications such as climate control and food safety. Examples of temperature sensors include thermocouples and thermistors. Pressure sensors : These sensors measure pressure and are used in applications such as industrial automation, weather forecasting, and healthcare. Examples of pressure sensors include piezoelectric sensors and strain gauge sensors. Accelerometer sensors : These sensors measure acceleration and are used in applications such as motion detection, navigation, and gaming. Examples of accelerometer sensors include MEMS accelerometers and piezoelectric accelerometers. Gyroscopic sensors : These sensors measure angular velocity and are used in applications such as navigation, gaming, and robotics. Examples of gyroscopic sensors include MEMS gyroscopes and fiber optic gyroscopes. Magnetic sensors : These sensors measure magnetic fields and are used in applications such as navigation, industrial automation, and healthcare. Examples of magnetic sensors include Hall effect sensors and magnetoresistive sensors. Ultrasonic sensors : These sensors measure distance and are used in applications such as object detection, navigation, and industrial automation. Examples of ultrasonic sensors include sonar sensors and lidar sensors. Infrared sensors : These sensors detect infrared radiation and are used in applications such as temperature measurement, night vision, and gesture recognition. Examples of infrared sensors include thermopile sensors and pyroelectric sensors. Proximity sensors : These sensors detect the presence of objects and are used in applications such as gesture recognition, object detection, and access control. Examples of proximity sensors include infrared proximity sensors and ultrasonic proximity sensors. Light sensors : These sensors detect light and are used in applications such as light control, gesture recognition, and object detection. Examples of light sensors include photodiodes and phototransistors. Humidity sensors : These sensors measure humidity and are used in applications such as weather forecasting, agriculture, and healthcare. Examples of humidity sensors include capacitive humidity sensors and resistive humidity sensors. Gas sensors : These sensors detect the presence of gases and are used in applications such as environmental monitoring, industrial automation, and healthcare. Examples of gas sensors include electrochemical gas sensors and metal oxide gas sensors. Quiz 1. What do sensors detect and measure? a) Physical and environmental conditions b) Human emotions c) Food flavors d) Political opinions 2. Which type of sensor is used in facial recognition and image processing? a) Temperature sensors b) Pressure sensors c) Optical sensors d) Magnetic sensors 3. Which type of sensor measures acceleration? a) Temperature sensors b) Gyroscopic sensors c) Humidity sensors d) Gas sensors 4. What do proximity sensors detect? a) The presence of objects b) The color of objects c) The weight of objects d) The shape of objects 5. What type of sensors measure angular velocity and can be used in navigation and robotics? a) Gyroscopic sensors b) Temperature sensors c) Infrared sensors d) Gas sensors Glossary English Spanish Example Sentence (English) Accelerometer sensors Sensores de aceleraci\u00f3n \"The accelerometer sensors detected sudden movements and adjusted the robot's trajectory.\" Color sensors Sensores de color \"The robot's color sensors enabled it to distinguish between different objects based on hue.\" Force sensors Sensores de fuerza \"The robot used force sensors to measure the applied force during object manipulation.\" Gas sensors Sensores de gas \"The robot's safety was enhanced by gas sensors that detected hazardous fumes.\" Gyroscopic sensors Sensores girosc\u00f3picos \"The robot's precise movements were achieved with the help of gyroscopic sensors .\" Humidity sensors Sensores de humedad \"The humidity sensors ensured optimal conditions for plant growth in automated farming.\" Infrared sensors Sensores infrarrojos \"The infrared sensors detected human body heat for gesture recognition.\" Light sensors Sensores de luz \"The robot adjusted its behavior based on the readings from the light sensors .\" Magnetic sensors Sensores magn\u00e9ticos \"The robot relied on magnetic sensors to navigate and avoid obstacles in its path.\" Motion sensors Sensores de movimiento \"The robot's behavior was influenced by the readings from the motion sensors in its environment.\" Pressure sensors Sensores de presi\u00f3n \"The robot used pressure sensors to monitor the gripping force during assembly tasks.\" Proximity sensors Sensores de proximidad \"The robot's precise movements were achieved with the help of proximity sensors .\" Sound sensors Sensores de sonido \"The robot utilized sound sensors to identify specific audio patterns in its environment.\" Temperature sensors Sensores de temperatura \"The robot's temperature sensors ensured optimal conditions for storing perishable goods.\" Touch sensors Sensores t\u00e1ctiles \"The robot's touch sensors allowed it to detect and respond to human touch.\" Ultrasonic sensors Sensores ultras\u00f3nicos \"The robot used ultrasonic sensors to detect the presence of objects in its vicinity.\" Vibration sensors Sensores de vibraci\u00f3n \"The robot's navigation system incorporated vibration sensors for terrain analysis.\" GPS sensors Sensores GPS \"The robot relied on GPS sensors to navigate outdoor environments with precise location tracking.\" Humidity sensors Sensores de humedad \"The humidity sensors ensured optimal conditions for weather forecasting and agriculture.\" Infrared sensors Sensores infrarrojos \"The infrared sensors detected human body heat for gesture recognition.\" Light sensors Sensores de luz \"The robot adjusted its behavior based on the readings from the **light","title":"Robots Sensors"},{"location":"contents/robotics/sensors.html#sensors","text":"","title":"Sensors"},{"location":"contents/robotics/sensors.html#definition-of-sensor","text":"Sensors are devices that can detect and measure physical and environmental conditions such as temperature, light, sound, and movement. In this lesson, we will learn about the different types of sensors used in AI applications and the different ways in which they can be used.","title":"Definition of sensor"},{"location":"contents/robotics/sensors.html#types-of-sensors","text":"Optical sensors : These sensors detect light and are used in applications such as facial recognition, object detection, and image processing. Examples of optical sensors include cameras and lidar sensors. Temperature sensors : These sensors measure temperature and are used in applications such as climate control and food safety. Examples of temperature sensors include thermocouples and thermistors. Pressure sensors : These sensors measure pressure and are used in applications such as industrial automation, weather forecasting, and healthcare. Examples of pressure sensors include piezoelectric sensors and strain gauge sensors. Accelerometer sensors : These sensors measure acceleration and are used in applications such as motion detection, navigation, and gaming. Examples of accelerometer sensors include MEMS accelerometers and piezoelectric accelerometers. Gyroscopic sensors : These sensors measure angular velocity and are used in applications such as navigation, gaming, and robotics. Examples of gyroscopic sensors include MEMS gyroscopes and fiber optic gyroscopes. Magnetic sensors : These sensors measure magnetic fields and are used in applications such as navigation, industrial automation, and healthcare. Examples of magnetic sensors include Hall effect sensors and magnetoresistive sensors. Ultrasonic sensors : These sensors measure distance and are used in applications such as object detection, navigation, and industrial automation. Examples of ultrasonic sensors include sonar sensors and lidar sensors. Infrared sensors : These sensors detect infrared radiation and are used in applications such as temperature measurement, night vision, and gesture recognition. Examples of infrared sensors include thermopile sensors and pyroelectric sensors. Proximity sensors : These sensors detect the presence of objects and are used in applications such as gesture recognition, object detection, and access control. Examples of proximity sensors include infrared proximity sensors and ultrasonic proximity sensors. Light sensors : These sensors detect light and are used in applications such as light control, gesture recognition, and object detection. Examples of light sensors include photodiodes and phototransistors. Humidity sensors : These sensors measure humidity and are used in applications such as weather forecasting, agriculture, and healthcare. Examples of humidity sensors include capacitive humidity sensors and resistive humidity sensors. Gas sensors : These sensors detect the presence of gases and are used in applications such as environmental monitoring, industrial automation, and healthcare. Examples of gas sensors include electrochemical gas sensors and metal oxide gas sensors.","title":"Types of sensors"},{"location":"contents/robotics/sensors.html#quiz","text":"1. What do sensors detect and measure? a) Physical and environmental conditions b) Human emotions c) Food flavors d) Political opinions 2. Which type of sensor is used in facial recognition and image processing? a) Temperature sensors b) Pressure sensors c) Optical sensors d) Magnetic sensors 3. Which type of sensor measures acceleration? a) Temperature sensors b) Gyroscopic sensors c) Humidity sensors d) Gas sensors 4. What do proximity sensors detect? a) The presence of objects b) The color of objects c) The weight of objects d) The shape of objects 5. What type of sensors measure angular velocity and can be used in navigation and robotics? a) Gyroscopic sensors b) Temperature sensors c) Infrared sensors d) Gas sensors","title":"Quiz"},{"location":"contents/robotics/sensors.html#glossary","text":"English Spanish Example Sentence (English) Accelerometer sensors Sensores de aceleraci\u00f3n \"The accelerometer sensors detected sudden movements and adjusted the robot's trajectory.\" Color sensors Sensores de color \"The robot's color sensors enabled it to distinguish between different objects based on hue.\" Force sensors Sensores de fuerza \"The robot used force sensors to measure the applied force during object manipulation.\" Gas sensors Sensores de gas \"The robot's safety was enhanced by gas sensors that detected hazardous fumes.\" Gyroscopic sensors Sensores girosc\u00f3picos \"The robot's precise movements were achieved with the help of gyroscopic sensors .\" Humidity sensors Sensores de humedad \"The humidity sensors ensured optimal conditions for plant growth in automated farming.\" Infrared sensors Sensores infrarrojos \"The infrared sensors detected human body heat for gesture recognition.\" Light sensors Sensores de luz \"The robot adjusted its behavior based on the readings from the light sensors .\" Magnetic sensors Sensores magn\u00e9ticos \"The robot relied on magnetic sensors to navigate and avoid obstacles in its path.\" Motion sensors Sensores de movimiento \"The robot's behavior was influenced by the readings from the motion sensors in its environment.\" Pressure sensors Sensores de presi\u00f3n \"The robot used pressure sensors to monitor the gripping force during assembly tasks.\" Proximity sensors Sensores de proximidad \"The robot's precise movements were achieved with the help of proximity sensors .\" Sound sensors Sensores de sonido \"The robot utilized sound sensors to identify specific audio patterns in its environment.\" Temperature sensors Sensores de temperatura \"The robot's temperature sensors ensured optimal conditions for storing perishable goods.\" Touch sensors Sensores t\u00e1ctiles \"The robot's touch sensors allowed it to detect and respond to human touch.\" Ultrasonic sensors Sensores ultras\u00f3nicos \"The robot used ultrasonic sensors to detect the presence of objects in its vicinity.\" Vibration sensors Sensores de vibraci\u00f3n \"The robot's navigation system incorporated vibration sensors for terrain analysis.\" GPS sensors Sensores GPS \"The robot relied on GPS sensors to navigate outdoor environments with precise location tracking.\" Humidity sensors Sensores de humedad \"The humidity sensors ensured optimal conditions for weather forecasting and agriculture.\" Infrared sensors Sensores infrarrojos \"The infrared sensors detected human body heat for gesture recognition.\" Light sensors Sensores de luz \"The robot adjusted its behavior based on the readings from the **light","title":"Glossary"},{"location":"contents/unit00/presentation.html","text":"Slides const lightbox = GLightbox({});","title":"Presentation"},{"location":"contents/unit00/presentation.html#slides","text":"const lightbox = GLightbox({});","title":"Slides"},{"location":"contents/unit01/activity-1-1.html","text":"Activity 1.1. Learning in biological systems","title":"Activity 1.1. Learning in biological systems"},{"location":"contents/unit01/activity-1-1.html#activity-11-learning-in-biological-systems","text":"","title":"Activity 1.1. Learning in biological systems"},{"location":"contents/unit01/activity-turing.html","text":"The Turing test: Can a computer pass for a human? - Alex Gendler What is consciousness? Can an (1) really think? Does the mind just consist of _ ___ (2) in the brain, or is there some intangible spark at its core? For many, these have been vital considerations for the future of artificial intelligence. But British computer scientist Alan Turing decided to disregard all these questions in favor of a much simpler one: can a computer talk like a human? This question led to an idea for measuring artificial intelligence that would famously come to be known as the _ ______ (3). In the 1950 paper, \"Computing Machinery and Intelligence,\" Turing proposed the following game. A human _ _ ___ (4) has a text conversation with unseen players and evaluates their responses. To pass the test, a computer must be able to replace one of the players without substantially changing the results. In other words, a computer would be considered intelligent if its conversation couldn't be easily distinguished from a human's. Turing predicted that by the year 2000, machines with 100 megabytes of memory would be able to easily pass his test. But he may have jumped the gun. Even though today's computers have far more _ _ (5) than that, few have succeeded, and those that have done well focused more on finding clever ways to fool judges than using overwhelming _ _ ______ (6). Though it was never subjected to a real test, the first program with some claim to success was called ELIZA. With only a fairly short and simple script, it managed to mislead many people by _ _ (7) a psychologist, encouraging them to talk more and reflecting their own questions back at them. Another early script PARRY took the opposite approach by _ _ __ (8) a paranoid schizophrenic who kept steering the conversation back to his own preprogrammed obsessions. Their success in fooling people highlighted one _ _ _____ (9) of the test. Humans regularly attribute intelligence to a whole range of things that are not actually intelligent. Nonetheless, annual competitions like the Loebner Prize, have made the test more formal with judges knowing ahead of time that some of their conversation partners are machines. But while the quality has improved, many _ _ ____ (10) programmers have used similar strategies to ELIZA and PARRY. 1997's winner Catherine could carry on amazingly focused and intelligent conversation, but mostly if the judge wanted to talk about Bill Clinton. And the more recent winner Eugene Goostman was given the persona of a 13-year-old Ukrainian boy, so judges interpreted its nonsequiturs and awkward grammar as language and culture barriers. Meanwhile, other programs like Cleverbot have taken a different approach by _ _ (11) analyzing huge _ _ (12) of real conversations to determine the best responses. Some also store memories of previous conversations in order to improve over time. But while Cleverbot's individual responses can sound incredibly human, its lack of a consistent _ _ ____ (13) and inability to deal with brand new topics are a dead giveaway. Who in Turing's day could have _ _ _ (14) that today's computers would be able to pilot spacecraft, perform delicate surgeries, and solve massive equations, but still struggle with the most basic small talk? Human _ ______ (15) turns out to be an amazingly complex phenomenon that can't be captured by even the largest dictionary. Chatbots can be baffled by simple pauses, like \"umm...\" or questions with no correct answer. And a simple _ _ (16) sentence, like, \"I took the juice out of the fridge and gave it to him, but forgot to check the date,\" requires a wealth of underlying _ _ _ (17) and intuition to parse. It turns out that _ _ (18) a human conversation takes more than just increasing memory and _ _ (19) power, and as we get closer to Turing's goal, we may have to deal with all those big questions about _ ____ (20) after all.","title":"Activity turing"},{"location":"contents/unit01/activity-turing.html#the-turing-test-can-a-computer-pass-for-a-human-alex-gendler","text":"","title":"The Turing test: Can a computer pass for a human? - Alex Gendler"},{"location":"contents/unit01/activity-turing.html#_1","text":"What is consciousness? Can an (1) really think? Does the mind just consist of _ ___ (2) in the brain, or is there some intangible spark at its core? For many, these have been vital considerations for the future of artificial intelligence. But British computer scientist Alan Turing decided to disregard all these questions in favor of a much simpler one: can a computer talk like a human? This question led to an idea for measuring artificial intelligence that would famously come to be known as the _ ______ (3). In the 1950 paper, \"Computing Machinery and Intelligence,\" Turing proposed the following game. A human _ _ ___ (4) has a text conversation with unseen players and evaluates their responses. To pass the test, a computer must be able to replace one of the players without substantially changing the results. In other words, a computer would be considered intelligent if its conversation couldn't be easily distinguished from a human's. Turing predicted that by the year 2000, machines with 100 megabytes of memory would be able to easily pass his test. But he may have jumped the gun. Even though today's computers have far more _ _ (5) than that, few have succeeded, and those that have done well focused more on finding clever ways to fool judges than using overwhelming _ _ ______ (6). Though it was never subjected to a real test, the first program with some claim to success was called ELIZA. With only a fairly short and simple script, it managed to mislead many people by _ _ (7) a psychologist, encouraging them to talk more and reflecting their own questions back at them. Another early script PARRY took the opposite approach by _ _ __ (8) a paranoid schizophrenic who kept steering the conversation back to his own preprogrammed obsessions. Their success in fooling people highlighted one _ _ _____ (9) of the test. Humans regularly attribute intelligence to a whole range of things that are not actually intelligent. Nonetheless, annual competitions like the Loebner Prize, have made the test more formal with judges knowing ahead of time that some of their conversation partners are machines. But while the quality has improved, many _ _ ____ (10) programmers have used similar strategies to ELIZA and PARRY. 1997's winner Catherine could carry on amazingly focused and intelligent conversation, but mostly if the judge wanted to talk about Bill Clinton. And the more recent winner Eugene Goostman was given the persona of a 13-year-old Ukrainian boy, so judges interpreted its nonsequiturs and awkward grammar as language and culture barriers. Meanwhile, other programs like Cleverbot have taken a different approach by _ _ (11) analyzing huge _ _ (12) of real conversations to determine the best responses. Some also store memories of previous conversations in order to improve over time. But while Cleverbot's individual responses can sound incredibly human, its lack of a consistent _ _ ____ (13) and inability to deal with brand new topics are a dead giveaway. Who in Turing's day could have _ _ _ (14) that today's computers would be able to pilot spacecraft, perform delicate surgeries, and solve massive equations, but still struggle with the most basic small talk? Human _ ______ (15) turns out to be an amazingly complex phenomenon that can't be captured by even the largest dictionary. Chatbots can be baffled by simple pauses, like \"umm...\" or questions with no correct answer. And a simple _ _ (16) sentence, like, \"I took the juice out of the fridge and gave it to him, but forgot to check the date,\" requires a wealth of underlying _ _ _ (17) and intuition to parse. It turns out that _ _ (18) a human conversation takes more than just increasing memory and _ _ (19) power, and as we get closer to Turing's goal, we may have to deal with all those big questions about _ ____ (20) after all.","title":""},{"location":"contents/unit01/alphago.html","text":"AlphaGo: Neural Networks and Deep Learning With more board configurations than there are atoms in the universe, the ancient Chinese game of Go has long been considered a grand challenge for artificial intelligence. On March 9, 2016, the worlds of Go and artificial intelligence collided in South Korea for an extraordinary best-of-five-game competition, coined The DeepMind Challenge Match. Hundreds of millions of people around the world watched as a legendary Go master took on an unproven AI challenger for the first time in history. Directed by Greg Kohs and with an original score by Academy Award nominee Hauschka, AlphaGo had its premiere at the Tribeca Film Festival. It has since gone on to win countless awards and near universal praise for a story that chronicles a journey from the halls of Oxford, through the backstreets of Bordeaux, past the coding terminals of DeepMind in London, and ultimately, to the seven-day tournament in Seoul. As the drama unfolds, more questions emerge: What can artificial intelligence reveal about a 3000-year-old game? What can it teach us about humanity?","title":"AlphaGo"},{"location":"contents/unit01/alphago.html#alphago-neural-networks-and-deep-learning","text":"With more board configurations than there are atoms in the universe, the ancient Chinese game of Go has long been considered a grand challenge for artificial intelligence. On March 9, 2016, the worlds of Go and artificial intelligence collided in South Korea for an extraordinary best-of-five-game competition, coined The DeepMind Challenge Match. Hundreds of millions of people around the world watched as a legendary Go master took on an unproven AI challenger for the first time in history. Directed by Greg Kohs and with an original score by Academy Award nominee Hauschka, AlphaGo had its premiere at the Tribeca Film Festival. It has since gone on to win countless awards and near universal praise for a story that chronicles a journey from the halls of Oxford, through the backstreets of Bordeaux, past the coding terminals of DeepMind in London, and ultimately, to the seven-day tournament in Seoul. As the drama unfolds, more questions emerge: What can artificial intelligence reveal about a 3000-year-old game? What can it teach us about humanity?","title":"AlphaGo: Neural Networks and Deep Learning"},{"location":"contents/unit01/alphago_activity.html","text":"A02. Artificial Intelligence Techniques, Applications and Ethics","title":"A02. Artificial Intelligence Techniques, Applications and Ethics"},{"location":"contents/unit01/alphago_activity.html#a02-artificial-intelligence-techniques-applications-and-ethics","text":"","title":"A02. Artificial Intelligence Techniques, Applications and Ethics"},{"location":"contents/unit01/c0_text-turing.html","text":"A01. Introduction to Artificial Intelligence: The Turing Test Summary The text is discussing the Turing test, which is a measure of a machine's ability to demonstrate intelligent behavior that is indistinguishable from that of a human. The test was proposed by Alan Turing in 1950 to determine whether a machine can truly be considered intelligent. The text talks about the history of the Turing test, how it was proposed and its evolution over time, and the challenges it poses. The text also highlights the success and failures of early programs such as ELIZA and PARRY and more recent ones like Cleverbot in passing the test. It also talks about the limitations of the test and the complexity of human language which makes it challenging for computers to pass the test. The text concludes by saying that as we get closer to Turing's goal, we may have to deal with all those big questions about consciousness after all. The Turing test: Can a computer pass for a human? - Alex Gendler What is consciousness? Can an __________ (1) really think? Does the mind just consist of __________ (2) in the brain, or is there some intangible spark at its core? For many, these have been vital considerations for the future of artificial intelligence. But British computer scientist Alan Turing decided to disregard all these questions in favor of a much simpler one: can a computer talk like a human? This question led to an idea for measuring artificial intelligence that would famously come to be known as the __________ (3). In the 1950 paper, \"Computing Machinery and Intelligence,\" Turing proposed the following game. A human __________ (4) has a text conversation with unseen players and evaluates their responses. To pass the test, a computer must be able to replace one of the players without substantially changing the results. In other words, a computer would be considered intelligent if its conversation couldn't be easily distinguished from a human's. Turing predicted that by the year 2000, machines with 100 megabytes of memory would be able to easily pass his test. But he may have jumped the gun. Even though today's computers have far more __________ (5) than that, few have succeeded, and those that have done well focused more on finding clever ways to fool judges than using overwhelming __________ (6). Though it was never subjected to a real test, the first program with some claim to success was called ELIZA. With only a fairly short and simple script, it managed to mislead many people by __________ (7) a psychologist, encouraging them to talk more and reflecting their own questions back at them. Another early script PARRY took the opposite approach by __________ (8) a paranoid schizophrenic who kept steering the conversation back to his own preprogrammed obsessions. Their success in fooling people highlighted one __________ (9) of the test. Humans regularly attribute intelligence to a whole range of things that are not actually intelligent. Nonetheless, annual competitions like the Loebner Prize, have made the test more formal with judges knowing ahead of time that some of their conversation partners are machines But while the quality has improved, many __________ (10) programmers have used similar strategies to ELIZA and PARRY. 1997's winner Catherine could carry on amazingly focused and intelligent conversation, but mostly if the judge wanted to talk about Bill Clinton. And the more recent winner Eugene Goostman was given the persona of a 13-year-old Ukrainian boy, so judges interpreted its nonsequiturs and awkward grammar as language and culture barriers. Meanwhile, other programs like Cleverbot have taken a different approach by __________ (11) analyzing huge __________ (12) of real conversations to determine the best responses. Some also store memories of previous conversations in order to improve over time. But while Cleverbot's individual responses can sound incredibly human, its lack of a consistent __________ (13) and inability to deal with brand new topics are a dead giveaway. Who in Turing's day could have __________ (14) that today's computers would be able to pilot spacecraft, perform delicate surgeries, and solve massive equations, but still struggle with the most basic small talk? Human __________ (15) turns out to be an amazingly complex phenomenon that can't be captured by even the largest dictionary. Chatbots can be baffled by simple pauses, like \"umm...\" or questions with no correct answer. And a simple __________ (16) sentence, like, \"I took the juice out of the fridge and gave it to him, but forgot to check the date,\" requires a wealth of underlying __________ (17) and intuition to parse. It turns out that __________ (18) a human conversation takes more than just increasing memory and __________ (19) power, and as we get closer to Turing's goal, we may have to deal with all those big questions about __________ (20) after all. Words: artificial machine, chatbot, computing power, consciousness, conversational, databases, imitating, judge, knowledge, language, memory, mimicking, neurons, personality, predicted, processing, simulating, statistically, Turing test, weakness. Quiz 1. Who proposed the Turing test? Christopher Nolan Alex Garland Denis Villeneuve Alan Turing 2. What is the main goal of the Turing test? To determine if a machine can truly be considered intelligent To measure a machine's ability to pass as a human in a text conversation To evaluate the capabilities of AI systems All of the above 3. In the Turing test, what is the role of the human evaluator? To have a text conversation with unseen players and evaluate their responses To determine if a machine is truly conscious To provide a human perspective for a machine's development To compare the responses of the unseen players to see if they are easily distinguishable","title":"A01. Introduction to Artificial Intelligence: The Turing Test"},{"location":"contents/unit01/c0_text-turing.html#a01-introduction-to-artificial-intelligence-the-turing-test","text":"","title":"A01. Introduction to Artificial Intelligence: The Turing Test"},{"location":"contents/unit01/c0_text-turing.html#summary","text":"The text is discussing the Turing test, which is a measure of a machine's ability to demonstrate intelligent behavior that is indistinguishable from that of a human. The test was proposed by Alan Turing in 1950 to determine whether a machine can truly be considered intelligent. The text talks about the history of the Turing test, how it was proposed and its evolution over time, and the challenges it poses. The text also highlights the success and failures of early programs such as ELIZA and PARRY and more recent ones like Cleverbot in passing the test. It also talks about the limitations of the test and the complexity of human language which makes it challenging for computers to pass the test. The text concludes by saying that as we get closer to Turing's goal, we may have to deal with all those big questions about consciousness after all.","title":"Summary"},{"location":"contents/unit01/c0_text-turing.html#the-turing-test-can-a-computer-pass-for-a-human-alex-gendler","text":"What is consciousness? Can an __________ (1) really think? Does the mind just consist of __________ (2) in the brain, or is there some intangible spark at its core? For many, these have been vital considerations for the future of artificial intelligence. But British computer scientist Alan Turing decided to disregard all these questions in favor of a much simpler one: can a computer talk like a human? This question led to an idea for measuring artificial intelligence that would famously come to be known as the __________ (3). In the 1950 paper, \"Computing Machinery and Intelligence,\" Turing proposed the following game. A human __________ (4) has a text conversation with unseen players and evaluates their responses. To pass the test, a computer must be able to replace one of the players without substantially changing the results. In other words, a computer would be considered intelligent if its conversation couldn't be easily distinguished from a human's. Turing predicted that by the year 2000, machines with 100 megabytes of memory would be able to easily pass his test. But he may have jumped the gun. Even though today's computers have far more __________ (5) than that, few have succeeded, and those that have done well focused more on finding clever ways to fool judges than using overwhelming __________ (6). Though it was never subjected to a real test, the first program with some claim to success was called ELIZA. With only a fairly short and simple script, it managed to mislead many people by __________ (7) a psychologist, encouraging them to talk more and reflecting their own questions back at them. Another early script PARRY took the opposite approach by __________ (8) a paranoid schizophrenic who kept steering the conversation back to his own preprogrammed obsessions. Their success in fooling people highlighted one __________ (9) of the test. Humans regularly attribute intelligence to a whole range of things that are not actually intelligent. Nonetheless, annual competitions like the Loebner Prize, have made the test more formal with judges knowing ahead of time that some of their conversation partners are machines But while the quality has improved, many __________ (10) programmers have used similar strategies to ELIZA and PARRY. 1997's winner Catherine could carry on amazingly focused and intelligent conversation, but mostly if the judge wanted to talk about Bill Clinton. And the more recent winner Eugene Goostman was given the persona of a 13-year-old Ukrainian boy, so judges interpreted its nonsequiturs and awkward grammar as language and culture barriers. Meanwhile, other programs like Cleverbot have taken a different approach by __________ (11) analyzing huge __________ (12) of real conversations to determine the best responses. Some also store memories of previous conversations in order to improve over time. But while Cleverbot's individual responses can sound incredibly human, its lack of a consistent __________ (13) and inability to deal with brand new topics are a dead giveaway. Who in Turing's day could have __________ (14) that today's computers would be able to pilot spacecraft, perform delicate surgeries, and solve massive equations, but still struggle with the most basic small talk? Human __________ (15) turns out to be an amazingly complex phenomenon that can't be captured by even the largest dictionary. Chatbots can be baffled by simple pauses, like \"umm...\" or questions with no correct answer. And a simple __________ (16) sentence, like, \"I took the juice out of the fridge and gave it to him, but forgot to check the date,\" requires a wealth of underlying __________ (17) and intuition to parse. It turns out that __________ (18) a human conversation takes more than just increasing memory and __________ (19) power, and as we get closer to Turing's goal, we may have to deal with all those big questions about __________ (20) after all. Words: artificial machine, chatbot, computing power, consciousness, conversational, databases, imitating, judge, knowledge, language, memory, mimicking, neurons, personality, predicted, processing, simulating, statistically, Turing test, weakness.","title":"The Turing test: Can a computer pass for a human? - Alex Gendler"},{"location":"contents/unit01/c0_text-turing.html#quiz","text":"1. Who proposed the Turing test? Christopher Nolan Alex Garland Denis Villeneuve Alan Turing 2. What is the main goal of the Turing test? To determine if a machine can truly be considered intelligent To measure a machine's ability to pass as a human in a text conversation To evaluate the capabilities of AI systems All of the above 3. In the Turing test, what is the role of the human evaluator? To have a text conversation with unseen players and evaluate their responses To determine if a machine is truly conscious To provide a human perspective for a machine's development To compare the responses of the unseen players to see if they are easily distinguishable","title":"Quiz"},{"location":"contents/unit01/c0_the-turing-test.html","text":"The Turing Test The Turing test is a way to measure a machine's ability to think and understand like a human. It was proposed by Alan Turing, a famous computer scientist, in 1950. The test works by having a human judge talk to both a human and a machine through a computer screen or other means of communication. If the judge can't tell which one is the machine, then the machine is said to have passed the Turing test and is considered to have human-like intelligence. It's a way to test the intelligence of machines. Alan Turing Alan Turing was a British computer scientist and mathematician who lived in the 20th century. He is famous for his work on cracking the code used by the Germans during World War II, which helped the Allies win the war. He also proposed the Turing test, which is a way to measure a machine's ability to think and understand like a human.","title":"The Turing Test"},{"location":"contents/unit01/c0_the-turing-test.html#the-turing-test","text":"The Turing test is a way to measure a machine's ability to think and understand like a human. It was proposed by Alan Turing, a famous computer scientist, in 1950. The test works by having a human judge talk to both a human and a machine through a computer screen or other means of communication. If the judge can't tell which one is the machine, then the machine is said to have passed the Turing test and is considered to have human-like intelligence. It's a way to test the intelligence of machines.","title":"The Turing Test"},{"location":"contents/unit01/c0_the-turing-test.html#alan-turing","text":"Alan Turing was a British computer scientist and mathematician who lived in the 20th century. He is famous for his work on cracking the code used by the Germans during World War II, which helped the Allies win the war. He also proposed the Turing test, which is a way to measure a machine's ability to think and understand like a human.","title":"Alan Turing"},{"location":"contents/unit01/c1_ai-bio.html","text":"Learning in Biological Systems: Decisions and Free Will When we think about learning , we often think about school, books, and teachers. But learning happens in many ways, especially in biological systems , like our brains and the brains of animals. Let's explore how this works and how it relates to making decisions and free will , and how it connects to artificial intelligence (AI) , programming, and robotics. What is Learning in Biological Systems? Learning in biological systems means how living things (like humans and animals) change their behavior based on experiences. For example, when a dog learns to sit because it gets a treat, that's learning. Our brains learn by forming connections between neurons , which are tiny cells that send messages. These connections help us remember things and improve our skills. How Do We Learn? There are different ways we learn: Classical Conditioning: This is when we learn to link two things together. For example, if you hear a bell every time you get a snack, soon you'll start to feel hungry just by hearing the bell. This is how Pavlov's dogs learned to salivate at the sound of a bell. Operant Conditioning: This is when we learn from the consequences of our actions. If you do something good and get a reward, you'll want to do it again. If you do something bad and get punished, you'll avoid doing it again. This is how many animals and humans learn to behave. Observational Learning: This is when we learn by watching others. If you see your friend solving a puzzle, you might learn how to solve it too just by observing. This type of learning is very important for social animals like humans. Decisions and Free Will When we learn, we also make decisions. A decision is choosing between different options. For example, deciding what to eat for lunch or what game to play. Our decisions are influenced by our past experiences and what we've learned. Free Will is the idea that we can choose our actions independently. But, are our decisions truly free? Let's explore this idea: Influences on Decisions: Our decisions are often influenced by things we can't control. For example, our environment, our upbringing, and our experiences all shape our choices. If you've always had pizza on Fridays, you might choose pizza without really thinking about it. Brain and Choices: Our brain makes decisions by weighing different options and predicting outcomes. Sometimes, our brain makes choices automatically based on what we've learned. Other times, we think carefully before deciding. This process involves different parts of the brain working together. True Freedom?: Some scientists believe that our decisions are not completely free because they are based on previous experiences and biological processes. Others believe that we still have the power to make choices, even if they are influenced by other factors.","title":"Learning in Biological Systems: Decisions and Free Will"},{"location":"contents/unit01/c1_ai-bio.html#learning-in-biological-systems-decisions-and-free-will","text":"When we think about learning , we often think about school, books, and teachers. But learning happens in many ways, especially in biological systems , like our brains and the brains of animals. Let's explore how this works and how it relates to making decisions and free will , and how it connects to artificial intelligence (AI) , programming, and robotics.","title":"Learning in Biological Systems: Decisions and Free Will"},{"location":"contents/unit01/c1_ai-bio.html#what-is-learning-in-biological-systems","text":"Learning in biological systems means how living things (like humans and animals) change their behavior based on experiences. For example, when a dog learns to sit because it gets a treat, that's learning. Our brains learn by forming connections between neurons , which are tiny cells that send messages. These connections help us remember things and improve our skills.","title":"What is Learning in Biological Systems?"},{"location":"contents/unit01/c1_ai-bio.html#how-do-we-learn","text":"There are different ways we learn: Classical Conditioning: This is when we learn to link two things together. For example, if you hear a bell every time you get a snack, soon you'll start to feel hungry just by hearing the bell. This is how Pavlov's dogs learned to salivate at the sound of a bell. Operant Conditioning: This is when we learn from the consequences of our actions. If you do something good and get a reward, you'll want to do it again. If you do something bad and get punished, you'll avoid doing it again. This is how many animals and humans learn to behave. Observational Learning: This is when we learn by watching others. If you see your friend solving a puzzle, you might learn how to solve it too just by observing. This type of learning is very important for social animals like humans.","title":"How Do We Learn?"},{"location":"contents/unit01/c1_ai-bio.html#decisions-and-free-will","text":"When we learn, we also make decisions. A decision is choosing between different options. For example, deciding what to eat for lunch or what game to play. Our decisions are influenced by our past experiences and what we've learned. Free Will is the idea that we can choose our actions independently. But, are our decisions truly free? Let's explore this idea: Influences on Decisions: Our decisions are often influenced by things we can't control. For example, our environment, our upbringing, and our experiences all shape our choices. If you've always had pizza on Fridays, you might choose pizza without really thinking about it. Brain and Choices: Our brain makes decisions by weighing different options and predicting outcomes. Sometimes, our brain makes choices automatically based on what we've learned. Other times, we think carefully before deciding. This process involves different parts of the brain working together. True Freedom?: Some scientists believe that our decisions are not completely free because they are based on previous experiences and biological processes. Others believe that we still have the power to make choices, even if they are influenced by other factors.","title":"Decisions and Free Will"},{"location":"contents/unit01/c1_learning-aipr.html","text":"Learning: AI, Programming and Robots Learning and Robots In artificial intelligence (AI) and robotics, we try to mimic how biological systems learn. Let's see how this works: Machine Learning: Just like our brains, AI systems can learn from experiences. Machine learning is a type of AI where computers learn from data. For example, a computer can learn to recognize pictures of cats by looking at many cat photos and finding patterns. Reinforcement Learning: This is similar to operant conditioning in animals. In reinforcement learning, an AI learns by trying different actions and receiving rewards or punishments. For example, a robot can learn to navigate a maze by getting points for moving in the right direction and losing points for hitting walls. Neural Networks: These are computer systems modeled after the human brain. They consist of layers of interconnected nodes (like neurons) that process information. Neural networks are used in many AI applications, such as recognizing speech or translating languages. Programming AI and Robots Programming AI and robots involves writing code that allows them to learn and make decisions. Here are some key points: Algorithms: Algorithms are step-by-step instructions for solving problems. In AI, algorithms help computers learn from data. For example, a sorting algorithm can help a robot organize objects by size. Sensors and Actuators: Robots use sensors to collect information about their environment (like cameras or touch sensors) and actuators to perform actions (like moving arms or wheels). Programming involves making sure the robot can process sensor data and respond appropriately. Autonomous Decision-Making: Advanced AI systems can make decisions on their own, based on their programming and learning. For example, self-driving cars use AI to decide when to turn, stop, or speed up, based on data from their sensors. Conclusion Learning in biological systems is a complex process that helps living things adapt and survive. By understanding how we learn and make decisions, we can create better AI and robots. These smart machines can learn from experiences, make decisions, and help us in many ways. So, every choice we make, whether influenced by our past or not, helps us grow and learn even more, just like the AI and robots we build.","title":"Learning: AI, Programming and Robots"},{"location":"contents/unit01/c1_learning-aipr.html#learning-ai-programming-and-robots","text":"","title":"Learning: AI, Programming and Robots"},{"location":"contents/unit01/c1_learning-aipr.html#learning-and-robots","text":"In artificial intelligence (AI) and robotics, we try to mimic how biological systems learn. Let's see how this works: Machine Learning: Just like our brains, AI systems can learn from experiences. Machine learning is a type of AI where computers learn from data. For example, a computer can learn to recognize pictures of cats by looking at many cat photos and finding patterns. Reinforcement Learning: This is similar to operant conditioning in animals. In reinforcement learning, an AI learns by trying different actions and receiving rewards or punishments. For example, a robot can learn to navigate a maze by getting points for moving in the right direction and losing points for hitting walls. Neural Networks: These are computer systems modeled after the human brain. They consist of layers of interconnected nodes (like neurons) that process information. Neural networks are used in many AI applications, such as recognizing speech or translating languages.","title":"Learning and Robots"},{"location":"contents/unit01/c1_learning-aipr.html#programming-ai-and-robots","text":"Programming AI and robots involves writing code that allows them to learn and make decisions. Here are some key points: Algorithms: Algorithms are step-by-step instructions for solving problems. In AI, algorithms help computers learn from data. For example, a sorting algorithm can help a robot organize objects by size. Sensors and Actuators: Robots use sensors to collect information about their environment (like cameras or touch sensors) and actuators to perform actions (like moving arms or wheels). Programming involves making sure the robot can process sensor data and respond appropriately. Autonomous Decision-Making: Advanced AI systems can make decisions on their own, based on their programming and learning. For example, self-driving cars use AI to decide when to turn, stop, or speed up, based on data from their sensors.","title":"Programming AI and Robots"},{"location":"contents/unit01/c1_learning-aipr.html#conclusion","text":"Learning in biological systems is a complex process that helps living things adapt and survive. By understanding how we learn and make decisions, we can create better AI and robots. These smart machines can learn from experiences, make decisions, and help us in many ways. So, every choice we make, whether influenced by our past or not, helps us grow and learn even more, just like the AI and robots we build.","title":"Conclusion"},{"location":"contents/unit01/c2_sensors-applications.html","text":"Applications of Sensors Sensors are used in a wide range of fields to improve efficiency, safety, and convenience. Here, we will discuss some important areas where sensors play a crucial role. Robotics In robotics, sensors are like the \"eyes\" and \"ears\" of the robot. They allow robots to interact with their environment. Examples of sensor use in robotics include: Obstacle detection : Robots use proximity sensors to avoid bumping into things. Self-driving cars : These cars use cameras, radar, and light sensors to detect other vehicles, pedestrians, and traffic signals. Humanoid robots : Sensors help these robots mimic human actions like walking, talking, or even shaking hands. Smart Homes Many modern homes use sensors to make life more comfortable and energy-efficient: Temperature sensors : Automatically adjust heating or cooling based on room temperature. Motion sensors : Turn lights on or off when someone enters or leaves a room. Sound sensors : Detect smoke alarms or breaking glass to alert homeowners of potential danger. Medical Devices In the field of healthcare, sensors are used to monitor and improve patients' health: Heart rate monitors : These sensors measure how fast your heart is beating. Blood pressure monitors : These devices use pressure sensors to measure the force of blood against the walls of your arteries. Thermometers : Modern digital thermometers use temperature sensors to give quick and accurate readings. Environmental Monitoring Sensors are also essential for keeping track of changes in the environment: Air quality sensors : Measure levels of pollution and harmful gases in the air. Water sensors : Detect changes in water quality, such as pH levels or contamination. Weather stations : Use a combination of temperature, humidity, and wind sensors to predict weather patterns. Industrial Automation In factories and industries, sensors are widely used to improve production processes: Pressure sensors : Monitor machinery to ensure it is operating at the right pressure. Proximity sensors : Help robotic arms locate and assemble parts without making errors. Temperature sensors : Prevent machines from overheating by turning them off when they get too hot.","title":"C2 sensors applications"},{"location":"contents/unit01/c2_sensors-applications.html#applications-of-sensors","text":"Sensors are used in a wide range of fields to improve efficiency, safety, and convenience. Here, we will discuss some important areas where sensors play a crucial role.","title":"Applications of Sensors"},{"location":"contents/unit01/c2_sensors-applications.html#robotics","text":"In robotics, sensors are like the \"eyes\" and \"ears\" of the robot. They allow robots to interact with their environment. Examples of sensor use in robotics include: Obstacle detection : Robots use proximity sensors to avoid bumping into things. Self-driving cars : These cars use cameras, radar, and light sensors to detect other vehicles, pedestrians, and traffic signals. Humanoid robots : Sensors help these robots mimic human actions like walking, talking, or even shaking hands.","title":"Robotics"},{"location":"contents/unit01/c2_sensors-applications.html#smart-homes","text":"Many modern homes use sensors to make life more comfortable and energy-efficient: Temperature sensors : Automatically adjust heating or cooling based on room temperature. Motion sensors : Turn lights on or off when someone enters or leaves a room. Sound sensors : Detect smoke alarms or breaking glass to alert homeowners of potential danger.","title":"Smart Homes"},{"location":"contents/unit01/c2_sensors-applications.html#medical-devices","text":"In the field of healthcare, sensors are used to monitor and improve patients' health: Heart rate monitors : These sensors measure how fast your heart is beating. Blood pressure monitors : These devices use pressure sensors to measure the force of blood against the walls of your arteries. Thermometers : Modern digital thermometers use temperature sensors to give quick and accurate readings.","title":"Medical Devices"},{"location":"contents/unit01/c2_sensors-applications.html#environmental-monitoring","text":"Sensors are also essential for keeping track of changes in the environment: Air quality sensors : Measure levels of pollution and harmful gases in the air. Water sensors : Detect changes in water quality, such as pH levels or contamination. Weather stations : Use a combination of temperature, humidity, and wind sensors to predict weather patterns.","title":"Environmental Monitoring"},{"location":"contents/unit01/c2_sensors-applications.html#industrial-automation","text":"In factories and industries, sensors are widely used to improve production processes: Pressure sensors : Monitor machinery to ensure it is operating at the right pressure. Proximity sensors : Help robotic arms locate and assemble parts without making errors. Temperature sensors : Prevent machines from overheating by turning them off when they get too hot.","title":"Industrial Automation"},{"location":"contents/unit01/c2_sensors.html","text":"Sensors Sensors are an incredible technology that helps machines and robots understand and interact with the world. From light and temperature sensors to motion and pressure sensors, each type plays a specific role in gathering information about the environment. These sensors are used in everyday objects like smartphones, cars, and even medical equipment, helping improve our lives in many ways. By understanding sensors, you are learning an important part of robotics, programming, and artificial intelligence. This knowledge will help you design, build, and program machines that can \"see,\" \"hear,\" and \"feel\" the world around them! Keep exploring, and who knows? Maybe one day you'll create the next big invention using sensors! We will explore how sensors work, the different types, and how they are used in real-life applications. Sensors play a key role in robotics, artificial intelligence (AI), and many other fields of technology. Understanding them is the first step toward creating amazing inventions! Sensors: What Are They? A sensor is a device that detects changes in the environment and converts this information into a signal that can be read or interpreted by humans or machines. Sensors allow robots, computers, or devices to understand the world around them. How Do Sensors Work? Think of a sensor as a special \"detective\" that collects clues from the surroundings. It can notice things like light, sound, movement, or temperature. Once it detects something, it sends this information to the machine\u2019s \"brain\" (a computer or microcontroller), which processes the data and makes decisions. For example, in a robot: - If a temperature sensor detects it's too hot, the robot might turn on a fan. - If a motion sensor detects someone nearby, the robot might say \"Hello!\" Everyday Examples of Sensors Thermometers : These measure temperature and are found in homes or schools. Microphones : These are sensors that pick up sound and are used in phones and computers. Light sensors : These detect the amount of light, like in streetlights that turn on automatically when it gets dark. How Robots Use Sensors In robotics, sensors help robots \"see,\" \"feel,\" and \"hear.\" Sensors allow robots to: - Move around without bumping into things. - Adjust their actions based on changes in their environment. - Perform tasks like opening a door or picking up an object based on what they detect.","title":"Sensors"},{"location":"contents/unit01/c2_sensors.html#sensors","text":"Sensors are an incredible technology that helps machines and robots understand and interact with the world. From light and temperature sensors to motion and pressure sensors, each type plays a specific role in gathering information about the environment. These sensors are used in everyday objects like smartphones, cars, and even medical equipment, helping improve our lives in many ways. By understanding sensors, you are learning an important part of robotics, programming, and artificial intelligence. This knowledge will help you design, build, and program machines that can \"see,\" \"hear,\" and \"feel\" the world around them! Keep exploring, and who knows? Maybe one day you'll create the next big invention using sensors! We will explore how sensors work, the different types, and how they are used in real-life applications. Sensors play a key role in robotics, artificial intelligence (AI), and many other fields of technology. Understanding them is the first step toward creating amazing inventions!","title":"Sensors"},{"location":"contents/unit01/c2_sensors.html#sensors-what-are-they","text":"A sensor is a device that detects changes in the environment and converts this information into a signal that can be read or interpreted by humans or machines. Sensors allow robots, computers, or devices to understand the world around them.","title":"Sensors: What Are They?"},{"location":"contents/unit01/c2_sensors.html#how-do-sensors-work","text":"Think of a sensor as a special \"detective\" that collects clues from the surroundings. It can notice things like light, sound, movement, or temperature. Once it detects something, it sends this information to the machine\u2019s \"brain\" (a computer or microcontroller), which processes the data and makes decisions. For example, in a robot: - If a temperature sensor detects it's too hot, the robot might turn on a fan. - If a motion sensor detects someone nearby, the robot might say \"Hello!\"","title":"How Do Sensors Work?"},{"location":"contents/unit01/c2_sensors.html#everyday-examples-of-sensors","text":"Thermometers : These measure temperature and are found in homes or schools. Microphones : These are sensors that pick up sound and are used in phones and computers. Light sensors : These detect the amount of light, like in streetlights that turn on automatically when it gets dark.","title":"Everyday Examples of Sensors"},{"location":"contents/unit01/c2_sensors.html#how-robots-use-sensors","text":"In robotics, sensors help robots \"see,\" \"feel,\" and \"hear.\" Sensors allow robots to: - Move around without bumping into things. - Adjust their actions based on changes in their environment. - Perform tasks like opening a door or picking up an object based on what they detect.","title":"How Robots Use Sensors"},{"location":"contents/unit01/c2_sensors_2.html","text":"Sensors Artificial Intelligence Artificial Intelligence (AI) is a technology that allows machines to learn, understand, and process information like humans. One of the key components of AI systems is sensors. Sensors are devices that can detect and measure physical and environmental conditions such as temperature, light, sound, and movement. In this lesson, we will learn about the different types of sensors used in AI applications and the different ways in which they can be used. Types of sensors Optical sensors : These sensors detect light and are used in applications such as facial recognition, object detection, and image processing. Examples of optical sensors include cameras and lidar sensors. Temperature sensors: These sensors measure temperature and are used in applications such as climate control and food safety. Examples of temperature sensors include thermocouples and thermistors. Pressure sensors: These sensors measure pressure and are used in applications such as industrial automation, weather forecasting, and healthcare. Examples of pressure sensors include piezoelectric sensors and strain gauge sensors. Accelerometer sensors: These sensors measure acceleration and are used in applications such as motion detection, navigation, and gaming. Examples of accelerometer sensors include MEMS accelerometers and piezoelectric accelerometers. Gyroscopic sensors: These sensors measure angular velocity and are used in applications such as navigation, gaming, and robotics. Examples of gyroscopic sensors include MEMS gyroscopes and fiber optic gyroscopes. Magnetic sensors: These sensors measure magnetic fields and are used in applications such as navigation, industrial automation, and healthcare. Examples of magnetic sensors include Hall effect sensors and magnetoresistive sensors. Ultrasonic sensors: These sensors measure distance and are used in applications such as object detection, navigation, and industrial automation. Examples of ultrasonic sensors include sonar sensors and lidar sensors. Infrared sensors: These sensors detect infrared radiation and are used in applications such as temperature measurement, night vision, and gesture recognition. Examples of infrared sensors include thermopile sensors and pyroelectric sensors. Proximity sensors: These sensors detect the presence of objects and are used in applications such as gesture recognition, object detection, and access control. Examples of proximity sensors include infrared proximity sensors and ultrasonic proximity sensors. Light sensors: These sensors detect light and are used in applications such as light control, gesture recognition, and object detection. Examples of light sensors include photodiodes and phototransistors. Humidity sensors: These sensors measure humidity and are used in applications such as weather forecasting, agriculture, and healthcare. Examples of humidity sensors include capacitive humidity sensors and resistive humidity sensors. Gas sensors: These sensors detect the presence of gases and are used in applications such as environmental monitoring, industrial automation, and healthcare. Examples of gas sensors include electrochemical gas sensors and metal oxide gas sensors. Images Artificial Intelligence","title":"Sensors"},{"location":"contents/unit01/c2_sensors_2.html#sensors","text":"","title":"Sensors"},{"location":"contents/unit01/c2_sensors_2.html#artificial-intelligence","text":"Artificial Intelligence (AI) is a technology that allows machines to learn, understand, and process information like humans. One of the key components of AI systems is sensors. Sensors are devices that can detect and measure physical and environmental conditions such as temperature, light, sound, and movement. In this lesson, we will learn about the different types of sensors used in AI applications and the different ways in which they can be used.","title":"Artificial Intelligence"},{"location":"contents/unit01/c2_sensors_2.html#types-of-sensors","text":"Optical sensors : These sensors detect light and are used in applications such as facial recognition, object detection, and image processing. Examples of optical sensors include cameras and lidar sensors. Temperature sensors: These sensors measure temperature and are used in applications such as climate control and food safety. Examples of temperature sensors include thermocouples and thermistors. Pressure sensors: These sensors measure pressure and are used in applications such as industrial automation, weather forecasting, and healthcare. Examples of pressure sensors include piezoelectric sensors and strain gauge sensors. Accelerometer sensors: These sensors measure acceleration and are used in applications such as motion detection, navigation, and gaming. Examples of accelerometer sensors include MEMS accelerometers and piezoelectric accelerometers. Gyroscopic sensors: These sensors measure angular velocity and are used in applications such as navigation, gaming, and robotics. Examples of gyroscopic sensors include MEMS gyroscopes and fiber optic gyroscopes. Magnetic sensors: These sensors measure magnetic fields and are used in applications such as navigation, industrial automation, and healthcare. Examples of magnetic sensors include Hall effect sensors and magnetoresistive sensors. Ultrasonic sensors: These sensors measure distance and are used in applications such as object detection, navigation, and industrial automation. Examples of ultrasonic sensors include sonar sensors and lidar sensors. Infrared sensors: These sensors detect infrared radiation and are used in applications such as temperature measurement, night vision, and gesture recognition. Examples of infrared sensors include thermopile sensors and pyroelectric sensors. Proximity sensors: These sensors detect the presence of objects and are used in applications such as gesture recognition, object detection, and access control. Examples of proximity sensors include infrared proximity sensors and ultrasonic proximity sensors. Light sensors: These sensors detect light and are used in applications such as light control, gesture recognition, and object detection. Examples of light sensors include photodiodes and phototransistors. Humidity sensors: These sensors measure humidity and are used in applications such as weather forecasting, agriculture, and healthcare. Examples of humidity sensors include capacitive humidity sensors and resistive humidity sensors. Gas sensors: These sensors detect the presence of gases and are used in applications such as environmental monitoring, industrial automation, and healthcare. Examples of gas sensors include electrochemical gas sensors and metal oxide gas sensors.","title":"Types of sensors"},{"location":"contents/unit01/c2_sensors_2.html#images","text":"Artificial Intelligence","title":"Images"},{"location":"contents/unit01/c2_types-of-sensors.html","text":"Types of Sensors There are many different types of sensors, each designed to detect a specific kind of information. Below, we will explore some of the most common types of sensors used in programming, AI, and robotics. Light Sensors What they do : Detect the presence or absence of light and its intensity. Example : A solar panel uses light sensors to determine the amount of sunlight it receives. Where used : Automatic streetlights, smartphones that adjust screen brightness. Temperature Sensors What they do : Measure temperature (how hot or cold something is). Example : A thermostat in your home or school that controls the heating or cooling system. Where used : Air conditioners, refrigerators, weather stations. Motion Sensors What they do : Detect movement. Example : Motion sensors in security systems that detect if someone is walking near the house. Where used : Automatic doors, home security systems, and gaming consoles (like Xbox Kinect). Sound Sensors (Microphones) What they do : Detect sound waves or noise levels. Example : Microphones in phones or voice assistants like Alexa and Siri. Where used : Music studios, phones, and voice-controlled devices. Proximity Sensors What they do : Detect the presence of objects nearby without touching them. Example : Parking sensors in cars that beep when you get too close to an obstacle. Where used : Smartphones (detect when you bring the phone to your ear), robots (for navigation). Pressure Sensors What they do : Measure the amount of force applied to an object. Example : Pressure sensors in touch screens or car tires that tell you when the air pressure is too low. Where used : Smart touch devices, elevators (to detect how much weight they are carrying). Infrared Sensors What they do : Detect infrared radiation, which is a type of invisible light often associated with heat. Example : A TV remote control uses infrared light to send signals to the TV. Where used : Night-vision cameras, temperature measurement tools, and TV remotes.","title":"Types of Sensors"},{"location":"contents/unit01/c2_types-of-sensors.html#types-of-sensors","text":"There are many different types of sensors, each designed to detect a specific kind of information. Below, we will explore some of the most common types of sensors used in programming, AI, and robotics.","title":"Types of Sensors"},{"location":"contents/unit01/c2_types-of-sensors.html#light-sensors","text":"What they do : Detect the presence or absence of light and its intensity. Example : A solar panel uses light sensors to determine the amount of sunlight it receives. Where used : Automatic streetlights, smartphones that adjust screen brightness.","title":"Light Sensors"},{"location":"contents/unit01/c2_types-of-sensors.html#temperature-sensors","text":"What they do : Measure temperature (how hot or cold something is). Example : A thermostat in your home or school that controls the heating or cooling system. Where used : Air conditioners, refrigerators, weather stations.","title":"Temperature Sensors"},{"location":"contents/unit01/c2_types-of-sensors.html#motion-sensors","text":"What they do : Detect movement. Example : Motion sensors in security systems that detect if someone is walking near the house. Where used : Automatic doors, home security systems, and gaming consoles (like Xbox Kinect).","title":"Motion Sensors"},{"location":"contents/unit01/c2_types-of-sensors.html#sound-sensors-microphones","text":"What they do : Detect sound waves or noise levels. Example : Microphones in phones or voice assistants like Alexa and Siri. Where used : Music studios, phones, and voice-controlled devices.","title":"Sound Sensors (Microphones)"},{"location":"contents/unit01/c2_types-of-sensors.html#proximity-sensors","text":"What they do : Detect the presence of objects nearby without touching them. Example : Parking sensors in cars that beep when you get too close to an obstacle. Where used : Smartphones (detect when you bring the phone to your ear), robots (for navigation).","title":"Proximity Sensors"},{"location":"contents/unit01/c2_types-of-sensors.html#pressure-sensors","text":"What they do : Measure the amount of force applied to an object. Example : Pressure sensors in touch screens or car tires that tell you when the air pressure is too low. Where used : Smart touch devices, elevators (to detect how much weight they are carrying).","title":"Pressure Sensors"},{"location":"contents/unit01/c2_types-of-sensors.html#infrared-sensors","text":"What they do : Detect infrared radiation, which is a type of invisible light often associated with heat. Example : A TV remote control uses infrared light to send signals to the TV. Where used : Night-vision cameras, temperature measurement tools, and TV remotes.","title":"Infrared Sensors"},{"location":"contents/unit01/c3_ai-fundamentals.html","text":"Fundamentals of AI: Decision Trees, Big Data, and Neural Networks Artificial Intelligence (AI) is a fascinating field that combines computer science, data, and learning to create smart machines. In this section, we will explore three important concepts in AI: Decision Trees, Big Data, and Neural Networks. Understanding these concepts will help you grasp how AI works and why it is so powerful. Decision Trees A Decision Tree is a tool used in AI to make decisions based on data. It looks like a tree with branches. Each branch represents a choice, and each leaf represents an outcome. How Decision Trees Work: Imagine you are trying to decide what game to play. You start at the root of the tree with a question, like \"Is it raining?\" If the answer is yes, you follow one branch; if the answer is no, you follow another branch. Each branch leads to more questions until you reach a leaf, which tells you what game to play. This process of asking questions and making choices is how a decision tree helps computers make decisions. Examples in Real Life: Decision trees are used in many areas. For example, doctors use them to diagnose diseases by asking questions about symptoms. Online stores use them to recommend products by analyzing your past purchases. Big Data Big Data refers to extremely large sets of data that can be analyzed to find patterns, trends, and associations. Why Big Data is Important: In the past, collecting and analyzing data was slow and difficult. Now, with the help of computers, we can gather huge amounts of data from the internet, sensors, and other sources. This data helps AI systems learn and improve. How Big Data Works: Imagine you have a massive library of books. Instead of reading each book one by one, you use a computer to quickly scan and analyze all the books to find useful information. This is what big data does. It allows AI to process vast amounts of information quickly and accurately. Examples in Real Life: Big data is used in many fields, like healthcare, where it helps doctors find better treatments by analyzing patient records. In social media, it helps companies understand user behavior and improve their services. Neural Networks Neural Networks are a key technology in AI that mimic the way the human brain works. How Neural Networks Work: A neural network is made up of layers of nodes, similar to neurons in the brain. Each node processes information and passes it to the next layer. The network learns by adjusting the connections between nodes based on the data it receives. Training Neural Networks: Training a neural network involves feeding it large amounts of data and adjusting the connections to improve its performance. For example, to train a network to recognize pictures of cats, you show it thousands of cat pictures. The network learns the patterns and features that define a cat. Examples in Real Life: Neural networks are used in many applications. They power voice assistants like Siri and Alexa, recognize faces in photos, and even help self-driving cars navigate. Conclusion Understanding Decision Trees, Big Data, and Neural Networks is essential to grasp the basics of AI. Decision Trees help AI make choices based on data. Big Data provides the vast amount of information needed to train AI systems. Neural Networks mimic the brain's learning process to recognize patterns and make decisions. Together, these technologies enable AI to solve complex problems and improve our lives in many ways. By learning about these concepts, you are taking the first step into the exciting world of AI, programming, and robotics.","title":"Fundamentals of AI: Decision Trees, Big Data, and Neural Networks"},{"location":"contents/unit01/c3_ai-fundamentals.html#fundamentals-of-ai-decision-trees-big-data-and-neural-networks","text":"Artificial Intelligence (AI) is a fascinating field that combines computer science, data, and learning to create smart machines. In this section, we will explore three important concepts in AI: Decision Trees, Big Data, and Neural Networks. Understanding these concepts will help you grasp how AI works and why it is so powerful.","title":"Fundamentals of AI: Decision Trees, Big Data, and Neural Networks"},{"location":"contents/unit01/c3_ai-fundamentals.html#decision-trees","text":"A Decision Tree is a tool used in AI to make decisions based on data. It looks like a tree with branches. Each branch represents a choice, and each leaf represents an outcome. How Decision Trees Work: Imagine you are trying to decide what game to play. You start at the root of the tree with a question, like \"Is it raining?\" If the answer is yes, you follow one branch; if the answer is no, you follow another branch. Each branch leads to more questions until you reach a leaf, which tells you what game to play. This process of asking questions and making choices is how a decision tree helps computers make decisions. Examples in Real Life: Decision trees are used in many areas. For example, doctors use them to diagnose diseases by asking questions about symptoms. Online stores use them to recommend products by analyzing your past purchases.","title":"Decision Trees"},{"location":"contents/unit01/c3_ai-fundamentals.html#big-data","text":"Big Data refers to extremely large sets of data that can be analyzed to find patterns, trends, and associations. Why Big Data is Important: In the past, collecting and analyzing data was slow and difficult. Now, with the help of computers, we can gather huge amounts of data from the internet, sensors, and other sources. This data helps AI systems learn and improve. How Big Data Works: Imagine you have a massive library of books. Instead of reading each book one by one, you use a computer to quickly scan and analyze all the books to find useful information. This is what big data does. It allows AI to process vast amounts of information quickly and accurately. Examples in Real Life: Big data is used in many fields, like healthcare, where it helps doctors find better treatments by analyzing patient records. In social media, it helps companies understand user behavior and improve their services.","title":"Big Data"},{"location":"contents/unit01/c3_ai-fundamentals.html#neural-networks","text":"Neural Networks are a key technology in AI that mimic the way the human brain works. How Neural Networks Work: A neural network is made up of layers of nodes, similar to neurons in the brain. Each node processes information and passes it to the next layer. The network learns by adjusting the connections between nodes based on the data it receives. Training Neural Networks: Training a neural network involves feeding it large amounts of data and adjusting the connections to improve its performance. For example, to train a network to recognize pictures of cats, you show it thousands of cat pictures. The network learns the patterns and features that define a cat. Examples in Real Life: Neural networks are used in many applications. They power voice assistants like Siri and Alexa, recognize faces in photos, and even help self-driving cars navigate.","title":"Neural Networks"},{"location":"contents/unit01/c3_ai-fundamentals.html#conclusion","text":"Understanding Decision Trees, Big Data, and Neural Networks is essential to grasp the basics of AI. Decision Trees help AI make choices based on data. Big Data provides the vast amount of information needed to train AI systems. Neural Networks mimic the brain's learning process to recognize patterns and make decisions. Together, these technologies enable AI to solve complex problems and improve our lives in many ways. By learning about these concepts, you are taking the first step into the exciting world of AI, programming, and robotics.","title":"Conclusion"},{"location":"contents/unit01/c3_big-data.html","text":"Big Data Big Data refers to extremely large sets of data that can be analyzed to find patterns, trends, and associations. This is important for AI because AI systems learn and make decisions based on data. Why Big Data is Important In the past, collecting and analyzing data was slow and difficult. People had to go through information manually, which took a lot of time. Now, with the help of computers, we can gather huge amounts of data from the internet, sensors, and other sources. This data helps AI systems learn and improve. Speed and Efficiency: Computers can process large amounts of data very quickly. This means that AI systems can learn faster and make more accurate decisions. For example, an AI system can analyze millions of pictures to learn how to recognize objects in just a few hours, something that would take humans years to do. Better Learning: The more data an AI system has, the better it can learn. Big data provides AI with a wealth of information, which helps it make more accurate predictions and decisions. For instance, an AI system that analyzes weather data from all over the world can make better weather forecasts. How Big Data Works Imagine you have a massive library of books. Instead of reading each book one by one, you use a computer to quickly scan and analyze all the books to find useful information. This is what big data does. It allows AI to process vast amounts of information quickly and accurately. Data Collection: Data can come from many sources like websites, social media, sensors, and cameras. For example, a fitness app collects data from users' phones and smartwatches to track their exercise habits. Data Storage: Once collected, the data needs to be stored. This is done using big data technologies that can handle large volumes of information. Companies use big servers and cloud storage to keep all this data safe and accessible. Data Analysis: After storing the data, it needs to be analyzed. AI uses algorithms to look for patterns and trends in the data. For example, an AI system can analyze shopping data to see which products are popular and when they are bought the most. Examples in Real Life Big data is used in many fields. Let's look at a few examples to understand how it works and connects with AI and decision trees. Healthcare: In healthcare, big data helps doctors find better treatments by analyzing patient records. For example, an AI system can look at thousands of medical records to identify which treatments work best for certain diseases. This helps doctors make better decisions about patient care. Social Media: Companies like Facebook and Instagram use big data to understand user behavior. They analyze data from millions of users to see what kind of content people like and how they interact with it. This helps them improve their services and keep users engaged. Sports: In sports, big data is used to analyze player performance. Teams collect data on players' movements, speed, and health. AI systems can then analyze this data to help coaches make decisions about training and strategy. For example, by looking at data from past games, an AI system can suggest the best lineup for an upcoming match. Transportation: Big data helps improve transportation systems. For instance, AI can analyze traffic data from sensors and cameras around a city to optimize traffic light patterns. This helps reduce traffic jams and makes transportation more efficient. Retail: Retailers use big data to understand customer preferences. By analyzing shopping data, AI systems can recommend products to customers based on their past purchases. For example, if you often buy sports gear, an online store might recommend new sports equipment to you. Connection with Decision Trees Big data and decision trees are closely connected in AI. Decision trees need data to make decisions, and big data provides a large amount of information for them to analyze. Better Decision Making: With big data, decision trees can make better decisions. For example, a decision tree used by an online store to recommend products can analyze millions of purchase records to make more accurate recommendations. Training Decision Trees: Big data helps train decision trees. By providing lots of data, we can train decision trees to recognize patterns and make better predictions. For example, a decision tree used in healthcare can be trained on thousands of medical records to diagnose diseases more accurately. Real-Time Analysis: Big data allows decision trees to analyze information in real-time. For instance, in transportation, a decision tree can use real-time traffic data to make decisions about traffic light patterns, helping to reduce congestion immediately. Conclusion Big data is a crucial part of AI. It provides the information needed for AI systems to learn and make decisions. By understanding how big data works and seeing real-life examples, we can appreciate its importance in various fields. Whether it\u2019s in healthcare, social media, sports, transportation, or retail, big data helps AI systems perform better. And when combined with decision trees, big data makes AI even more powerful, allowing for smarter and faster decisions.","title":"Big Data"},{"location":"contents/unit01/c3_big-data.html#big-data","text":"Big Data refers to extremely large sets of data that can be analyzed to find patterns, trends, and associations. This is important for AI because AI systems learn and make decisions based on data.","title":"Big Data"},{"location":"contents/unit01/c3_big-data.html#why-big-data-is-important","text":"In the past, collecting and analyzing data was slow and difficult. People had to go through information manually, which took a lot of time. Now, with the help of computers, we can gather huge amounts of data from the internet, sensors, and other sources. This data helps AI systems learn and improve. Speed and Efficiency: Computers can process large amounts of data very quickly. This means that AI systems can learn faster and make more accurate decisions. For example, an AI system can analyze millions of pictures to learn how to recognize objects in just a few hours, something that would take humans years to do. Better Learning: The more data an AI system has, the better it can learn. Big data provides AI with a wealth of information, which helps it make more accurate predictions and decisions. For instance, an AI system that analyzes weather data from all over the world can make better weather forecasts.","title":"Why Big Data is Important"},{"location":"contents/unit01/c3_big-data.html#how-big-data-works","text":"Imagine you have a massive library of books. Instead of reading each book one by one, you use a computer to quickly scan and analyze all the books to find useful information. This is what big data does. It allows AI to process vast amounts of information quickly and accurately. Data Collection: Data can come from many sources like websites, social media, sensors, and cameras. For example, a fitness app collects data from users' phones and smartwatches to track their exercise habits. Data Storage: Once collected, the data needs to be stored. This is done using big data technologies that can handle large volumes of information. Companies use big servers and cloud storage to keep all this data safe and accessible. Data Analysis: After storing the data, it needs to be analyzed. AI uses algorithms to look for patterns and trends in the data. For example, an AI system can analyze shopping data to see which products are popular and when they are bought the most.","title":"How Big Data Works"},{"location":"contents/unit01/c3_big-data.html#examples-in-real-life","text":"Big data is used in many fields. Let's look at a few examples to understand how it works and connects with AI and decision trees. Healthcare: In healthcare, big data helps doctors find better treatments by analyzing patient records. For example, an AI system can look at thousands of medical records to identify which treatments work best for certain diseases. This helps doctors make better decisions about patient care. Social Media: Companies like Facebook and Instagram use big data to understand user behavior. They analyze data from millions of users to see what kind of content people like and how they interact with it. This helps them improve their services and keep users engaged. Sports: In sports, big data is used to analyze player performance. Teams collect data on players' movements, speed, and health. AI systems can then analyze this data to help coaches make decisions about training and strategy. For example, by looking at data from past games, an AI system can suggest the best lineup for an upcoming match. Transportation: Big data helps improve transportation systems. For instance, AI can analyze traffic data from sensors and cameras around a city to optimize traffic light patterns. This helps reduce traffic jams and makes transportation more efficient. Retail: Retailers use big data to understand customer preferences. By analyzing shopping data, AI systems can recommend products to customers based on their past purchases. For example, if you often buy sports gear, an online store might recommend new sports equipment to you.","title":"Examples in Real Life"},{"location":"contents/unit01/c3_big-data.html#connection-with-decision-trees","text":"Big data and decision trees are closely connected in AI. Decision trees need data to make decisions, and big data provides a large amount of information for them to analyze. Better Decision Making: With big data, decision trees can make better decisions. For example, a decision tree used by an online store to recommend products can analyze millions of purchase records to make more accurate recommendations. Training Decision Trees: Big data helps train decision trees. By providing lots of data, we can train decision trees to recognize patterns and make better predictions. For example, a decision tree used in healthcare can be trained on thousands of medical records to diagnose diseases more accurately. Real-Time Analysis: Big data allows decision trees to analyze information in real-time. For instance, in transportation, a decision tree can use real-time traffic data to make decisions about traffic light patterns, helping to reduce congestion immediately.","title":"Connection with Decision Trees"},{"location":"contents/unit01/c3_big-data.html#conclusion","text":"Big data is a crucial part of AI. It provides the information needed for AI systems to learn and make decisions. By understanding how big data works and seeing real-life examples, we can appreciate its importance in various fields. Whether it\u2019s in healthcare, social media, sports, transportation, or retail, big data helps AI systems perform better. And when combined with decision trees, big data makes AI even more powerful, allowing for smarter and faster decisions.","title":"Conclusion"},{"location":"contents/unit01/c3_decision-trees.html","text":"Decision Trees A Decision Tree is a tool used in AI to make decisions based on data. It looks like a tree with branches. Each branch represents a choice, and each leaf represents an outcome. How Decision Trees Work Imagine you are trying to decide what game to play. You start at the root of the tree with a question, like \"Is it raining?\" If the answer is yes, you follow one branch; if the answer is no, you follow another branch. Each branch leads to more questions until you reach a leaf, which tells you what game to play. This process of asking questions and making choices is how a decision tree helps computers make decisions. Nodes and Branches: In a decision tree, each node represents a question. The branches coming out of a node represent the possible answers. Each answer leads to another node or to a leaf. Leaves represent the final decision. Building a Decision Tree: To build a decision tree, you need data. For example, if you want to build a tree to decide what game to play, you need data about the weather, available games, and preferences. The tree is built by choosing the most important questions that help split the data into different categories. Examples in Real Life Decision trees are used in many areas. Let's look at a few examples to understand how they are used in everyday life. Medical Diagnosis: Doctors use decision trees to diagnose diseases. For example, a decision tree for diagnosing flu might start with the question, \"Do you have a fever?\" If the answer is yes, the next question might be, \"Do you have a cough?\" Each question helps narrow down the possible diseases until a diagnosis is reached. This helps doctors make accurate diagnoses based on symptoms. Product Recommendations: Online stores like Amazon use decision trees to recommend products. When you browse products, the store collects data about your preferences. The decision tree might start with questions like, \"Have you bought electronics recently?\" If the answer is yes, it might recommend similar electronics. If the answer is no, it might ask, \"Do you like sports?\" and recommend sports equipment based on your past purchases. This helps personalize your shopping experience. Customer Support: Many companies use decision trees to improve customer support. When you call a helpline, an automated system might use a decision tree to ask questions like, \"Is your issue related to billing?\" Depending on your answers, it directs you to the right support representative or provides a solution directly. This makes customer support more efficient and faster. Loan Approval: Banks use decision trees to decide whether to approve a loan. The tree might start with questions like, \"What is your credit score?\" Based on the answer, it might ask, \"Do you have a stable income?\" Each question helps the bank assess the risk of lending money to you. This helps ensure that loans are given to people who are likely to repay them. Weather Prediction: Meteorologists use decision trees to predict weather conditions. The tree might start with questions like, \"What is the current temperature?\" and \"Is there a high pressure system nearby?\" Each question helps narrow down the possible weather outcomes. This helps provide accurate weather forecasts. Benefits and Limitations Benefits: Decision trees are easy to understand and interpret. They can handle both numerical and categorical data and are useful for both classification (e.g., diagnosing diseases) and regression (e.g., predicting prices). Limitations: Decision trees can become very complex and overfit the data, meaning they work well on training data but poorly on new data. They can also be sensitive to small changes in the data, which can lead to different trees being generated from slightly different data sets. Conclusion Decision trees are powerful tools in AI that help make decisions based on data. By understanding how they work and seeing real-life examples, we can appreciate their importance in various fields. Whether it\u2019s diagnosing diseases, recommending products, or predicting the weather, decision trees help computers and humans make informed decisions. As we continue to explore AI, understanding decision trees will provide a solid foundation for learning more advanced concepts.","title":"Decision Trees"},{"location":"contents/unit01/c3_decision-trees.html#decision-trees","text":"A Decision Tree is a tool used in AI to make decisions based on data. It looks like a tree with branches. Each branch represents a choice, and each leaf represents an outcome.","title":"Decision Trees"},{"location":"contents/unit01/c3_decision-trees.html#how-decision-trees-work","text":"Imagine you are trying to decide what game to play. You start at the root of the tree with a question, like \"Is it raining?\" If the answer is yes, you follow one branch; if the answer is no, you follow another branch. Each branch leads to more questions until you reach a leaf, which tells you what game to play. This process of asking questions and making choices is how a decision tree helps computers make decisions. Nodes and Branches: In a decision tree, each node represents a question. The branches coming out of a node represent the possible answers. Each answer leads to another node or to a leaf. Leaves represent the final decision. Building a Decision Tree: To build a decision tree, you need data. For example, if you want to build a tree to decide what game to play, you need data about the weather, available games, and preferences. The tree is built by choosing the most important questions that help split the data into different categories.","title":"How Decision Trees Work"},{"location":"contents/unit01/c3_decision-trees.html#examples-in-real-life","text":"Decision trees are used in many areas. Let's look at a few examples to understand how they are used in everyday life. Medical Diagnosis: Doctors use decision trees to diagnose diseases. For example, a decision tree for diagnosing flu might start with the question, \"Do you have a fever?\" If the answer is yes, the next question might be, \"Do you have a cough?\" Each question helps narrow down the possible diseases until a diagnosis is reached. This helps doctors make accurate diagnoses based on symptoms. Product Recommendations: Online stores like Amazon use decision trees to recommend products. When you browse products, the store collects data about your preferences. The decision tree might start with questions like, \"Have you bought electronics recently?\" If the answer is yes, it might recommend similar electronics. If the answer is no, it might ask, \"Do you like sports?\" and recommend sports equipment based on your past purchases. This helps personalize your shopping experience. Customer Support: Many companies use decision trees to improve customer support. When you call a helpline, an automated system might use a decision tree to ask questions like, \"Is your issue related to billing?\" Depending on your answers, it directs you to the right support representative or provides a solution directly. This makes customer support more efficient and faster. Loan Approval: Banks use decision trees to decide whether to approve a loan. The tree might start with questions like, \"What is your credit score?\" Based on the answer, it might ask, \"Do you have a stable income?\" Each question helps the bank assess the risk of lending money to you. This helps ensure that loans are given to people who are likely to repay them. Weather Prediction: Meteorologists use decision trees to predict weather conditions. The tree might start with questions like, \"What is the current temperature?\" and \"Is there a high pressure system nearby?\" Each question helps narrow down the possible weather outcomes. This helps provide accurate weather forecasts.","title":"Examples in Real Life"},{"location":"contents/unit01/c3_decision-trees.html#benefits-and-limitations","text":"Benefits: Decision trees are easy to understand and interpret. They can handle both numerical and categorical data and are useful for both classification (e.g., diagnosing diseases) and regression (e.g., predicting prices). Limitations: Decision trees can become very complex and overfit the data, meaning they work well on training data but poorly on new data. They can also be sensitive to small changes in the data, which can lead to different trees being generated from slightly different data sets.","title":"Benefits and Limitations"},{"location":"contents/unit01/c3_decision-trees.html#conclusion","text":"Decision trees are powerful tools in AI that help make decisions based on data. By understanding how they work and seeing real-life examples, we can appreciate their importance in various fields. Whether it\u2019s diagnosing diseases, recommending products, or predicting the weather, decision trees help computers and humans make informed decisions. As we continue to explore AI, understanding decision trees will provide a solid foundation for learning more advanced concepts.","title":"Conclusion"},{"location":"contents/unit01/c3_neural-networks.html","text":"Neural Networks Neural Networks are a key technology in AI that mimic the way the human brain works. They are used to recognize patterns, make decisions, and improve over time. Let's explore how neural networks work, how they are trained, and some real-life examples. How Neural Networks Work A neural network is made up of layers of nodes, similar to neurons in the brain. Each node processes information and passes it to the next layer. The network learns by adjusting the connections between nodes based on the data it receives. Layers of Nodes: Neural networks have three main layers: the input layer, hidden layers, and the output layer. The input layer receives the data, the hidden layers process the data, and the output layer provides the final result. Each node in a layer is connected to nodes in the next layer. Processing Information: When data enters the network, each node in the input layer processes a small part of it. The nodes pass this information to the hidden layers, where it is further processed and refined. Finally, the output layer produces the result, which could be a decision, a classification, or a prediction. Learning Process: The network learns by adjusting the connections (called weights) between nodes. When the network makes a mistake, it adjusts the weights to reduce errors in future predictions. This process is called training. Training Neural Networks Training a neural network involves feeding it large amounts of data and adjusting the connections to improve its performance. For example, to train a network to recognize pictures of cats, you show it thousands of cat pictures. The network learns the patterns and features that define a cat. Data Feeding: The training process starts by feeding the network a large set of labeled data. For example, if you want to train a network to recognize handwritten digits, you would provide it with thousands of images of handwritten numbers, each labeled with the correct digit. Adjusting Weights: During training, the network makes predictions and compares them to the correct answers. If the prediction is wrong, the network adjusts the weights of the connections to improve accuracy. This process is repeated many times until the network learns to make accurate predictions. Validation and Testing: After training, the network is validated and tested using new data to ensure it can make accurate predictions on data it has never seen before. This helps to confirm that the network has learned correctly and can generalize its knowledge to new situations. Examples in Real Life Neural networks are used in many applications. They power voice assistants like Siri and Alexa, recognize faces in photos, and even help self-driving cars navigate. Voice Assistants: Voice assistants like Siri, Alexa, and Google Assistant use neural networks to understand and respond to spoken language. When you ask a question, the voice assistant processes your speech, converts it into text, and uses a neural network to understand the meaning and provide an answer. This involves recognizing patterns in speech and understanding context. Facial Recognition: Neural networks are used in facial recognition systems, such as those in smartphones and security cameras. These systems can identify individuals by analyzing facial features. For example, when you unlock your phone with your face, a neural network processes the image, recognizes your facial features, and compares them to the stored data to verify your identity. Self-Driving Cars: Self-driving cars use neural networks to navigate and make driving decisions. The car\u2019s sensors collect data from the surroundings, such as other vehicles, pedestrians, and road signs. The neural network processes this data in real-time, helping the car make decisions about steering, braking, and accelerating to ensure safe driving. Connection with AI and Decision Trees Neural networks and decision trees are both important tools in AI. While decision trees make decisions based on a series of questions, neural networks recognize complex patterns in data. Complementary Tools: In some AI systems, neural networks and decision trees are used together. For example, a neural network might be used to recognize patterns in images, and a decision tree could use this information to make decisions. This combination allows AI systems to benefit from the strengths of both methods. Big Data and Learning: Neural networks, like decision trees, rely on big data to learn and improve. The more data a neural network has, the better it can recognize patterns and make accurate predictions. This is why big data is crucial for training both neural networks and decision trees. Improving AI Systems: By combining neural networks with decision trees and big data, AI systems can become more powerful and accurate. For example, an AI system in healthcare might use a neural network to analyze medical images and a decision tree to diagnose diseases based on the results. Conclusion Neural networks are a key technology in AI, enabling systems to recognize patterns, make decisions, and learn from data. By understanding how they work and seeing real-life examples, we can appreciate their importance in various fields. Neural networks, along with decision trees and big data, form the foundation of modern AI, making it possible to create smart and efficient systems that improve our lives. Exercises What are the main layers of a neural network? A) Input layer, Output layer, Surface layer B) Input layer, Hidden layers, Output layer C) Output layer, Middle layer, End layer D) Start layer, Middle layer, End layer What is the purpose of the output layer in a neural network? A) To collect data B) To process data C) To provide the final result D) To adjust weights What is the process of adjusting connections in a neural network called? What technology do voice assistants like Siri and Alexa use to understand speech? Explain how self-driving cars use neural networks.","title":"Neural Networks"},{"location":"contents/unit01/c3_neural-networks.html#neural-networks","text":"Neural Networks are a key technology in AI that mimic the way the human brain works. They are used to recognize patterns, make decisions, and improve over time. Let's explore how neural networks work, how they are trained, and some real-life examples.","title":"Neural Networks"},{"location":"contents/unit01/c3_neural-networks.html#how-neural-networks-work","text":"A neural network is made up of layers of nodes, similar to neurons in the brain. Each node processes information and passes it to the next layer. The network learns by adjusting the connections between nodes based on the data it receives. Layers of Nodes: Neural networks have three main layers: the input layer, hidden layers, and the output layer. The input layer receives the data, the hidden layers process the data, and the output layer provides the final result. Each node in a layer is connected to nodes in the next layer. Processing Information: When data enters the network, each node in the input layer processes a small part of it. The nodes pass this information to the hidden layers, where it is further processed and refined. Finally, the output layer produces the result, which could be a decision, a classification, or a prediction. Learning Process: The network learns by adjusting the connections (called weights) between nodes. When the network makes a mistake, it adjusts the weights to reduce errors in future predictions. This process is called training.","title":"How Neural Networks Work"},{"location":"contents/unit01/c3_neural-networks.html#training-neural-networks","text":"Training a neural network involves feeding it large amounts of data and adjusting the connections to improve its performance. For example, to train a network to recognize pictures of cats, you show it thousands of cat pictures. The network learns the patterns and features that define a cat. Data Feeding: The training process starts by feeding the network a large set of labeled data. For example, if you want to train a network to recognize handwritten digits, you would provide it with thousands of images of handwritten numbers, each labeled with the correct digit. Adjusting Weights: During training, the network makes predictions and compares them to the correct answers. If the prediction is wrong, the network adjusts the weights of the connections to improve accuracy. This process is repeated many times until the network learns to make accurate predictions. Validation and Testing: After training, the network is validated and tested using new data to ensure it can make accurate predictions on data it has never seen before. This helps to confirm that the network has learned correctly and can generalize its knowledge to new situations.","title":"Training Neural Networks"},{"location":"contents/unit01/c3_neural-networks.html#examples-in-real-life","text":"Neural networks are used in many applications. They power voice assistants like Siri and Alexa, recognize faces in photos, and even help self-driving cars navigate. Voice Assistants: Voice assistants like Siri, Alexa, and Google Assistant use neural networks to understand and respond to spoken language. When you ask a question, the voice assistant processes your speech, converts it into text, and uses a neural network to understand the meaning and provide an answer. This involves recognizing patterns in speech and understanding context. Facial Recognition: Neural networks are used in facial recognition systems, such as those in smartphones and security cameras. These systems can identify individuals by analyzing facial features. For example, when you unlock your phone with your face, a neural network processes the image, recognizes your facial features, and compares them to the stored data to verify your identity. Self-Driving Cars: Self-driving cars use neural networks to navigate and make driving decisions. The car\u2019s sensors collect data from the surroundings, such as other vehicles, pedestrians, and road signs. The neural network processes this data in real-time, helping the car make decisions about steering, braking, and accelerating to ensure safe driving.","title":"Examples in Real Life"},{"location":"contents/unit01/c3_neural-networks.html#connection-with-ai-and-decision-trees","text":"Neural networks and decision trees are both important tools in AI. While decision trees make decisions based on a series of questions, neural networks recognize complex patterns in data. Complementary Tools: In some AI systems, neural networks and decision trees are used together. For example, a neural network might be used to recognize patterns in images, and a decision tree could use this information to make decisions. This combination allows AI systems to benefit from the strengths of both methods. Big Data and Learning: Neural networks, like decision trees, rely on big data to learn and improve. The more data a neural network has, the better it can recognize patterns and make accurate predictions. This is why big data is crucial for training both neural networks and decision trees. Improving AI Systems: By combining neural networks with decision trees and big data, AI systems can become more powerful and accurate. For example, an AI system in healthcare might use a neural network to analyze medical images and a decision tree to diagnose diseases based on the results.","title":"Connection with AI and Decision Trees"},{"location":"contents/unit01/c3_neural-networks.html#conclusion","text":"Neural networks are a key technology in AI, enabling systems to recognize patterns, make decisions, and learn from data. By understanding how they work and seeing real-life examples, we can appreciate their importance in various fields. Neural networks, along with decision trees and big data, form the foundation of modern AI, making it possible to create smart and efficient systems that improve our lives.","title":"Conclusion"},{"location":"contents/unit01/c3_neural-networks.html#exercises","text":"What are the main layers of a neural network? A) Input layer, Output layer, Surface layer B) Input layer, Hidden layers, Output layer C) Output layer, Middle layer, End layer D) Start layer, Middle layer, End layer What is the purpose of the output layer in a neural network? A) To collect data B) To process data C) To provide the final result D) To adjust weights What is the process of adjusting connections in a neural network called? What technology do voice assistants like Siri and Alexa use to understand speech? Explain how self-driving cars use neural networks.","title":"Exercises"},{"location":"contents/unit01/c4_expert-systems.html","text":"Expert Systems Expert Systems are a fundamental concept in Artificial Intelligence (AI) that mimic human expertise to solve complex problems. They are designed to make decisions and provide solutions based on a set of rules and knowledge provided by human experts. Let\u2019s explore how expert systems work, where they are applied, and their implications. Fundamentals of Expert Systems Expert systems are built on a knowledge base, which contains facts, rules, and reasoning mechanisms. These systems use this knowledge to emulate the decision-making process of a human expert in a specific domain. Here\u2019s how they typically operate: Knowledge Base: This is where all the information and rules about a particular subject are stored. For example, in a medical expert system, the knowledge base would contain information about symptoms, diseases, and treatments. Inference Engine: This component processes the information in the knowledge base and applies logical rules to draw conclusions or make recommendations. It mimics human reasoning by following a set of logical steps. User Interface: Users interact with the expert system through a user-friendly interface. They input data or answer questions posed by the system, which then uses this information to provide solutions or recommendations. How Expert Systems Work Imagine a medical diagnosis expert system. When a patient enters symptoms into the system, the inference engine matches these symptoms against the rules and data in the knowledge base. It then generates a list of possible diseases and recommended treatments based on the input. Example Scenario: If a patient inputs symptoms like fever, cough, and fatigue, the expert system might infer that they have a cold or flu based on its rules about common symptoms and diseases. Applications of Expert Systems Expert systems are used in various fields where expertise is crucial for decision-making: Healthcare: They assist doctors in diagnosing diseases and recommending treatments based on patient symptoms and medical history. Finance: They help financial advisors assess investment opportunities based on market trends and risk analysis. Engineering: They aid engineers in troubleshooting complex systems or designing solutions based on established engineering principles. Ethical and Social Implications While expert systems offer many benefits, such as increased efficiency and consistency in decision-making, they also raise ethical concerns: Accuracy and Reliability: It\u2019s critical that expert systems provide accurate recommendations. Errors in diagnosis or advice can have serious consequences for individuals. Responsibility: Who is accountable if an expert system makes a wrong diagnosis or recommendation? The responsibility might lie with the developers, the users, or both. Bias: If the knowledge base or rules are biased or incomplete, the expert system\u2019s decisions may reflect these biases, leading to unfair outcomes. Using Expert Systems in Simple Applications To understand how expert systems work practically, you can engage in guided activities where they interact with simplified expert systems. For instance: Scenario: you could use a basic expert system to diagnose fictional medical cases or troubleshoot simple technical problems. Learning Outcomes: By engaging with these systems, you can grasp the foundational concepts of AI, understand how rules and data interact in decision-making, and begin to appreciate the practical applications of expert systems in everyday scenarios. In conclusion, expert systems play a vital role in AI by leveraging human expertise to solve complex problems efficiently. Understanding their fundamentals, applications, and ethical implications prepares students to explore more advanced AI techniques and their impact on society responsibly.","title":"Expert Systems"},{"location":"contents/unit01/c4_expert-systems.html#expert-systems","text":"Expert Systems are a fundamental concept in Artificial Intelligence (AI) that mimic human expertise to solve complex problems. They are designed to make decisions and provide solutions based on a set of rules and knowledge provided by human experts. Let\u2019s explore how expert systems work, where they are applied, and their implications.","title":"Expert Systems"},{"location":"contents/unit01/c4_expert-systems.html#fundamentals-of-expert-systems","text":"Expert systems are built on a knowledge base, which contains facts, rules, and reasoning mechanisms. These systems use this knowledge to emulate the decision-making process of a human expert in a specific domain. Here\u2019s how they typically operate: Knowledge Base: This is where all the information and rules about a particular subject are stored. For example, in a medical expert system, the knowledge base would contain information about symptoms, diseases, and treatments. Inference Engine: This component processes the information in the knowledge base and applies logical rules to draw conclusions or make recommendations. It mimics human reasoning by following a set of logical steps. User Interface: Users interact with the expert system through a user-friendly interface. They input data or answer questions posed by the system, which then uses this information to provide solutions or recommendations.","title":"Fundamentals of Expert Systems"},{"location":"contents/unit01/c4_expert-systems.html#how-expert-systems-work","text":"Imagine a medical diagnosis expert system. When a patient enters symptoms into the system, the inference engine matches these symptoms against the rules and data in the knowledge base. It then generates a list of possible diseases and recommended treatments based on the input. Example Scenario: If a patient inputs symptoms like fever, cough, and fatigue, the expert system might infer that they have a cold or flu based on its rules about common symptoms and diseases.","title":"How Expert Systems Work"},{"location":"contents/unit01/c4_expert-systems.html#applications-of-expert-systems","text":"Expert systems are used in various fields where expertise is crucial for decision-making: Healthcare: They assist doctors in diagnosing diseases and recommending treatments based on patient symptoms and medical history. Finance: They help financial advisors assess investment opportunities based on market trends and risk analysis. Engineering: They aid engineers in troubleshooting complex systems or designing solutions based on established engineering principles.","title":"Applications of Expert Systems"},{"location":"contents/unit01/c4_expert-systems.html#ethical-and-social-implications","text":"While expert systems offer many benefits, such as increased efficiency and consistency in decision-making, they also raise ethical concerns: Accuracy and Reliability: It\u2019s critical that expert systems provide accurate recommendations. Errors in diagnosis or advice can have serious consequences for individuals. Responsibility: Who is accountable if an expert system makes a wrong diagnosis or recommendation? The responsibility might lie with the developers, the users, or both. Bias: If the knowledge base or rules are biased or incomplete, the expert system\u2019s decisions may reflect these biases, leading to unfair outcomes.","title":"Ethical and Social Implications"},{"location":"contents/unit01/c4_expert-systems.html#using-expert-systems-in-simple-applications","text":"To understand how expert systems work practically, you can engage in guided activities where they interact with simplified expert systems. For instance: Scenario: you could use a basic expert system to diagnose fictional medical cases or troubleshoot simple technical problems. Learning Outcomes: By engaging with these systems, you can grasp the foundational concepts of AI, understand how rules and data interact in decision-making, and begin to appreciate the practical applications of expert systems in everyday scenarios. In conclusion, expert systems play a vital role in AI by leveraging human expertise to solve complex problems efficiently. Understanding their fundamentals, applications, and ethical implications prepares students to explore more advanced AI techniques and their impact on society responsibly.","title":"Using Expert Systems in Simple Applications"},{"location":"contents/unit01/c4_machine-learning.html","text":"Machine Learning Machine Learning (ML) is a branch of Artificial Intelligence (AI) that enables computers to learn from data and improve their performance without being explicitly programmed. It is widely used in various applications to make predictions, recognize patterns, and automate decision-making processes. Let\u2019s explore the fundamentals of machine learning, its applications, and the ethical considerations associated with its use. Fundamentals of Machine Learning Machine learning algorithms learn from data by identifying patterns and making decisions based on statistical analysis. Here are key concepts: Training Data: Machine learning models are trained using large datasets that contain examples of inputs (features) and their corresponding outputs (labels or predictions). Types of Machine Learning: There are three main types of machine learning: Supervised Learning: The model learns from labeled data, where it is trained with input-output pairs (e.g., predicting housing prices based on features like size and location). Unsupervised Learning: The model learns from unlabeled data to discover patterns and relationships (e.g., clustering similar customer behavior). Reinforcement Learning: The model learns through trial and error by interacting with an environment and receiving feedback (e.g., training a robot to navigate a maze). Algorithm Training: During training, the machine learning algorithm adjusts its internal parameters (weights) to minimize errors and improve accuracy in predicting outputs for new, unseen data. How Machine Learning Works To understand its function better, consider an example of training a machine learning model to classify images of animals: Data Preparation: The model is trained using a dataset of animal images labeled with their respective species (e.g., dogs, cats, birds). Feature Extraction: The model analyzes features such as shapes, colors, and textures in the images to differentiate between different animal species. Model Training: Using supervised learning, the model adjusts its parameters based on labeled examples to correctly classify new images it hasn\u2019t seen before. Applications of Machine Learning Machine learning is applied in various fields due to its ability to analyze vast amounts of data and derive insights: Healthcare: ML models assist in diagnosing diseases from medical images, predicting patient outcomes, and personalizing treatment plans. Finance: They are used for credit scoring, fraud detection, and stock market predictions based on historical data. Recommendation Systems: ML powers recommendation engines in e-commerce and streaming platforms to suggest products or content based on user preferences. Ethical and Social Implications While machine learning offers significant benefits, it also presents ethical challenges: Bias and Fairness: ML algorithms can perpetuate biases present in training data, leading to unfair decisions (e.g., biased hiring practices in automated systems). Privacy Concerns: ML models trained on personal data raise concerns about privacy and data security, especially in healthcare and finance. Impact on Employment: Automation driven by ML may lead to job displacement in certain industries, impacting the workforce. Using Machine Learning in Simple Applications You can explore the fascinating world of machine learning through hands-on activities that illustrate its practical applications. For example, imagine using a basic machine learning model to predict the weather. By analyzing historical data on temperature and humidity, you can train the model to forecast future weather conditions. This activity allows you to see firsthand how machine learning algorithms can analyze data patterns to make predictions. Participating in such activities offers valuable learning outcomes: Grasping Foundational ML Concepts: You'll understand the fundamental principles of machine learning, such as training data, algorithms, and model predictions. Learning Prediction Algorithms: You'll learn how algorithms process data to forecast outcomes, whether it's predicting the weather or making recommendations based on user preferences. Appreciating Real-World Applications: By engaging with machine learning models, you'll appreciate how these technologies are used in various fields to solve complex problems, from healthcare to finance and beyond. These activities not only enhance your understanding of artificial intelligence but also prepare you to think critically about its ethical implications and societal impact. Embrace the opportunity to explore machine learning\u2014it's a pivotal technology shaping the future! In conclusion, machine learning represents a powerful tool in AI, enabling computers to learn and make decisions from data. Understanding its fundamentals, applications, and ethical implications prepares students to navigate the complexities of AI responsibly and innovatively in their future endeavors.","title":"Machine Learning"},{"location":"contents/unit01/c4_machine-learning.html#machine-learning","text":"Machine Learning (ML) is a branch of Artificial Intelligence (AI) that enables computers to learn from data and improve their performance without being explicitly programmed. It is widely used in various applications to make predictions, recognize patterns, and automate decision-making processes. Let\u2019s explore the fundamentals of machine learning, its applications, and the ethical considerations associated with its use.","title":"Machine Learning"},{"location":"contents/unit01/c4_machine-learning.html#fundamentals-of-machine-learning","text":"Machine learning algorithms learn from data by identifying patterns and making decisions based on statistical analysis. Here are key concepts: Training Data: Machine learning models are trained using large datasets that contain examples of inputs (features) and their corresponding outputs (labels or predictions). Types of Machine Learning: There are three main types of machine learning: Supervised Learning: The model learns from labeled data, where it is trained with input-output pairs (e.g., predicting housing prices based on features like size and location). Unsupervised Learning: The model learns from unlabeled data to discover patterns and relationships (e.g., clustering similar customer behavior). Reinforcement Learning: The model learns through trial and error by interacting with an environment and receiving feedback (e.g., training a robot to navigate a maze). Algorithm Training: During training, the machine learning algorithm adjusts its internal parameters (weights) to minimize errors and improve accuracy in predicting outputs for new, unseen data.","title":"Fundamentals of Machine Learning"},{"location":"contents/unit01/c4_machine-learning.html#how-machine-learning-works","text":"To understand its function better, consider an example of training a machine learning model to classify images of animals: Data Preparation: The model is trained using a dataset of animal images labeled with their respective species (e.g., dogs, cats, birds). Feature Extraction: The model analyzes features such as shapes, colors, and textures in the images to differentiate between different animal species. Model Training: Using supervised learning, the model adjusts its parameters based on labeled examples to correctly classify new images it hasn\u2019t seen before.","title":"How Machine Learning Works"},{"location":"contents/unit01/c4_machine-learning.html#applications-of-machine-learning","text":"Machine learning is applied in various fields due to its ability to analyze vast amounts of data and derive insights: Healthcare: ML models assist in diagnosing diseases from medical images, predicting patient outcomes, and personalizing treatment plans. Finance: They are used for credit scoring, fraud detection, and stock market predictions based on historical data. Recommendation Systems: ML powers recommendation engines in e-commerce and streaming platforms to suggest products or content based on user preferences.","title":"Applications of Machine Learning"},{"location":"contents/unit01/c4_machine-learning.html#ethical-and-social-implications","text":"While machine learning offers significant benefits, it also presents ethical challenges: Bias and Fairness: ML algorithms can perpetuate biases present in training data, leading to unfair decisions (e.g., biased hiring practices in automated systems). Privacy Concerns: ML models trained on personal data raise concerns about privacy and data security, especially in healthcare and finance. Impact on Employment: Automation driven by ML may lead to job displacement in certain industries, impacting the workforce.","title":"Ethical and Social Implications"},{"location":"contents/unit01/c4_machine-learning.html#using-machine-learning-in-simple-applications","text":"You can explore the fascinating world of machine learning through hands-on activities that illustrate its practical applications. For example, imagine using a basic machine learning model to predict the weather. By analyzing historical data on temperature and humidity, you can train the model to forecast future weather conditions. This activity allows you to see firsthand how machine learning algorithms can analyze data patterns to make predictions. Participating in such activities offers valuable learning outcomes: Grasping Foundational ML Concepts: You'll understand the fundamental principles of machine learning, such as training data, algorithms, and model predictions. Learning Prediction Algorithms: You'll learn how algorithms process data to forecast outcomes, whether it's predicting the weather or making recommendations based on user preferences. Appreciating Real-World Applications: By engaging with machine learning models, you'll appreciate how these technologies are used in various fields to solve complex problems, from healthcare to finance and beyond. These activities not only enhance your understanding of artificial intelligence but also prepare you to think critically about its ethical implications and societal impact. Embrace the opportunity to explore machine learning\u2014it's a pivotal technology shaping the future! In conclusion, machine learning represents a powerful tool in AI, enabling computers to learn and make decisions from data. Understanding its fundamentals, applications, and ethical implications prepares students to navigate the complexities of AI responsibly and innovatively in their future endeavors.","title":"Using Machine Learning in Simple Applications"},{"location":"contents/unit01/c4_neural-networks-tech.html","text":"Neural Networks Neural Networks are a fundamental technology in Artificial Intelligence (AI) that mimics the human brain's ability to learn and recognize patterns. They are used in various applications to make decisions, classify data, and improve accuracy over time. Let's explore how neural networks work, where they are applied, and their ethical implications. Fundamentals of Neural Networks Neural networks are composed of layers of nodes, similar to neurons in the brain. Each node processes information and passes it to the next layer. Here\u2019s how they typically operate: Layers and Nodes: Neural networks consist of an input layer where data enters, hidden layers that process the data, and an output layer that provides the final result. Nodes within each layer are interconnected, and each connection has a weight that adjusts as the network learns. Processing Data: When data enters the network, it is processed through the layers of nodes. Each node applies a mathematical function to the input data, transforming it into a form that can be understood by the next layer. This process continues until the final output layer produces a result, such as a classification or prediction. How Neural Networks Work To understand their function better, consider an example of training a neural network to recognize handwritten digits: Training Process: The network is fed with thousands of images of handwritten digits, each labeled with the correct digit. During training, it adjusts the weights of connections between nodes to minimize errors in its predictions. This iterative process improves the network's ability to accurately recognize digits it has not seen before. Learning Patterns: Neural networks learn by recognizing patterns in data. For instance, when analyzing images, they identify features like edges, shapes, and textures that distinguish one object from another. Applications of Neural Networks Neural networks are applied in diverse fields due to their ability to handle complex tasks: Image and Speech Recognition: They power applications like facial recognition in smartphones and voice assistants that understand and respond to spoken commands. Medical Diagnosis: In healthcare, neural networks assist in diagnosing diseases by analyzing medical images and patient data to identify patterns indicative of specific conditions. Autonomous Vehicles: Self-driving cars use neural networks to interpret sensor data and make decisions about steering, braking, and navigating traffic. Ethical and Social Implications Despite their benefits, neural networks raise ethical concerns: Privacy: Applications like facial recognition raise concerns about privacy and surveillance, as they can track individuals without their consent. Bias: If trained on biased data, neural networks may produce unfair outcomes, perpetuating societal inequalities. Job Displacement: Automation driven by AI, including neural networks, may lead to job losses in certain sectors. Using Neural Networks in Simple Applications You can engage with neural networks through guided activities to understand their practical applications: Activity Example: You could use a simplified neural network to classify images of animals based on their features, demonstrating how the network learns to distinguish between different types of animals. Learning Outcomes: By interacting with these systems, you can develop a foundational understanding of AI concepts, learn how neural networks process information, and begin to appreciate their role in solving real-world problems. In conclusion, neural networks represent a powerful tool in AI, capable of learning from data and making decisions akin to human cognition. Understanding their fundamentals, applications, and ethical considerations prepares students to navigate the evolving landscape of AI responsibly and innovatively.","title":"Neural Networks"},{"location":"contents/unit01/c4_neural-networks-tech.html#neural-networks","text":"Neural Networks are a fundamental technology in Artificial Intelligence (AI) that mimics the human brain's ability to learn and recognize patterns. They are used in various applications to make decisions, classify data, and improve accuracy over time. Let's explore how neural networks work, where they are applied, and their ethical implications.","title":"Neural Networks"},{"location":"contents/unit01/c4_neural-networks-tech.html#fundamentals-of-neural-networks","text":"Neural networks are composed of layers of nodes, similar to neurons in the brain. Each node processes information and passes it to the next layer. Here\u2019s how they typically operate: Layers and Nodes: Neural networks consist of an input layer where data enters, hidden layers that process the data, and an output layer that provides the final result. Nodes within each layer are interconnected, and each connection has a weight that adjusts as the network learns. Processing Data: When data enters the network, it is processed through the layers of nodes. Each node applies a mathematical function to the input data, transforming it into a form that can be understood by the next layer. This process continues until the final output layer produces a result, such as a classification or prediction.","title":"Fundamentals of Neural Networks"},{"location":"contents/unit01/c4_neural-networks-tech.html#how-neural-networks-work","text":"To understand their function better, consider an example of training a neural network to recognize handwritten digits: Training Process: The network is fed with thousands of images of handwritten digits, each labeled with the correct digit. During training, it adjusts the weights of connections between nodes to minimize errors in its predictions. This iterative process improves the network's ability to accurately recognize digits it has not seen before. Learning Patterns: Neural networks learn by recognizing patterns in data. For instance, when analyzing images, they identify features like edges, shapes, and textures that distinguish one object from another.","title":"How Neural Networks Work"},{"location":"contents/unit01/c4_neural-networks-tech.html#applications-of-neural-networks","text":"Neural networks are applied in diverse fields due to their ability to handle complex tasks: Image and Speech Recognition: They power applications like facial recognition in smartphones and voice assistants that understand and respond to spoken commands. Medical Diagnosis: In healthcare, neural networks assist in diagnosing diseases by analyzing medical images and patient data to identify patterns indicative of specific conditions. Autonomous Vehicles: Self-driving cars use neural networks to interpret sensor data and make decisions about steering, braking, and navigating traffic.","title":"Applications of Neural Networks"},{"location":"contents/unit01/c4_neural-networks-tech.html#ethical-and-social-implications","text":"Despite their benefits, neural networks raise ethical concerns: Privacy: Applications like facial recognition raise concerns about privacy and surveillance, as they can track individuals without their consent. Bias: If trained on biased data, neural networks may produce unfair outcomes, perpetuating societal inequalities. Job Displacement: Automation driven by AI, including neural networks, may lead to job losses in certain sectors.","title":"Ethical and Social Implications"},{"location":"contents/unit01/c4_neural-networks-tech.html#using-neural-networks-in-simple-applications","text":"You can engage with neural networks through guided activities to understand their practical applications: Activity Example: You could use a simplified neural network to classify images of animals based on their features, demonstrating how the network learns to distinguish between different types of animals. Learning Outcomes: By interacting with these systems, you can develop a foundational understanding of AI concepts, learn how neural networks process information, and begin to appreciate their role in solving real-world problems. In conclusion, neural networks represent a powerful tool in AI, capable of learning from data and making decisions akin to human cognition. Understanding their fundamentals, applications, and ethical considerations prepares students to navigate the evolving landscape of AI responsibly and innovatively.","title":"Using Neural Networks in Simple Applications"},{"location":"contents/unit01/c5_auto-inf-processing.html","text":"","title":"C5 auto inf processing"},{"location":"contents/unit01/exercises-1-1.html","text":"Exercises","title":"Exercises"},{"location":"contents/unit01/exercises-1-1.html#exercises","text":"","title":"Exercises"},{"location":"contents/unit01/glossary-ud01.html","text":"Glossary","title":"Glossary"},{"location":"contents/unit01/glossary-ud01.html#glossary","text":"","title":"Glossary"},{"location":"contents/unit01/intro.html","text":"Artificial Intelligence","title":"Artificial Intelligence"},{"location":"contents/unit01/intro.html#artificial-intelligence","text":"","title":"Artificial Intelligence"},{"location":"contents/unit01/neural_deeplearn.html","text":"Neural Networks and Deep Learning Introduction Neural networks are computer programs inspired by the human brain. They use artificial neurons to recognize patterns and learn from data. For example, a network can distinguish between pictures of cats and non-cats after seeing many examples. Over time, it gets better at identifying patterns, like recognizing fruits or understanding speech on a phone. Deep learning is a more advanced type of neural network with many layers, allowing computers to solve complex problems, like self-driving cars or translation apps. A famous example is AlphaGo, a program that learned to play the challenging board game Go, even defeating the world champion in 2016. Neural Networks A neural network is a type of computer program that is inspired by the human brain. Just like our brain has neurons (tiny cells that send information), a neural network has artificial neurons that help it learn and make decisions. Imagine you are trying to recognize a picture of a cat. In a neural network, you give the computer many pictures of cats and non-cats. The network will then learn the difference between the two by looking at patterns in the images, such as shapes, colors, and edges. Let's say you want the computer to recognize different fruits. You would show it many images of apples, bananas, and oranges. At first, the computer might make mistakes, like calling an apple a banana. But over time, it learns which patterns mean \"apple\" and which mean \"banana.\" The more examples it sees, the better it gets. This is how a neural network learns from data. A neural network is a computer program that uses artificial neurons to recognize patterns and make decisions based on learned data. A real-life example is voice recognition on your phone. When you talk to your phone, the neural network tries to understand what you are saying by comparing your voice to many other examples it has learned before. It\u2019s like training a pet: the more you train, the better it understands. Neural networks help computers get smarter by learning from examples, just like we do! Deep Learning Deep learning is a special type of learning that uses many layers of neural networks to solve more complicated problems. Think of it like a big sandwich. Each layer in the network is like a piece of bread, cheese, or lettuce. When you put many layers together, you get a deep learning model, just like a big sandwich! Each layer in deep learning looks at the information differently. The first layer might see basic shapes, like lines or circles. The next layer combines these shapes into more complex patterns, like faces or objects. By the time the information reaches the last layer, the computer can understand what the whole picture shows, like a dog, car, or even a specific person. Deep learning is an advanced type of machine learning using multiple neural network layers to recognize complex patterns and solve difficult problems. Deep learning is used in self-driving cars . These cars have cameras that take pictures of the road. The deep learning model analyzes the pictures to recognize traffic signs, pedestrians, and other cars . It uses all this information to decide whether to stop, turn, or keep driving. Another example is translation apps that can change speech from one language to another. Deep learning helps these apps understand the words you speak, translate them, and say them back in a different language. With deep learning, computers can understand things that were too complex before! Neural Networks and Deep Learning: Crash Course AI In this video, the speaker explains how to build an artificial neural network using the artificial neuron from a previous lesson. The focus is on why neural networks excel at complex tasks, like image recognition, due to their use of hidden layers. The video covers the mathematical principles behind these networks and highlights how multiple hidden layers enable deep learning. The speaker emphasizes the power of neural networks in detecting patterns in data, which has made them a dominant technology in modern machine learning. Neural Networks, Deep Learning, and AlphaGo One of the most famous examples of neural networks and deep learning is the computer program called AlphaGo created by the company DeepMind . AlphaGo was designed to play the ancient board game called Go . Go is much more complex than chess because it has many more possible moves. In fact, there are more possible positions in Go than atoms in the universe! AlphaGo , a DeepMind AI, mastered the complex game of Go using neural networks , even defeating the world champion in 2016. AlphaGo used neural networks to learn how to play the game by studying many matches played by humans. It also played millions of games against itself to get better. Deep learning helped it understand the board and decide the best moves. The amazing thing is that AlphaGo became so good that it defeated the world champion of Go in 2016. This was a big step forward for artificial intelligence because it showed that computers could learn to do very complex tasks that even humans find challenging. Today, similar techniques are used in other areas, like medical research, where AI helps doctors find signs of diseases in X-ray images. Thanks to neural networks and deep learning, computers can now solve problems that were once thought impossible!","title":"Neural Networks and Deep Learning"},{"location":"contents/unit01/neural_deeplearn.html#neural-networks-and-deep-learning","text":"","title":"Neural Networks and Deep Learning"},{"location":"contents/unit01/neural_deeplearn.html#introduction","text":"Neural networks are computer programs inspired by the human brain. They use artificial neurons to recognize patterns and learn from data. For example, a network can distinguish between pictures of cats and non-cats after seeing many examples. Over time, it gets better at identifying patterns, like recognizing fruits or understanding speech on a phone. Deep learning is a more advanced type of neural network with many layers, allowing computers to solve complex problems, like self-driving cars or translation apps. A famous example is AlphaGo, a program that learned to play the challenging board game Go, even defeating the world champion in 2016.","title":"Introduction"},{"location":"contents/unit01/neural_deeplearn.html#neural-networks","text":"A neural network is a type of computer program that is inspired by the human brain. Just like our brain has neurons (tiny cells that send information), a neural network has artificial neurons that help it learn and make decisions. Imagine you are trying to recognize a picture of a cat. In a neural network, you give the computer many pictures of cats and non-cats. The network will then learn the difference between the two by looking at patterns in the images, such as shapes, colors, and edges. Let's say you want the computer to recognize different fruits. You would show it many images of apples, bananas, and oranges. At first, the computer might make mistakes, like calling an apple a banana. But over time, it learns which patterns mean \"apple\" and which mean \"banana.\" The more examples it sees, the better it gets. This is how a neural network learns from data. A neural network is a computer program that uses artificial neurons to recognize patterns and make decisions based on learned data. A real-life example is voice recognition on your phone. When you talk to your phone, the neural network tries to understand what you are saying by comparing your voice to many other examples it has learned before. It\u2019s like training a pet: the more you train, the better it understands. Neural networks help computers get smarter by learning from examples, just like we do!","title":"Neural Networks"},{"location":"contents/unit01/neural_deeplearn.html#deep-learning","text":"Deep learning is a special type of learning that uses many layers of neural networks to solve more complicated problems. Think of it like a big sandwich. Each layer in the network is like a piece of bread, cheese, or lettuce. When you put many layers together, you get a deep learning model, just like a big sandwich! Each layer in deep learning looks at the information differently. The first layer might see basic shapes, like lines or circles. The next layer combines these shapes into more complex patterns, like faces or objects. By the time the information reaches the last layer, the computer can understand what the whole picture shows, like a dog, car, or even a specific person. Deep learning is an advanced type of machine learning using multiple neural network layers to recognize complex patterns and solve difficult problems. Deep learning is used in self-driving cars . These cars have cameras that take pictures of the road. The deep learning model analyzes the pictures to recognize traffic signs, pedestrians, and other cars . It uses all this information to decide whether to stop, turn, or keep driving. Another example is translation apps that can change speech from one language to another. Deep learning helps these apps understand the words you speak, translate them, and say them back in a different language. With deep learning, computers can understand things that were too complex before!","title":"Deep Learning"},{"location":"contents/unit01/neural_deeplearn.html#neural-networks-and-deep-learning-crash-course-ai","text":"In this video, the speaker explains how to build an artificial neural network using the artificial neuron from a previous lesson. The focus is on why neural networks excel at complex tasks, like image recognition, due to their use of hidden layers. The video covers the mathematical principles behind these networks and highlights how multiple hidden layers enable deep learning. The speaker emphasizes the power of neural networks in detecting patterns in data, which has made them a dominant technology in modern machine learning.","title":"Neural Networks and Deep Learning: Crash Course AI"},{"location":"contents/unit01/neural_deeplearn.html#neural-networks-deep-learning-and-alphago","text":"One of the most famous examples of neural networks and deep learning is the computer program called AlphaGo created by the company DeepMind . AlphaGo was designed to play the ancient board game called Go . Go is much more complex than chess because it has many more possible moves. In fact, there are more possible positions in Go than atoms in the universe! AlphaGo , a DeepMind AI, mastered the complex game of Go using neural networks , even defeating the world champion in 2016. AlphaGo used neural networks to learn how to play the game by studying many matches played by humans. It also played millions of games against itself to get better. Deep learning helped it understand the board and decide the best moves. The amazing thing is that AlphaGo became so good that it defeated the world champion of Go in 2016. This was a big step forward for artificial intelligence because it showed that computers could learn to do very complex tasks that even humans find challenging. Today, similar techniques are used in other areas, like medical research, where AI helps doctors find signs of diseases in X-ray images. Thanks to neural networks and deep learning, computers can now solve problems that were once thought impossible!","title":"Neural Networks, Deep Learning, and AlphaGo"},{"location":"contents/unit01/neural_networks.html","text":"Neural Networks","title":"Neural Networks"},{"location":"contents/unit01/neural_networks.html#neural-networks","text":"","title":"Neural Networks"},{"location":"contents/unit01/terms.html","text":"Artificial Intelligence (AI) terms AI-Powered Assistant An AI-powered assistant is a virtual assistant that uses artificial intelligence (AI) technology to understand and respond to user requests. AI-powered assistants can be used to perform tasks such as scheduling appointments, setting reminders, providing information, and answering questions. Artificial Intelligence Artificial Intelligence (AI) refers to the simulation of human intelligence in machines that are programmed to perform tasks that would typically require human intelligence, such as reasoning, learning, perception, and problem-solving. Artificial intelligence is everywhere and it's already making a huge impact on our lives. It's autocompleting texts on our cellphones, telling us which videos to watch on YouTube, beating us at video games, recognizing us in photos, ordering products in stores, driving cars, scheduling appointments, you get the idea. Today we're going to explain what AI can (and can't) do right now and explain how we got to where we are today. Chatbot A chatbot is an AI-powered computer program designed to simulate conversation with human users, typically through text messages or voice interactions. Chatbots can be used for customer service, sales, marketing, and other applications. By now most of us have interacted with a chatbot in one form or another, but exactly how do they work? Do chatbots only operate on websites, or are there other mediums that a chatbot can facilitate a conversation? And why would anyone want to use a chatbot? In this lightboard video, Morgan Carroll with IBM Cloud, answers these questions and many more as she walks through an example of Floral company using a chatbot and shows first hand what a chatbot is, how it works, and why you may want to use one for your business. Do you ever lay awake at night wondering what, exactly, a chatbot is? Or how chatbots work? Or even if bots will steal customer service representatives\u2019 jobs? Well, you can rest easy because we\u2019re going to answer all your questions. Computer Vision Computer Vision is a field of artificial intelligence that focuses on enabling machines to interpret and understand visual data from the world around them, such as images and videos. Today we\u2019re going to talk about how computers see. We\u2019ve long known that our digital cameras and smartphones can take incredibly detailed images, but taking pictures is not quite the same thing. For the past half-century, computer scientists have been working to help our computing devices understand the imagery they capture, leading to advancements everywhere, from tracking hands and whole bodies, biometrics to unlock our phones, and eventually giving autonomous cars the ability to understand their surroundings. Decision Tree A decision tree is a graphical representation of a decision-making process that uses a tree-like model of decisions and their possible consequences. Decision trees are often used in machine learning and artificial intelligence applications. Decision tree organizes a series rules in a tree structure. It is one of the most practical methods for non-parametric supervised learning. Our goal in this video is to demonstrate how to create a decision tree that predicts the value of a target by learning decision rules inferred from the training data. Deep Learning Deep learning is a subset of machine learning that involves training artificial neural networks with large amounts of data to perform complex tasks, such as image and speech recognition. Expert System An expert system is an AI-powered system that uses a knowledge base and reasoning algorithms to simulate the decision-making abilities of a human expert in a particular domain. Machine Learning Machine learning is a subset of artificial intelligence that involves training computer programs to learn from data and improve their performance on specific tasks over time, without being explicitly programmed to do so. In this video, you\u2019ll learn more about the evolution of machine learning and its impact on daily life. Narrow AI Narrow AI refers to artificial intelligence systems that are designed to perform a specific task or set of tasks, rather than exhibiting general intelligence. Natural Language Generation Natural Language Generation is a field of artificial intelligence that focuses on using machine learning algorithms to automatically generate natural language text from structured data or other sources. Natural Language Processing Natural Language Processing is a field of artificial intelligence that focuses on enabling computers to understand, interpret, and generate human language. We\u2019re going to talk about how computers understand speech and speak themselves. As computers play an increasing role in our daily lives there has been an growing demand for voice user interfaces, but speech is also terribly complicated. Vocabularies are diverse, sentence structures can often dictate the meaning of certain words, and computers also have to deal with accents, mispronunciations, and many common linguistic faux pas. The field of Natural Language Processing, or NLP, attempts to solve these problems, with a number of techniques we\u2019ll discuss today. And even though our virtual assistants like Siri, Alexa, Google Home, Bixby, and Cortana have come a long way from the first speech processing and synthesis models, there is still much room for improvement. Neural Network A neural network is a type of artificial intelligence algorithm that is modeled after the structure and function of the human brain. Neural networks are often used in deep learning applications. We're going to combine the artificial neuron we created last week into an artificial neural network. Artificial neural networks are better than other methods for more complicated tasks like image recognition, and the key to their success is their hidden layers. We'll talk about how the math of these networks work and how using many hidden layers allows us to do deep learning. Neural networks are really powerful at finding patterns in data which is why they've become one of the most dominant machine learning technologies used today. Reinforcement Learning Reinforcement learning is a type of machine learning that involves training an algorithm to make decisions based on feedback it receives from its environment. Supervised Learning Supervised learning is a type of machine learning that involves training an algorithm using labeled data, where the desired output is known. Today we\u2019re going to teach John Green Bot how to tell the difference between donuts and bagels using supervised learning! Supervised learning is the process of learning WITH training labels, and is the most widely used kind of learning with it comes to AI - helping with stuff like tagging photos on Facebook and filtering spam from your email. We\u2019re going to start small today and show how just a single neuron (or perceptron) is constructed, and explain the differences between precision and recall. Next week, we'll build our first neural network. Training Data Training data is a set of data used to train machine learning algorithms. Training data typically consists of input data and corresponding output data, which is used to teach the algorithm how to make predictions. Turing Test The Turing Test is a test of a machine's ability to exhibit intelligent behavior equivalent to, or indistinguishable from, that of a human. What is consciousness? Can an artificial machine really think? For many, these have been vital considerations for the future of artificial intelligence. But British computer scientist Alan Turing decided to disregard all these questions in favor of a much simpler one: Can a computer talk like a human? Alex Gendler describes the Turing test and details some of its surprising results. Lesson by Alex Gendler, animation by Patrick Smith. Unsupervised Learning Unsupervised learning is a type of machine learning that involves training an algorithm using unlabeled data, where the desired output is unknown. The algorithm must find patterns and relationships in the data on its own. We\u2019re moving on from artificial intelligence that needs training labels, called Supervised Learning, to Unsupervised Learning which is learning by finding patterns in the world. We\u2019ll focus on the performing unsupervised clustering, specifically K-means clustering, and show you how we can extract meaningful patterns from data even when you don't know where those patterns are.","title":"Terms"},{"location":"contents/unit01/terms.html#artificial-intelligence-ai-terms","text":"","title":"Artificial Intelligence (AI) terms"},{"location":"contents/unit01/terms.html#ai-powered-assistant","text":"An AI-powered assistant is a virtual assistant that uses artificial intelligence (AI) technology to understand and respond to user requests. AI-powered assistants can be used to perform tasks such as scheduling appointments, setting reminders, providing information, and answering questions.","title":"AI-Powered Assistant"},{"location":"contents/unit01/terms.html#artificial-intelligence","text":"Artificial Intelligence (AI) refers to the simulation of human intelligence in machines that are programmed to perform tasks that would typically require human intelligence, such as reasoning, learning, perception, and problem-solving. Artificial intelligence is everywhere and it's already making a huge impact on our lives. It's autocompleting texts on our cellphones, telling us which videos to watch on YouTube, beating us at video games, recognizing us in photos, ordering products in stores, driving cars, scheduling appointments, you get the idea. Today we're going to explain what AI can (and can't) do right now and explain how we got to where we are today.","title":"Artificial Intelligence"},{"location":"contents/unit01/terms.html#chatbot","text":"A chatbot is an AI-powered computer program designed to simulate conversation with human users, typically through text messages or voice interactions. Chatbots can be used for customer service, sales, marketing, and other applications. By now most of us have interacted with a chatbot in one form or another, but exactly how do they work? Do chatbots only operate on websites, or are there other mediums that a chatbot can facilitate a conversation? And why would anyone want to use a chatbot? In this lightboard video, Morgan Carroll with IBM Cloud, answers these questions and many more as she walks through an example of Floral company using a chatbot and shows first hand what a chatbot is, how it works, and why you may want to use one for your business. Do you ever lay awake at night wondering what, exactly, a chatbot is? Or how chatbots work? Or even if bots will steal customer service representatives\u2019 jobs? Well, you can rest easy because we\u2019re going to answer all your questions.","title":"Chatbot"},{"location":"contents/unit01/terms.html#computer-vision","text":"Computer Vision is a field of artificial intelligence that focuses on enabling machines to interpret and understand visual data from the world around them, such as images and videos. Today we\u2019re going to talk about how computers see. We\u2019ve long known that our digital cameras and smartphones can take incredibly detailed images, but taking pictures is not quite the same thing. For the past half-century, computer scientists have been working to help our computing devices understand the imagery they capture, leading to advancements everywhere, from tracking hands and whole bodies, biometrics to unlock our phones, and eventually giving autonomous cars the ability to understand their surroundings.","title":"Computer Vision"},{"location":"contents/unit01/terms.html#decision-tree","text":"A decision tree is a graphical representation of a decision-making process that uses a tree-like model of decisions and their possible consequences. Decision trees are often used in machine learning and artificial intelligence applications. Decision tree organizes a series rules in a tree structure. It is one of the most practical methods for non-parametric supervised learning. Our goal in this video is to demonstrate how to create a decision tree that predicts the value of a target by learning decision rules inferred from the training data.","title":"Decision Tree"},{"location":"contents/unit01/terms.html#deep-learning","text":"Deep learning is a subset of machine learning that involves training artificial neural networks with large amounts of data to perform complex tasks, such as image and speech recognition.","title":"Deep Learning"},{"location":"contents/unit01/terms.html#expert-system","text":"An expert system is an AI-powered system that uses a knowledge base and reasoning algorithms to simulate the decision-making abilities of a human expert in a particular domain.","title":"Expert System"},{"location":"contents/unit01/terms.html#machine-learning","text":"Machine learning is a subset of artificial intelligence that involves training computer programs to learn from data and improve their performance on specific tasks over time, without being explicitly programmed to do so. In this video, you\u2019ll learn more about the evolution of machine learning and its impact on daily life.","title":"Machine Learning"},{"location":"contents/unit01/terms.html#narrow-ai","text":"Narrow AI refers to artificial intelligence systems that are designed to perform a specific task or set of tasks, rather than exhibiting general intelligence.","title":"Narrow AI"},{"location":"contents/unit01/terms.html#natural-language-generation","text":"Natural Language Generation is a field of artificial intelligence that focuses on using machine learning algorithms to automatically generate natural language text from structured data or other sources.","title":"Natural Language Generation"},{"location":"contents/unit01/terms.html#natural-language-processing","text":"Natural Language Processing is a field of artificial intelligence that focuses on enabling computers to understand, interpret, and generate human language. We\u2019re going to talk about how computers understand speech and speak themselves. As computers play an increasing role in our daily lives there has been an growing demand for voice user interfaces, but speech is also terribly complicated. Vocabularies are diverse, sentence structures can often dictate the meaning of certain words, and computers also have to deal with accents, mispronunciations, and many common linguistic faux pas. The field of Natural Language Processing, or NLP, attempts to solve these problems, with a number of techniques we\u2019ll discuss today. And even though our virtual assistants like Siri, Alexa, Google Home, Bixby, and Cortana have come a long way from the first speech processing and synthesis models, there is still much room for improvement.","title":"Natural Language Processing"},{"location":"contents/unit01/terms.html#neural-network","text":"A neural network is a type of artificial intelligence algorithm that is modeled after the structure and function of the human brain. Neural networks are often used in deep learning applications. We're going to combine the artificial neuron we created last week into an artificial neural network. Artificial neural networks are better than other methods for more complicated tasks like image recognition, and the key to their success is their hidden layers. We'll talk about how the math of these networks work and how using many hidden layers allows us to do deep learning. Neural networks are really powerful at finding patterns in data which is why they've become one of the most dominant machine learning technologies used today.","title":"Neural Network"},{"location":"contents/unit01/terms.html#reinforcement-learning","text":"Reinforcement learning is a type of machine learning that involves training an algorithm to make decisions based on feedback it receives from its environment.","title":"Reinforcement Learning"},{"location":"contents/unit01/terms.html#supervised-learning","text":"Supervised learning is a type of machine learning that involves training an algorithm using labeled data, where the desired output is known. Today we\u2019re going to teach John Green Bot how to tell the difference between donuts and bagels using supervised learning! Supervised learning is the process of learning WITH training labels, and is the most widely used kind of learning with it comes to AI - helping with stuff like tagging photos on Facebook and filtering spam from your email. We\u2019re going to start small today and show how just a single neuron (or perceptron) is constructed, and explain the differences between precision and recall. Next week, we'll build our first neural network.","title":"Supervised Learning"},{"location":"contents/unit01/terms.html#training-data","text":"Training data is a set of data used to train machine learning algorithms. Training data typically consists of input data and corresponding output data, which is used to teach the algorithm how to make predictions.","title":"Training Data"},{"location":"contents/unit01/terms.html#turing-test","text":"The Turing Test is a test of a machine's ability to exhibit intelligent behavior equivalent to, or indistinguishable from, that of a human. What is consciousness? Can an artificial machine really think? For many, these have been vital considerations for the future of artificial intelligence. But British computer scientist Alan Turing decided to disregard all these questions in favor of a much simpler one: Can a computer talk like a human? Alex Gendler describes the Turing test and details some of its surprising results. Lesson by Alex Gendler, animation by Patrick Smith.","title":"Turing Test"},{"location":"contents/unit01/terms.html#unsupervised-learning","text":"Unsupervised learning is a type of machine learning that involves training an algorithm using unlabeled data, where the desired output is unknown. The algorithm must find patterns and relationships in the data on its own. We\u2019re moving on from artificial intelligence that needs training labels, called Supervised Learning, to Unsupervised Learning which is learning by finding patterns in the world. We\u2019ll focus on the performing unsupervised clustering, specifically K-means clustering, and show you how we can extract meaningful patterns from data even when you don't know where those patterns are.","title":"Unsupervised Learning"},{"location":"contents/unit01/unit1.html","text":"Unit 1. Introduction to Programming, Artificial Intelligence and Robotics","title":"Introduction to AI, Programming and Robotics"},{"location":"contents/unit01/unit1.html#unit-1-introduction-to-programming-artificial-intelligence-and-robotics","text":"","title":"Unit 1. Introduction to Programming, Artificial Intelligence and Robotics"},{"location":"contents/unit01/vr-techniques.html","text":"Virtual Reality Techniques Introduction to Virtual Reality Virtual Reality (VR) is a technology that creates a simulated environment. Unlike traditional user interfaces, VR places the user inside an experience. Instead of viewing a screen in front of them, users are immersed and able to interact with 3D worlds. This makes VR a powerful tool for learning, playing, and exploring. How Virtual Reality Works VR works through a combination of hardware and software. The main hardware components include: VR Headsets: These are like goggles that cover your eyes and show you the virtual world. Examples include the Oculus Rift, HTC Vive, and PlayStation VR. Motion Controllers: These are handheld devices that let you interact with the VR world. They track your hand movements and allow you to pick up objects, draw, or even fight virtual enemies. Tracking Sensors: These sensors monitor the position of your headset and controllers in space, ensuring that your movements in the real world are accurately reflected in the virtual world. The software in VR includes the applications and games that create the virtual environments and allow you to interact with them. Techniques Used in Virtual Reality Several key techniques make VR possible and enhance the experience: 3D Modeling and Animation: - 3D Modeling: Creating a digital representation of any object or environment. For example, a chair or a room. - Animation: Bringing these models to life by making them move. This could be a character walking or a car driving. Example: In a VR art application, you can use 3D modeling to create sculptures. With animation, these sculptures can come to life, moving or changing colors. Spatial Audio: - Spatial audio makes sounds seem like they are coming from specific locations in the virtual environment. This means if someone is talking behind you in VR, the sound will come from behind you. Example: In a VR mystery game, you might hear footsteps behind you, prompting you to turn around and investigate. Head Tracking: - This technique tracks the position and movement of your head, adjusting the view in the VR headset accordingly. It allows you to look around the virtual world naturally. Example: If you\u2019re exploring a VR jungle, you can look up to see the treetops or down to see the underbrush. Motion Tracking: - This tracks the movements of your hands or other parts of your body. It allows for a more interactive experience, as you can move objects, draw, or perform tasks. Example: In a VR cooking game, you can use motion controllers to chop vegetables, stir pots, and serve food. Haptic Feedback: - Haptic feedback uses vibrations or other sensations to simulate touch. This means you can feel when you touch or pick up something in the VR world. Example: When you catch a ball in a VR sports game, you might feel a slight vibration in your hand. Practical Applications of Virtual Reality Education: - VR can create immersive learning experiences. Imagine learning about ancient Egypt by walking around a pyramid or exploring the human body by traveling through its systems. Example: A VR history lesson where students visit a medieval castle and interact with historical figures. Training: - VR is used for training in fields like medicine, aviation, and the military. It allows for safe practice of complex tasks. Example: Medical students can perform virtual surgeries to practice without any risk to real patients. Entertainment: - VR is popular in gaming, where it creates immersive experiences that traditional gaming setups can\u2019t match. Example: Playing a VR zombie game where you need to physically move and fight off zombies coming from all directions. Travel: - VR can provide virtual travel experiences, allowing people to visit places they might never go in real life. Example: A virtual tour of the Eiffel Tower, where you can look around and explore Paris from above. Therapy: - VR is used in therapy to treat conditions like PTSD, anxiety, and phobias. Example: A person afraid of heights can use VR to gradually and safely expose themselves to higher and higher places. Conclusion Virtual Reality is a fascinating and versatile technology. By understanding the basic techniques and applications, you can see how VR is changing the way we learn, work, and play. As technology advances, the possibilities for VR are endless, making it an exciting field for future exploration and innovation.","title":"Virtual Reality Techniques"},{"location":"contents/unit01/vr-techniques.html#virtual-reality-techniques","text":"Introduction to Virtual Reality Virtual Reality (VR) is a technology that creates a simulated environment. Unlike traditional user interfaces, VR places the user inside an experience. Instead of viewing a screen in front of them, users are immersed and able to interact with 3D worlds. This makes VR a powerful tool for learning, playing, and exploring. How Virtual Reality Works VR works through a combination of hardware and software. The main hardware components include: VR Headsets: These are like goggles that cover your eyes and show you the virtual world. Examples include the Oculus Rift, HTC Vive, and PlayStation VR. Motion Controllers: These are handheld devices that let you interact with the VR world. They track your hand movements and allow you to pick up objects, draw, or even fight virtual enemies. Tracking Sensors: These sensors monitor the position of your headset and controllers in space, ensuring that your movements in the real world are accurately reflected in the virtual world. The software in VR includes the applications and games that create the virtual environments and allow you to interact with them. Techniques Used in Virtual Reality Several key techniques make VR possible and enhance the experience: 3D Modeling and Animation: - 3D Modeling: Creating a digital representation of any object or environment. For example, a chair or a room. - Animation: Bringing these models to life by making them move. This could be a character walking or a car driving. Example: In a VR art application, you can use 3D modeling to create sculptures. With animation, these sculptures can come to life, moving or changing colors. Spatial Audio: - Spatial audio makes sounds seem like they are coming from specific locations in the virtual environment. This means if someone is talking behind you in VR, the sound will come from behind you. Example: In a VR mystery game, you might hear footsteps behind you, prompting you to turn around and investigate. Head Tracking: - This technique tracks the position and movement of your head, adjusting the view in the VR headset accordingly. It allows you to look around the virtual world naturally. Example: If you\u2019re exploring a VR jungle, you can look up to see the treetops or down to see the underbrush. Motion Tracking: - This tracks the movements of your hands or other parts of your body. It allows for a more interactive experience, as you can move objects, draw, or perform tasks. Example: In a VR cooking game, you can use motion controllers to chop vegetables, stir pots, and serve food. Haptic Feedback: - Haptic feedback uses vibrations or other sensations to simulate touch. This means you can feel when you touch or pick up something in the VR world. Example: When you catch a ball in a VR sports game, you might feel a slight vibration in your hand. Practical Applications of Virtual Reality Education: - VR can create immersive learning experiences. Imagine learning about ancient Egypt by walking around a pyramid or exploring the human body by traveling through its systems. Example: A VR history lesson where students visit a medieval castle and interact with historical figures. Training: - VR is used for training in fields like medicine, aviation, and the military. It allows for safe practice of complex tasks. Example: Medical students can perform virtual surgeries to practice without any risk to real patients. Entertainment: - VR is popular in gaming, where it creates immersive experiences that traditional gaming setups can\u2019t match. Example: Playing a VR zombie game where you need to physically move and fight off zombies coming from all directions. Travel: - VR can provide virtual travel experiences, allowing people to visit places they might never go in real life. Example: A virtual tour of the Eiffel Tower, where you can look around and explore Paris from above. Therapy: - VR is used in therapy to treat conditions like PTSD, anxiety, and phobias. Example: A person afraid of heights can use VR to gradually and safely expose themselves to higher and higher places. Conclusion Virtual Reality is a fascinating and versatile technology. By understanding the basic techniques and applications, you can see how VR is changing the way we learn, work, and play. As technology advances, the possibilities for VR are endless, making it an exciting field for future exploration and innovation.","title":"Virtual Reality Techniques"},{"location":"contents/unit01/flipcoin/flipcoin.html","text":"Programming Project: Coin Flip Simulation This animation displays a simulation of 500 coin tosses . As can be observed, the percentages of heads and tails are converging towards 50% , which is the theoretical probability of getting a head or a tail in a single toss. 0. Heads or Tails Obviously, we need coins for this simulation. Coin flipping, coin tossing, or heads or tails is the practice of throwing a coin in the air and checking which side is showing when it lands, in order to choose between two alternatives, heads or tails, sometimes used to resolve a dispute between two parties. 1. Definition of variables These are the variables that need to be defined in the simulation application: Heads or tails? result : This variable stores a random integer between 0 and 1, meaning result can have a value of 0 or 1 . We will assign the value 0 to \"heads\" and the value 1 to \"tails.\" Number of heads and tails heads : The variable heads stores the number of heads that have appeared so far. tails : The variable tails stores the number of tails that have appeared so far. Flips or tosses flips : The variable flips stores the number of heads and tails that have appeared so far, in other words, the number of coin tosses performed. nflips : The variable nflips stores the number of tosses the simulator will perform . Frequency and percetages f_heads : The variable f_heads stores the percentage of heads that have appeared so far. It is a numerical value. f_tails : The variable f_tails stores the percentage of tails that have appeared so far. It is a numerical value. p_heads : The variable p_heads stores the percentage of heads that have appeared so far followed by the \"%\" character . It is a text value displayed in the interface. p_tails : The variable p_tails stores the percentage of tails that have appeared so far followed by the \"%\" character . It is a text value displayed in the interface. 2. The Main Loop The structure of the main program should look like this: wait 2 sec flips = 0 heads = 0 tails = 0 repeat nflips result = random(0,1) flips = flips + 1 wait 0.2 sec In Scratch, you can build this main loop using the following instructions and control structures:","title":"Programming Project: Coin Flip Simulation"},{"location":"contents/unit01/flipcoin/flipcoin.html#programming-project-coin-flip-simulation","text":"This animation displays a simulation of 500 coin tosses . As can be observed, the percentages of heads and tails are converging towards 50% , which is the theoretical probability of getting a head or a tail in a single toss.","title":"Programming Project: Coin Flip Simulation"},{"location":"contents/unit01/flipcoin/flipcoin.html#0-heads-or-tails","text":"Obviously, we need coins for this simulation. Coin flipping, coin tossing, or heads or tails is the practice of throwing a coin in the air and checking which side is showing when it lands, in order to choose between two alternatives, heads or tails, sometimes used to resolve a dispute between two parties.","title":"0. Heads or Tails"},{"location":"contents/unit01/flipcoin/flipcoin.html#1-definition-of-variables","text":"These are the variables that need to be defined in the simulation application: Heads or tails? result : This variable stores a random integer between 0 and 1, meaning result can have a value of 0 or 1 . We will assign the value 0 to \"heads\" and the value 1 to \"tails.\" Number of heads and tails heads : The variable heads stores the number of heads that have appeared so far. tails : The variable tails stores the number of tails that have appeared so far. Flips or tosses flips : The variable flips stores the number of heads and tails that have appeared so far, in other words, the number of coin tosses performed. nflips : The variable nflips stores the number of tosses the simulator will perform . Frequency and percetages f_heads : The variable f_heads stores the percentage of heads that have appeared so far. It is a numerical value. f_tails : The variable f_tails stores the percentage of tails that have appeared so far. It is a numerical value. p_heads : The variable p_heads stores the percentage of heads that have appeared so far followed by the \"%\" character . It is a text value displayed in the interface. p_tails : The variable p_tails stores the percentage of tails that have appeared so far followed by the \"%\" character . It is a text value displayed in the interface.","title":"1. Definition of variables"},{"location":"contents/unit01/flipcoin/flipcoin.html#2-the-main-loop","text":"The structure of the main program should look like this: wait 2 sec flips = 0 heads = 0 tails = 0 repeat nflips result = random(0,1) flips = flips + 1 wait 0.2 sec In Scratch, you can build this main loop using the following instructions and control structures:","title":"2. The Main Loop"},{"location":"contents/unit01/flipcoin/lawlargenumbers.html","text":"The Law of Large Numbers The Law of Large Numbers is a fundamental principle in probability theory that states that as the number of repetitions of a random experiment increases, the average of the results tends to approach the expected value. In this exciting Scratch programming project, you will have the opportunity to explore and visualize this concept through a coin toss simulation.","title":"The Law of Large Numbers"},{"location":"contents/unit01/flipcoin/lawlargenumbers.html#the-law-of-large-numbers","text":"The Law of Large Numbers is a fundamental principle in probability theory that states that as the number of repetitions of a random experiment increases, the average of the results tends to approach the expected value. In this exciting Scratch programming project, you will have the opportunity to explore and visualize this concept through a coin toss simulation.","title":"The Law of Large Numbers"},{"location":"contents/unit01_old/robotresearch.html","text":"Project: Researching an Advanced Robot with AI and Sensor Technologies In this activity, you will work in pairs to research a specific advanced robot that heavily incorporates Artificial Intelligence (AI) and sensor technologies. You will gather information about the robot\u2019s AI systems and sensors, and create a presentation to share with the class. Part 1: Choosing a Robot Begin by discussing advanced robots with your partner. Choose a robot that utilizes both AI techniques and sensors for interaction. Focus on robots that demonstrate innovative uses of sensor data and AI-driven decision-making. Try to choose a robot that you find interesting or aligns with your personal interests. Part 2: Researching the Robot Use reliable sources such as academic journals, reputable websites, and news articles to gather information on the robot you have chosen. You should gather detailed information on the following aspects: Purpose : What tasks or problems is the robot designed to address? How does it use AI to fulfill these tasks? Design : What does the robot look like? What are the key components, especially its sensors and AI systems? Sensors : Focus on the sensors the robot uses to interact with its environment. How do these sensors collect data, and how does AI process this information to guide the robot\u2019s actions? AI Systems : What type of AI is integrated into the robot (e.g., machine learning, expert systems)? How does the AI help the robot make decisions based on sensor input? Actuators : What actuators does the robot use for movement or interaction, and how are they controlled by AI systems? Innovations : What sets this robot apart in terms of its AI capabilities and sensor usage? How do these innovations improve the robot\u2019s functionality? Applications : What are some potential applications of this robot in real-world scenarios? How could its AI and sensor technologies be applied in various industries or everyday situations? Part 3: Creating a Presentation Create a PowerPoint presentation to share your research with the class. Your presentation should include the following: Introduction : Introduce the robot and explain why you chose it, highlighting its AI and sensor technologies. Purpose : Describe what the robot is designed to do and how AI and sensors play a role in its function. Design : Share images and descriptions of the robot\u2019s components, focusing on the sensors and AI systems. Sensors : Explain the types of sensors the robot uses, how they work, and how AI processes sensor data to inform actions. AI Systems : Describe the AI techniques the robot uses (e.g., machine learning, neural networks) and how they contribute to decision-making. Actuators : Discuss the actuators the robot uses and how AI controls them to execute tasks. Innovations : Highlight what makes the robot\u2019s AI and sensor integration advanced and innovative. Applications : Share some potential real-world applications for the robot, emphasizing how its AI and sensors can be utilized. Conclusion : Summarize the key points and explain why this robot\u2019s AI and sensor technologies make it significant. Part 4: Presenting to the Class Present your research to the class, using your PowerPoint presentation. Be prepared to answer questions about the AI and sensor technologies your robot uses. This project will help you explore the role of AI and sensors in advanced robotics while developing your research, critical thinking, and presentation skills. Have fun!","title":"Robotresearch"},{"location":"contents/unit01_old/robotresearch.html#project-researching-an-advanced-robot-with-ai-and-sensor-technologies","text":"In this activity, you will work in pairs to research a specific advanced robot that heavily incorporates Artificial Intelligence (AI) and sensor technologies. You will gather information about the robot\u2019s AI systems and sensors, and create a presentation to share with the class.","title":"Project: Researching an Advanced Robot with AI and Sensor Technologies"},{"location":"contents/unit01_old/robotresearch.html#part-1-choosing-a-robot","text":"Begin by discussing advanced robots with your partner. Choose a robot that utilizes both AI techniques and sensors for interaction. Focus on robots that demonstrate innovative uses of sensor data and AI-driven decision-making. Try to choose a robot that you find interesting or aligns with your personal interests.","title":"Part 1: Choosing a Robot"},{"location":"contents/unit01_old/robotresearch.html#part-2-researching-the-robot","text":"Use reliable sources such as academic journals, reputable websites, and news articles to gather information on the robot you have chosen. You should gather detailed information on the following aspects: Purpose : What tasks or problems is the robot designed to address? How does it use AI to fulfill these tasks? Design : What does the robot look like? What are the key components, especially its sensors and AI systems? Sensors : Focus on the sensors the robot uses to interact with its environment. How do these sensors collect data, and how does AI process this information to guide the robot\u2019s actions? AI Systems : What type of AI is integrated into the robot (e.g., machine learning, expert systems)? How does the AI help the robot make decisions based on sensor input? Actuators : What actuators does the robot use for movement or interaction, and how are they controlled by AI systems? Innovations : What sets this robot apart in terms of its AI capabilities and sensor usage? How do these innovations improve the robot\u2019s functionality? Applications : What are some potential applications of this robot in real-world scenarios? How could its AI and sensor technologies be applied in various industries or everyday situations?","title":"Part 2: Researching the Robot"},{"location":"contents/unit01_old/robotresearch.html#part-3-creating-a-presentation","text":"Create a PowerPoint presentation to share your research with the class. Your presentation should include the following: Introduction : Introduce the robot and explain why you chose it, highlighting its AI and sensor technologies. Purpose : Describe what the robot is designed to do and how AI and sensors play a role in its function. Design : Share images and descriptions of the robot\u2019s components, focusing on the sensors and AI systems. Sensors : Explain the types of sensors the robot uses, how they work, and how AI processes sensor data to inform actions. AI Systems : Describe the AI techniques the robot uses (e.g., machine learning, neural networks) and how they contribute to decision-making. Actuators : Discuss the actuators the robot uses and how AI controls them to execute tasks. Innovations : Highlight what makes the robot\u2019s AI and sensor integration advanced and innovative. Applications : Share some potential real-world applications for the robot, emphasizing how its AI and sensors can be utilized. Conclusion : Summarize the key points and explain why this robot\u2019s AI and sensor technologies make it significant.","title":"Part 3: Creating a Presentation"},{"location":"contents/unit01_old/robotresearch.html#part-4-presenting-to-the-class","text":"Present your research to the class, using your PowerPoint presentation. Be prepared to answer questions about the AI and sensor technologies your robot uses. This project will help you explore the role of AI and sensors in advanced robotics while developing your research, critical thinking, and presentation skills. Have fun!","title":"Part 4: Presenting to the Class"},{"location":"contents/unit01_old/unit1.html","text":"Unit 1. Sensors and Artificial Intelligence: Fundamentals and Applications","title":"Unit 1. Sensors and Artificial Intelligence: Fundamentals and Applications"},{"location":"contents/unit01_old/unit1.html#unit-1-sensors-and-artificial-intelligence-fundamentals-and-applications","text":"","title":"Unit 1. Sensors and Artificial Intelligence: Fundamentals and Applications"},{"location":"contents/unit02/unit2.html","text":"Unit 2. Programming, Fundamentals: Data, Logic, and Control","title":"Programming Fundamentals: Data, Logic, and Control"},{"location":"contents/unit02/unit2.html#unit-2-programming-fundamentals-data-logic-and-control","text":"","title":"Unit 2. Programming, Fundamentals: Data, Logic, and Control"},{"location":"contents/unit02/flipcoin/calculations.html","text":"Calculate percentages","title":"Step 3: Calculate percentages"},{"location":"contents/unit02/flipcoin/calculations.html#calculate-percentages","text":"","title":"Calculate percentages"},{"location":"contents/unit02/flipcoin/checkflip.html","text":"Animate and count heads and tails","title":"Step 2: Animate and count heads and tails"},{"location":"contents/unit02/flipcoin/checkflip.html#animate-and-count-heads-and-tails","text":"","title":"Animate and count heads and tails"},{"location":"contents/unit02/flipcoin/flipcoin.html","text":"Programming Project: Coin Flip Simulation This animation displays a simulation of 500 coin tosses . As can be observed, the percentages of heads and tails are converging towards 50% , which is the theoretical probability of getting a head or a tail in a single toss. Step 1: Flip coins and count the throws Step 2: Animate and count heads and tails Step 3: Calculate percentages Step 4: Display a simulation graph","title":"Coin Flip: The project"},{"location":"contents/unit02/flipcoin/flipcoin.html#programming-project-coin-flip-simulation","text":"This animation displays a simulation of 500 coin tosses . As can be observed, the percentages of heads and tails are converging towards 50% , which is the theoretical probability of getting a head or a tail in a single toss. Step 1: Flip coins and count the throws Step 2: Animate and count heads and tails Step 3: Calculate percentages Step 4: Display a simulation graph","title":"Programming Project: Coin Flip Simulation"},{"location":"contents/unit02/flipcoin/graph.html","text":"Display a simulation graph Code in backdrop: Code in pencil:","title":"Step 4: Display a simulation graph"},{"location":"contents/unit02/flipcoin/graph.html#display-a-simulation-graph","text":"Code in backdrop: Code in pencil:","title":"Display a simulation graph"},{"location":"contents/unit02/flipcoin/lawlargenumbers.html","text":"The Law of Large Numbers The Law of Large Numbers is a fundamental principle in probability theory that states that as the number of repetitions of a random experiment increases, the average of the results tends to approach the expected value. In this exciting Scratch programming project, you will have the opportunity to explore and visualize this concept through a coin toss simulation.","title":"The Law of Large Numbers"},{"location":"contents/unit02/flipcoin/lawlargenumbers.html#the-law-of-large-numbers","text":"The Law of Large Numbers is a fundamental principle in probability theory that states that as the number of repetitions of a random experiment increases, the average of the results tends to approach the expected value. In this exciting Scratch programming project, you will have the opportunity to explore and visualize this concept through a coin toss simulation.","title":"The Law of Large Numbers"},{"location":"contents/unit02/flipcoin/vars_mainloop.html","text":"Variables and Main Loop This animation displays a simulation of 500 coin tosses . As can be observed, the percentages of heads and tails are converging towards 50% , which is the theoretical probability of getting a head or a tail in a single toss. 0. Heads or Tails Obviously, we need coins for this simulation. Coin flipping, coin tossing, or heads or tails is the practice of throwing a coin in the air and checking which side is showing when it lands, in order to choose between two alternatives, heads or tails, sometimes used to resolve a dispute between two parties. 1. Definition of variables These are the variables that need to be defined in the simulation application: Heads or tails? result : This variable stores a random integer between 0 and 1, meaning result can have a value of 0 or 1 . We will assign the value 0 to \"heads\" and the value 1 to \"tails.\" Number of heads and tails heads : The variable heads stores the number of heads that have appeared so far. tails : The variable tails stores the number of tails that have appeared so far. Flips or tosses flips : The variable flips stores the number of heads and tails that have appeared so far, in other words, the number of coin tosses performed. nflips : The variable nflips stores the number of tosses the simulator will perform . Frequency and percetages f_heads : The variable f_heads stores the percentage of heads that have appeared so far. It is a numerical value. f_tails : The variable f_tails stores the percentage of tails that have appeared so far. It is a numerical value. p_heads : The variable p_heads stores the percentage of heads that have appeared so far followed by the \"%\" character . It is a text value displayed in the interface. p_tails : The variable p_tails stores the percentage of tails that have appeared so far followed by the \"%\" character . It is a text value displayed in the interface. 2. The Main Loop The structure of the main program should look like this: wait 2 sec flips = 0 heads = 0 tails = 0 repeat nflips result = random(0,1) flips = flips + 1 wait 0.2 sec In Scratch, you can build this main loop using the following instructions and control structures:","title":"Step 1: Flip coins and count the throws"},{"location":"contents/unit02/flipcoin/vars_mainloop.html#variables-and-main-loop","text":"This animation displays a simulation of 500 coin tosses . As can be observed, the percentages of heads and tails are converging towards 50% , which is the theoretical probability of getting a head or a tail in a single toss.","title":"Variables and Main Loop"},{"location":"contents/unit02/flipcoin/vars_mainloop.html#0-heads-or-tails","text":"Obviously, we need coins for this simulation. Coin flipping, coin tossing, or heads or tails is the practice of throwing a coin in the air and checking which side is showing when it lands, in order to choose between two alternatives, heads or tails, sometimes used to resolve a dispute between two parties.","title":"0. Heads or Tails"},{"location":"contents/unit02/flipcoin/vars_mainloop.html#1-definition-of-variables","text":"These are the variables that need to be defined in the simulation application: Heads or tails? result : This variable stores a random integer between 0 and 1, meaning result can have a value of 0 or 1 . We will assign the value 0 to \"heads\" and the value 1 to \"tails.\" Number of heads and tails heads : The variable heads stores the number of heads that have appeared so far. tails : The variable tails stores the number of tails that have appeared so far. Flips or tosses flips : The variable flips stores the number of heads and tails that have appeared so far, in other words, the number of coin tosses performed. nflips : The variable nflips stores the number of tosses the simulator will perform . Frequency and percetages f_heads : The variable f_heads stores the percentage of heads that have appeared so far. It is a numerical value. f_tails : The variable f_tails stores the percentage of tails that have appeared so far. It is a numerical value. p_heads : The variable p_heads stores the percentage of heads that have appeared so far followed by the \"%\" character . It is a text value displayed in the interface. p_tails : The variable p_tails stores the percentage of tails that have appeared so far followed by the \"%\" character . It is a text value displayed in the interface.","title":"1. Definition of variables"},{"location":"contents/unit02/flipcoin/vars_mainloop.html#2-the-main-loop","text":"The structure of the main program should look like this: wait 2 sec flips = 0 heads = 0 tails = 0 repeat nflips result = random(0,1) flips = flips + 1 wait 0.2 sec In Scratch, you can build this main loop using the following instructions and control structures:","title":"2. The Main Loop"},{"location":"contents/unit03/unit3.html","text":"Unit 3. Modeling, Algorithms, and Patterns in Programming","title":"Modeling, Algorithms, and Patterns in Programming"},{"location":"contents/unit03/unit3.html#unit-3-modeling-algorithms-and-patterns-in-programming","text":"","title":"Unit 3. Modeling, Algorithms, and Patterns in Programming"},{"location":"contents/unit04/unit4.html","text":"Unit 4. Programming Fundamentals: Languages, Flow Control, and Variables","title":"Unit 4. Programming Fundamentals: Languages, Flow Control, and Variables"},{"location":"contents/unit04/unit4.html#unit-4-programming-fundamentals-languages-flow-control-and-variables","text":"","title":"Unit 4. Programming Fundamentals: Languages, Flow Control, and Variables"},{"location":"contents/unit05/all.html","text":"1. Introduction to Programming in High-Level Languages. Types of Languages. Syntax and Semantics Introduction to Programming Programming is the process of giving instructions to a computer to perform specific tasks. A computer understands only machine language, which consists of binary numbers (0s and 1s). However, humans write programs in high-level programming languages, which are easier to read and understand. These languages are translated into machine language by compilers or interpreters. High-Level Languages High-level programming languages are designed to be easy for humans to read and write. Some examples of high-level languages are Python, Java, and C++. These languages use English-like words and mathematical symbols to express instructions, making them more accessible than low-level languages like assembly or machine code. Python : A popular language known for its simple syntax and wide usage in fields like web development, data science, and artificial intelligence. Java : A widely-used language for building large, complex applications, especially for Android development. C++ : A powerful language often used in game development and systems programming. Types of Programming Languages There are different types of programming languages based on their use and the way they interact with the computer: Procedural Programming Languages : These languages focus on the sequence of actions or steps the computer must take to accomplish a task. The most common procedural language is C. Object-Oriented Programming (OOP) Languages : These languages focus on objects, which are collections of data and methods that operate on that data. Java and Python are examples of OOP languages. Functional Programming Languages : These languages treat computation as the evaluation of mathematical functions and avoid changing-state and mutable data. Haskell is an example of a functional language. Syntax and Semantics - Syntax refers to the rules that define the structure of valid code in a programming language. It is like grammar in a language. For example, in Python, the syntax for defining a variable is: x = 5 If you forget to write the correct syntax, the program will produce an error. Semantics refers to the meaning of the code. It is the logic that explains what each part of the code does. For example, in the above line of Python code, the syntax is correct, and the semantics tell us that the variable x is being assigned the value 5. A good programmer needs to understand both syntax and semantics to write code that works as expected. 2. Software Evaluation and Maintenance What is Software Evaluation? Software evaluation is the process of assessing how well a program or application works. This includes testing its functionality, performance, security, and user-friendliness. Evaluation helps developers understand if their software meets the requirements and is free from bugs or errors. There are different types of testing: 1. Unit Testing : This is the testing of individual components or units of code, like functions or classes. The goal is to ensure each part of the program works correctly on its own. 2. Integration Testing : This testing checks if different parts of the program work together properly. 3. System Testing : This is done to verify that the entire system functions as expected. 4. User Testing : The software is tested by actual users to see if it is easy to use and meets their needs. What is Software Maintenance? Once software is released, it is important to maintain it to fix bugs, improve functionality, and ensure it stays up-to-date with the latest technology. Software maintenance can be divided into four types: Corrective Maintenance : This involves fixing bugs or errors in the software after it has been released. Adaptive Maintenance : This is when the software is updated to be compatible with changes in the environment (e.g., a new operating system). Perfective Maintenance : This focuses on improving the software by adding new features or improving performance. Preventive Maintenance : This is about anticipating and preventing future problems before they happen. Why is Software Evaluation and Maintenance Important? Software evaluation and maintenance are essential for keeping programs working smoothly over time. Without maintenance, software can become outdated, slow, or full of bugs. This can lead to security issues, poor performance, and unhappy users. Regular evaluation ensures that software is reliable, efficient, and secure. 3. Software Licenses. Free Software and Proprietary Software Software Licenses A software license is a legal agreement that explains the terms under which a program can be used, modified, and distributed. There are two main types of software licenses: free software licenses and proprietary software licenses. Free Software : This refers to software that can be freely used, modified, and shared. The most famous free software license is the GNU General Public License (GPL), which allows anyone to run, study, modify, and share the software as long as they share their modifications with the same license. An example of free software is the Linux operating system. Benefits of Free Software : - Freedom to modify : Users can improve the software. - No cost : It is often available for free. - Community support : Free software often has active communities that help users and developers. Proprietary Software : This refers to software that is owned by a company or individual and comes with restrictions on its use, modification, and distribution. Examples of proprietary software include Microsoft Windows and Adobe Photoshop. Characteristics of Proprietary Software : - Limited access : Users cannot view or change the source code. - Licensing fees : Users typically need to pay for a license to use the software. - Support from the company : Proprietary software usually comes with professional customer support. Respecting Copyrights and Licenses When creating or using software, it is essential to respect the rights of the creators. This includes: 1. Attribution : Giving credit to the original authors. 2. Following License Terms : Ensuring you follow the rules of the software license, whether it\u2019s free software or proprietary. 3. Not using pirated software : Using unauthorized copies of proprietary software is illegal and can lead to legal consequences. By understanding software licenses and respecting intellectual property, you ensure that your work and the work of others are protected and valued. Evaluation Criteria: Evaluating and Maintaining Developed Software : You should be able to test and maintain software you create. This includes running different tests to check for bugs, fixing any issues, and making sure the software is efficient and secure. Applying and Respecting Copyright and Licenses : When creating software, it is important to follow proper licensing rules. You should always give credit to authors of free software and ensure that your software follows the license you\u2019ve chosen, whether free or proprietary. These criteria help you build better software while respecting the work of others and ensuring your software is legal, secure, and efficient.","title":"All"},{"location":"contents/unit05/all.html#1-introduction-to-programming-in-high-level-languages-types-of-languages-syntax-and-semantics","text":"Introduction to Programming Programming is the process of giving instructions to a computer to perform specific tasks. A computer understands only machine language, which consists of binary numbers (0s and 1s). However, humans write programs in high-level programming languages, which are easier to read and understand. These languages are translated into machine language by compilers or interpreters. High-Level Languages High-level programming languages are designed to be easy for humans to read and write. Some examples of high-level languages are Python, Java, and C++. These languages use English-like words and mathematical symbols to express instructions, making them more accessible than low-level languages like assembly or machine code. Python : A popular language known for its simple syntax and wide usage in fields like web development, data science, and artificial intelligence. Java : A widely-used language for building large, complex applications, especially for Android development. C++ : A powerful language often used in game development and systems programming. Types of Programming Languages There are different types of programming languages based on their use and the way they interact with the computer: Procedural Programming Languages : These languages focus on the sequence of actions or steps the computer must take to accomplish a task. The most common procedural language is C. Object-Oriented Programming (OOP) Languages : These languages focus on objects, which are collections of data and methods that operate on that data. Java and Python are examples of OOP languages. Functional Programming Languages : These languages treat computation as the evaluation of mathematical functions and avoid changing-state and mutable data. Haskell is an example of a functional language. Syntax and Semantics - Syntax refers to the rules that define the structure of valid code in a programming language. It is like grammar in a language. For example, in Python, the syntax for defining a variable is: x = 5 If you forget to write the correct syntax, the program will produce an error. Semantics refers to the meaning of the code. It is the logic that explains what each part of the code does. For example, in the above line of Python code, the syntax is correct, and the semantics tell us that the variable x is being assigned the value 5. A good programmer needs to understand both syntax and semantics to write code that works as expected.","title":"1. Introduction to Programming in High-Level Languages. Types of Languages. Syntax and Semantics"},{"location":"contents/unit05/all.html#2-software-evaluation-and-maintenance","text":"What is Software Evaluation? Software evaluation is the process of assessing how well a program or application works. This includes testing its functionality, performance, security, and user-friendliness. Evaluation helps developers understand if their software meets the requirements and is free from bugs or errors. There are different types of testing: 1. Unit Testing : This is the testing of individual components or units of code, like functions or classes. The goal is to ensure each part of the program works correctly on its own. 2. Integration Testing : This testing checks if different parts of the program work together properly. 3. System Testing : This is done to verify that the entire system functions as expected. 4. User Testing : The software is tested by actual users to see if it is easy to use and meets their needs. What is Software Maintenance? Once software is released, it is important to maintain it to fix bugs, improve functionality, and ensure it stays up-to-date with the latest technology. Software maintenance can be divided into four types: Corrective Maintenance : This involves fixing bugs or errors in the software after it has been released. Adaptive Maintenance : This is when the software is updated to be compatible with changes in the environment (e.g., a new operating system). Perfective Maintenance : This focuses on improving the software by adding new features or improving performance. Preventive Maintenance : This is about anticipating and preventing future problems before they happen. Why is Software Evaluation and Maintenance Important? Software evaluation and maintenance are essential for keeping programs working smoothly over time. Without maintenance, software can become outdated, slow, or full of bugs. This can lead to security issues, poor performance, and unhappy users. Regular evaluation ensures that software is reliable, efficient, and secure.","title":"2. Software Evaluation and Maintenance"},{"location":"contents/unit05/all.html#3-software-licenses-free-software-and-proprietary-software","text":"Software Licenses A software license is a legal agreement that explains the terms under which a program can be used, modified, and distributed. There are two main types of software licenses: free software licenses and proprietary software licenses. Free Software : This refers to software that can be freely used, modified, and shared. The most famous free software license is the GNU General Public License (GPL), which allows anyone to run, study, modify, and share the software as long as they share their modifications with the same license. An example of free software is the Linux operating system. Benefits of Free Software : - Freedom to modify : Users can improve the software. - No cost : It is often available for free. - Community support : Free software often has active communities that help users and developers. Proprietary Software : This refers to software that is owned by a company or individual and comes with restrictions on its use, modification, and distribution. Examples of proprietary software include Microsoft Windows and Adobe Photoshop. Characteristics of Proprietary Software : - Limited access : Users cannot view or change the source code. - Licensing fees : Users typically need to pay for a license to use the software. - Support from the company : Proprietary software usually comes with professional customer support. Respecting Copyrights and Licenses When creating or using software, it is essential to respect the rights of the creators. This includes: 1. Attribution : Giving credit to the original authors. 2. Following License Terms : Ensuring you follow the rules of the software license, whether it\u2019s free software or proprietary. 3. Not using pirated software : Using unauthorized copies of proprietary software is illegal and can lead to legal consequences. By understanding software licenses and respecting intellectual property, you ensure that your work and the work of others are protected and valued.","title":"3. Software Licenses. Free Software and Proprietary Software"},{"location":"contents/unit05/all.html#evaluation-criteria","text":"Evaluating and Maintaining Developed Software : You should be able to test and maintain software you create. This includes running different tests to check for bugs, fixing any issues, and making sure the software is efficient and secure. Applying and Respecting Copyright and Licenses : When creating software, it is important to follow proper licensing rules. You should always give credit to authors of free software and ensure that your software follows the license you\u2019ve chosen, whether free or proprietary. These criteria help you build better software while respecting the work of others and ensuring your software is legal, secure, and efficient.","title":"Evaluation Criteria:"},{"location":"contents/unit05/proglang.html","text":"Programming in High-Level Languages Programming in High-Level Languages Introduction to Programming High-Level Languages Types of Programming Languages Syntax, Semantics, and Code Execution Compilers and Interpreters \"Hello, World!\" in Different Programming Languages Introduction to Programming Programming is the process of giving instructions to a computer to perform specific tasks. A computer understands only machine language, which consists of binary numbers (0s and 1s). However, humans write programs in high-level programming languages, which are easier to read and understand. These languages are translated into machine language by compilers or interpreters. High-Level Languages High-level programming languages are designed to be easy for humans to read and write. Some examples of high-level languages are Python, Java, and C++. These languages use English-like words and mathematical symbols to express instructions, making them more accessible than low-level languages like assembly or machine code. Python : A popular language known for its simple syntax and wide usage in fields like web development, data science, and artificial intelligence. Java : A widely-used language for building large, complex applications, especially for Android development. C++ : A powerful language often used in game development and systems programming. Types of Programming Languages There are different types of programming languages based on their use and the way they interact with the computer: Procedural Programming Languages : These languages focus on the sequence of actions or steps the computer must take to accomplish a task. The most common procedural language is C. Object-Oriented Programming (OOP) Languages : These languages focus on objects, which are collections of data and methods that operate on that data. Java and Python are examples of OOP languages. Functional Programming Languages : These languages treat computation as the evaluation of mathematical functions and avoid changing-state and mutable data. Haskell is an example of a functional language. Syntax, Semantics, and Code Execution Syntax refers to the rules that define the structure of valid code in a programming language. It is like grammar in a language. For example, in Python, the syntax for defining a variable is: x = 5 If you forget to write the correct syntax, the program will produce an error. Semantics refers to the meaning of the code. It is the logic that explains what each part of the code does. For example, in the above line of Python code, the syntax is correct, and the semantics tell us that the variable x is being assigned the value 5. A good programmer needs to understand both syntax and semantics to write code that works as expected. Compilers and Interpreters High-level programming languages need to be translated into machine language so that a computer can understand and execute them. This translation is done using either a compiler or an interpreter : Compiler : A compiler translates the entire source code into machine code before execution. This results in a standalone executable file that can run on a computer. Examples of compiled languages include C, C++, and Go. Interpreter : An interpreter translates and executes code line by line. This allows for immediate execution but may be slower than compiled programs. Examples of interpreted languages include Python, JavaScript, and Ruby. Some languages, like Java, use a combination of both: Java code is first compiled into an intermediate form called bytecode, which is then executed by an interpreter called the Java Virtual Machine (JVM). \"Hello, World!\" in Different Programming Languages The following examples show how to print \"Hello, World!\" in different programming languages. While most of these are high-level languages, assembly (or assembler) is a low-level language that is closer to machine code and directly interacts with the computer's hardware. The \"Hello, World!\" program is a simple example used to demonstrate the syntax of a programming language. Below are examples of how to write \"Hello, World!\" in different languages: Python : print ( \"Hello, World!\" ) C : #include <stdio.h> int main () { printf ( \"Hello, World! \\n \" ); return 0 ; } C++ : #include <iostream> using namespace std ; int main () { cout << \"Hello, World!\" << endl ; return 0 ; } C# : using System ; class Program { static void Main () { Console . WriteLine ( \"Hello, World!\" ); } } Java : public class Main { public static void main ( String [] args ) { System . out . println ( \"Hello, World!\" ); } } JavaScript : console . log ( \"Hello, World!\" ); Go : package main import \"fmt\" func main () { fmt . Println ( \"Hello, World!\" ) } Swift : print ( \"Hello, World!\" ) Ruby : puts \"Hello, World!\" Assembly (x86 NASM syntax) : section .data hello db \"Hello, World!\",0 section .text global _start _start: mov edx, 13 ; Message length mov ecx, hello ; Message to print mov ebx, 1 ; File descriptor (stdout) mov eax, 4 ; System call number (sys_write) int 0x80 ; Call kernel mov eax, 1 ; System call number (sys_exit) xor ebx, ebx ; Exit status 0 int 0x80 ; Call kernel","title":"Introduction to Programming in High-Level Languages"},{"location":"contents/unit05/proglang.html#programming-in-high-level-languages","text":"Programming in High-Level Languages Introduction to Programming High-Level Languages Types of Programming Languages Syntax, Semantics, and Code Execution Compilers and Interpreters \"Hello, World!\" in Different Programming Languages","title":"Programming in High-Level Languages"},{"location":"contents/unit05/proglang.html#introduction-to-programming","text":"Programming is the process of giving instructions to a computer to perform specific tasks. A computer understands only machine language, which consists of binary numbers (0s and 1s). However, humans write programs in high-level programming languages, which are easier to read and understand. These languages are translated into machine language by compilers or interpreters.","title":"Introduction to Programming"},{"location":"contents/unit05/proglang.html#high-level-languages","text":"High-level programming languages are designed to be easy for humans to read and write. Some examples of high-level languages are Python, Java, and C++. These languages use English-like words and mathematical symbols to express instructions, making them more accessible than low-level languages like assembly or machine code. Python : A popular language known for its simple syntax and wide usage in fields like web development, data science, and artificial intelligence. Java : A widely-used language for building large, complex applications, especially for Android development. C++ : A powerful language often used in game development and systems programming.","title":"High-Level Languages"},{"location":"contents/unit05/proglang.html#types-of-programming-languages","text":"There are different types of programming languages based on their use and the way they interact with the computer: Procedural Programming Languages : These languages focus on the sequence of actions or steps the computer must take to accomplish a task. The most common procedural language is C. Object-Oriented Programming (OOP) Languages : These languages focus on objects, which are collections of data and methods that operate on that data. Java and Python are examples of OOP languages. Functional Programming Languages : These languages treat computation as the evaluation of mathematical functions and avoid changing-state and mutable data. Haskell is an example of a functional language.","title":"Types of Programming Languages"},{"location":"contents/unit05/proglang.html#syntax-semantics-and-code-execution","text":"Syntax refers to the rules that define the structure of valid code in a programming language. It is like grammar in a language. For example, in Python, the syntax for defining a variable is: x = 5 If you forget to write the correct syntax, the program will produce an error. Semantics refers to the meaning of the code. It is the logic that explains what each part of the code does. For example, in the above line of Python code, the syntax is correct, and the semantics tell us that the variable x is being assigned the value 5. A good programmer needs to understand both syntax and semantics to write code that works as expected.","title":"Syntax, Semantics, and Code Execution"},{"location":"contents/unit05/proglang.html#compilers-and-interpreters","text":"High-level programming languages need to be translated into machine language so that a computer can understand and execute them. This translation is done using either a compiler or an interpreter : Compiler : A compiler translates the entire source code into machine code before execution. This results in a standalone executable file that can run on a computer. Examples of compiled languages include C, C++, and Go. Interpreter : An interpreter translates and executes code line by line. This allows for immediate execution but may be slower than compiled programs. Examples of interpreted languages include Python, JavaScript, and Ruby. Some languages, like Java, use a combination of both: Java code is first compiled into an intermediate form called bytecode, which is then executed by an interpreter called the Java Virtual Machine (JVM).","title":"Compilers and Interpreters"},{"location":"contents/unit05/proglang.html#hello-world-in-different-programming-languages","text":"The following examples show how to print \"Hello, World!\" in different programming languages. While most of these are high-level languages, assembly (or assembler) is a low-level language that is closer to machine code and directly interacts with the computer's hardware. The \"Hello, World!\" program is a simple example used to demonstrate the syntax of a programming language. Below are examples of how to write \"Hello, World!\" in different languages: Python : print ( \"Hello, World!\" ) C : #include <stdio.h> int main () { printf ( \"Hello, World! \\n \" ); return 0 ; } C++ : #include <iostream> using namespace std ; int main () { cout << \"Hello, World!\" << endl ; return 0 ; } C# : using System ; class Program { static void Main () { Console . WriteLine ( \"Hello, World!\" ); } } Java : public class Main { public static void main ( String [] args ) { System . out . println ( \"Hello, World!\" ); } } JavaScript : console . log ( \"Hello, World!\" ); Go : package main import \"fmt\" func main () { fmt . Println ( \"Hello, World!\" ) } Swift : print ( \"Hello, World!\" ) Ruby : puts \"Hello, World!\" Assembly (x86 NASM syntax) : section .data hello db \"Hello, World!\",0 section .text global _start _start: mov edx, 13 ; Message length mov ecx, hello ; Message to print mov ebx, 1 ; File descriptor (stdout) mov eax, 4 ; System call number (sys_write) int 0x80 ; Call kernel mov eax, 1 ; System call number (sys_exit) xor ebx, ebx ; Exit status 0 int 0x80 ; Call kernel","title":"\"Hello, World!\" in Different Programming Languages"},{"location":"contents/unit05/reading_PAIR.html","text":"The Impact of Artificial Intelligence, Programming, and Robotics on Society In the modern world, technology is all around us. It affects nearly every part of our lives, from the way we communicate with friends to how we shop or learn. One of the most exciting and rapidly advancing fields of technology today is artificial intelligence (AI) , programming , and robotics . These technologies are not just part of science fiction \u2013 they are changing the world in real, practical ways. But how exactly are they transforming society? Let\u2019s take a closer look. Artificial Intelligence (AI) Artificial Intelligence refers to the ability of machines to perform tasks that typically require human intelligence, such as understanding language, recognizing faces, or making decisions. AI is everywhere: it\u2019s used in the apps on your phone, the websites you visit, and even in the cars we drive. For example, have you ever used a voice assistant like Siri or Alexa? These devices use AI to understand what you say and respond in a way that seems human-like. AI also helps websites like YouTube recommend videos based on what you've watched before, or it can help doctors diagnose diseases by analyzing medical data. AI is transforming many industries, and it\u2019s crucial that we learn how to use it responsibly and understand its impact on society. But while AI has many positive effects, it can also create challenges. One concern is that AI could replace jobs, especially in industries where machines can do tasks more efficiently than humans. For example, in factories, robots can build products faster and more accurately than people. This means some jobs could be lost, but at the same time, new jobs are created, especially in fields like AI research and software development. Programming: The Language of Technology Programming is another critical part of the technology we use every day. It\u2019s the process of creating instructions that tell computers, smartphones, and other devices what to do. When you use a smartphone app, play a video game, or use a website, all of those things are created through programming. Programming is the backbone of nearly all modern technology, allowing us to create apps, websites, video games, and robots. Programming languages, such as Python , Java , and C++ , are the tools developers use to write code. Just like we use different languages to communicate with people (for example, English, Spanish, or French), programmers use different programming languages to communicate with computers. Programming is the backbone of nearly all modern technology. It is used to create apps, websites, video games, and even robots. In fact, robots are programmed to perform tasks, and these tasks can range from assembling products in factories to helping elderly people at home. The more we understand programming, the better we can create technologies that solve problems and improve lives. Robotics: Machines that Can Do Tasks Robotics is the field of technology that deals with the creation of robots. A robot is a machine that can carry out a series of tasks automatically, often using sensors and AI to guide its actions. Robotics combines engineering, programming, and sometimes AI to create machines that can perform specific jobs. You might think of robots as machines that look like humans, but that\u2019s not always the case. Robots come in all shapes and sizes. For example, some robots are used in factories to build cars, while others are used in hospitals to help doctors perform surgeries. There are even robots that can clean your house, like the Roomba vacuum cleaner! Robotics combines engineering, programming, and AI to create machines that can perform specific tasks, improving many areas of life. Robotics has the potential to improve many areas of life. Robots can work in dangerous environments, like deep underwater or in space, where humans can\u2019t go. They can help elderly people move around or provide assistance in hospitals. However, the rise of robots also brings up questions about the future of work. If robots are doing many jobs that people used to do, what will happen to those workers? This is a question that society will need to think about carefully in the coming years. How These Technologies Affect Our Society AI, programming, and robotics are already transforming many aspects of our daily lives. Education , for example, has changed dramatically with the use of AI and robots. Students can now learn from AI-powered apps that help them practice languages or improve their math skills. In schools, robots are sometimes used as teaching assistants, helping students learn coding and other subjects. In healthcare , AI is being used to analyze medical records and help doctors make better decisions about patient care. Robots are used in surgeries, performing tasks that require incredible precision. In business , AI helps companies understand customer behavior, predict trends, and improve their services. Public safety is another area where robots and AI are used. In emergency situations, drones (a type of robot) can be used to assess dangerous situations, such as fires or natural disasters, helping firefighters and rescuers get the information they need without putting themselves in harm\u2019s way. AI, programming, and robotics are transforming education, healthcare, business, and public safety, offering many new opportunities. But while these technologies offer many benefits, they also present challenges. Privacy and security are important concerns. As AI and robots gather and analyze data about people, it\u2019s essential to ensure that this information is kept safe and used responsibly. There are also ethical questions about how AI should make decisions, such as whether it should be allowed to make life-or-death decisions in self-driving cars. Facing Challenges and Adapting to Changes As we use more AI, programming, and robotics, it\u2019s important that we learn to adapt to these changes. Sometimes, the technologies we create don\u2019t work as planned, or they face unexpected problems. For example, a robot might not be able to perform a task as well as expected, or an app might have bugs that make it difficult to use. It\u2019s important to stay positive and keep trying, as every challenge is an opportunity to learn and improve. In these situations, it\u2019s important to stay positive and keep trying. Whether you\u2019re a programmer fixing a bug, a company leader trying to make the best use of AI, or a student learning how to adapt to new technologies, the key is to be resilient . Every challenge is an opportunity to learn and improve. Conclusion AI, programming, and robotics are technologies that are changing the way we live, work, and learn. They offer many opportunities to solve problems and make our lives easier, but they also raise important questions about privacy, security, and the future of work. By understanding the impact of AI, programming, and robotics, we can better prepare ourselves to use these technologies responsibly and creatively. By understanding how these technologies work and their impact on society, we can better prepare ourselves to use them responsibly and creatively. The future is full of exciting possibilities, and it\u2019s up to all of us to shape it. Quiz What is one way artificial intelligence (AI) is transforming industries? A. By eliminating the need for human workers entirely B. By improving efficiency and creating new job opportunities C. By making all decisions without human input D. By replacing all customer service representatives Which of the following is an example of AI being used in daily life? A. A book printed using a traditional printing press B. A voice assistant like Siri responding to a question C. A manual typewriter being used for writing D. A chalkboard being used in a classroom What is programming primarily used for? A. To communicate with computers and give them instructions B. To replace human workers entirely C. To make robots self-aware D. To prevent technology from advancing Which of the following is a common programming language? A. Python B. Human C. Morse Code D. Hieroglyphs What is an important skill when dealing with technological challenges? A. Ignoring problems and hoping they resolve themselves B. Staying positive and trying to find solutions C. Avoiding the use of technology D. Only working with technology that never fails How should we approach unexpected problems in technology? A. By assuming technology will always work perfectly B. By abandoning the project if a problem occurs C. By identifying the issue and trying different solutions D. By refusing to use AI or robotics","title":"Reading: The Impact of AI, Programming, and Robotics"},{"location":"contents/unit05/reading_PAIR.html#the-impact-of-artificial-intelligence-programming-and-robotics-on-society","text":"In the modern world, technology is all around us. It affects nearly every part of our lives, from the way we communicate with friends to how we shop or learn. One of the most exciting and rapidly advancing fields of technology today is artificial intelligence (AI) , programming , and robotics . These technologies are not just part of science fiction \u2013 they are changing the world in real, practical ways. But how exactly are they transforming society? Let\u2019s take a closer look.","title":"The Impact of Artificial Intelligence, Programming, and Robotics on Society"},{"location":"contents/unit05/reading_PAIR.html#artificial-intelligence-ai","text":"Artificial Intelligence refers to the ability of machines to perform tasks that typically require human intelligence, such as understanding language, recognizing faces, or making decisions. AI is everywhere: it\u2019s used in the apps on your phone, the websites you visit, and even in the cars we drive. For example, have you ever used a voice assistant like Siri or Alexa? These devices use AI to understand what you say and respond in a way that seems human-like. AI also helps websites like YouTube recommend videos based on what you've watched before, or it can help doctors diagnose diseases by analyzing medical data. AI is transforming many industries, and it\u2019s crucial that we learn how to use it responsibly and understand its impact on society. But while AI has many positive effects, it can also create challenges. One concern is that AI could replace jobs, especially in industries where machines can do tasks more efficiently than humans. For example, in factories, robots can build products faster and more accurately than people. This means some jobs could be lost, but at the same time, new jobs are created, especially in fields like AI research and software development.","title":"Artificial Intelligence (AI)"},{"location":"contents/unit05/reading_PAIR.html#programming-the-language-of-technology","text":"Programming is another critical part of the technology we use every day. It\u2019s the process of creating instructions that tell computers, smartphones, and other devices what to do. When you use a smartphone app, play a video game, or use a website, all of those things are created through programming. Programming is the backbone of nearly all modern technology, allowing us to create apps, websites, video games, and robots. Programming languages, such as Python , Java , and C++ , are the tools developers use to write code. Just like we use different languages to communicate with people (for example, English, Spanish, or French), programmers use different programming languages to communicate with computers. Programming is the backbone of nearly all modern technology. It is used to create apps, websites, video games, and even robots. In fact, robots are programmed to perform tasks, and these tasks can range from assembling products in factories to helping elderly people at home. The more we understand programming, the better we can create technologies that solve problems and improve lives.","title":"Programming: The Language of Technology"},{"location":"contents/unit05/reading_PAIR.html#robotics-machines-that-can-do-tasks","text":"Robotics is the field of technology that deals with the creation of robots. A robot is a machine that can carry out a series of tasks automatically, often using sensors and AI to guide its actions. Robotics combines engineering, programming, and sometimes AI to create machines that can perform specific jobs. You might think of robots as machines that look like humans, but that\u2019s not always the case. Robots come in all shapes and sizes. For example, some robots are used in factories to build cars, while others are used in hospitals to help doctors perform surgeries. There are even robots that can clean your house, like the Roomba vacuum cleaner! Robotics combines engineering, programming, and AI to create machines that can perform specific tasks, improving many areas of life. Robotics has the potential to improve many areas of life. Robots can work in dangerous environments, like deep underwater or in space, where humans can\u2019t go. They can help elderly people move around or provide assistance in hospitals. However, the rise of robots also brings up questions about the future of work. If robots are doing many jobs that people used to do, what will happen to those workers? This is a question that society will need to think about carefully in the coming years.","title":"Robotics: Machines that Can Do Tasks"},{"location":"contents/unit05/reading_PAIR.html#how-these-technologies-affect-our-society","text":"AI, programming, and robotics are already transforming many aspects of our daily lives. Education , for example, has changed dramatically with the use of AI and robots. Students can now learn from AI-powered apps that help them practice languages or improve their math skills. In schools, robots are sometimes used as teaching assistants, helping students learn coding and other subjects. In healthcare , AI is being used to analyze medical records and help doctors make better decisions about patient care. Robots are used in surgeries, performing tasks that require incredible precision. In business , AI helps companies understand customer behavior, predict trends, and improve their services. Public safety is another area where robots and AI are used. In emergency situations, drones (a type of robot) can be used to assess dangerous situations, such as fires or natural disasters, helping firefighters and rescuers get the information they need without putting themselves in harm\u2019s way. AI, programming, and robotics are transforming education, healthcare, business, and public safety, offering many new opportunities. But while these technologies offer many benefits, they also present challenges. Privacy and security are important concerns. As AI and robots gather and analyze data about people, it\u2019s essential to ensure that this information is kept safe and used responsibly. There are also ethical questions about how AI should make decisions, such as whether it should be allowed to make life-or-death decisions in self-driving cars.","title":"How These Technologies Affect Our Society"},{"location":"contents/unit05/reading_PAIR.html#facing-challenges-and-adapting-to-changes","text":"As we use more AI, programming, and robotics, it\u2019s important that we learn to adapt to these changes. Sometimes, the technologies we create don\u2019t work as planned, or they face unexpected problems. For example, a robot might not be able to perform a task as well as expected, or an app might have bugs that make it difficult to use. It\u2019s important to stay positive and keep trying, as every challenge is an opportunity to learn and improve. In these situations, it\u2019s important to stay positive and keep trying. Whether you\u2019re a programmer fixing a bug, a company leader trying to make the best use of AI, or a student learning how to adapt to new technologies, the key is to be resilient . Every challenge is an opportunity to learn and improve.","title":"Facing Challenges and Adapting to Changes"},{"location":"contents/unit05/reading_PAIR.html#conclusion","text":"AI, programming, and robotics are technologies that are changing the way we live, work, and learn. They offer many opportunities to solve problems and make our lives easier, but they also raise important questions about privacy, security, and the future of work. By understanding the impact of AI, programming, and robotics, we can better prepare ourselves to use these technologies responsibly and creatively. By understanding how these technologies work and their impact on society, we can better prepare ourselves to use them responsibly and creatively. The future is full of exciting possibilities, and it\u2019s up to all of us to shape it.","title":"Conclusion"},{"location":"contents/unit05/reading_PAIR.html#quiz","text":"What is one way artificial intelligence (AI) is transforming industries? A. By eliminating the need for human workers entirely B. By improving efficiency and creating new job opportunities C. By making all decisions without human input D. By replacing all customer service representatives Which of the following is an example of AI being used in daily life? A. A book printed using a traditional printing press B. A voice assistant like Siri responding to a question C. A manual typewriter being used for writing D. A chalkboard being used in a classroom What is programming primarily used for? A. To communicate with computers and give them instructions B. To replace human workers entirely C. To make robots self-aware D. To prevent technology from advancing Which of the following is a common programming language? A. Python B. Human C. Morse Code D. Hieroglyphs What is an important skill when dealing with technological challenges? A. Ignoring problems and hoping they resolve themselves B. Staying positive and trying to find solutions C. Avoiding the use of technology D. Only working with technology that never fails How should we approach unexpected problems in technology? A. By assuming technology will always work perfectly B. By abandoning the project if a problem occurs C. By identifying the issue and trying different solutions D. By refusing to use AI or robotics","title":"Quiz"},{"location":"contents/unit05/sweval.html","text":"2. Software Evaluation and Maintenance What is Software Evaluation? Software evaluation is the process of assessing how well a program or application works. This includes testing its functionality, performance, security, and user-friendliness. Evaluation helps developers understand if their software meets the requirements and is free from bugs or errors. There are different types of testing: Unit Testing : This is the testing of individual components or units of code, like functions or classes. The goal is to ensure each part of the program works correctly on its own. Integration Testing : This testing checks if different parts of the program work together properly. System Testing : This is done to verify that the entire system functions as expected. User Testing : The software is tested by actual users to see if it is easy to use and meets their needs. What is Software Maintenance? Once software is released, it is important to maintain it to fix bugs, improve functionality, and ensure it stays up-to-date with the latest technology. Software maintenance can be divided into four types: Corrective Maintenance : This involves fixing bugs or errors in the software after it has been released. Adaptive Maintenance : This is when the software is updated to be compatible with changes in the environment (e.g., a new operating system). Perfective Maintenance : This focuses on improving the software by adding new features or improving performance. Preventive Maintenance : This is about anticipating and preventing future problems before they happen. Why is Software Evaluation and Maintenance Important? Software evaluation and maintenance are essential for keeping programs working smoothly over time. Without maintenance, software can become outdated, slow, or full of bugs. This can lead to security issues, poor performance, and unhappy users. Regular evaluation ensures that software is reliable, efficient, and secure.","title":"Software Evaluation and Maintenance"},{"location":"contents/unit05/sweval.html#2-software-evaluation-and-maintenance","text":"","title":"2. Software Evaluation and Maintenance"},{"location":"contents/unit05/sweval.html#what-is-software-evaluation","text":"Software evaluation is the process of assessing how well a program or application works. This includes testing its functionality, performance, security, and user-friendliness. Evaluation helps developers understand if their software meets the requirements and is free from bugs or errors. There are different types of testing: Unit Testing : This is the testing of individual components or units of code, like functions or classes. The goal is to ensure each part of the program works correctly on its own. Integration Testing : This testing checks if different parts of the program work together properly. System Testing : This is done to verify that the entire system functions as expected. User Testing : The software is tested by actual users to see if it is easy to use and meets their needs.","title":"What is Software Evaluation?"},{"location":"contents/unit05/sweval.html#what-is-software-maintenance","text":"Once software is released, it is important to maintain it to fix bugs, improve functionality, and ensure it stays up-to-date with the latest technology. Software maintenance can be divided into four types: Corrective Maintenance : This involves fixing bugs or errors in the software after it has been released. Adaptive Maintenance : This is when the software is updated to be compatible with changes in the environment (e.g., a new operating system). Perfective Maintenance : This focuses on improving the software by adding new features or improving performance. Preventive Maintenance : This is about anticipating and preventing future problems before they happen.","title":"What is Software Maintenance?"},{"location":"contents/unit05/sweval.html#why-is-software-evaluation-and-maintenance-important","text":"Software evaluation and maintenance are essential for keeping programs working smoothly over time. Without maintenance, software can become outdated, slow, or full of bugs. This can lead to security issues, poor performance, and unhappy users. Regular evaluation ensures that software is reliable, efficient, and secure.","title":"Why is Software Evaluation and Maintenance Important?"},{"location":"contents/unit05/swlicenses.html","text":"3. Software Licenses. Free Software and Proprietary Software Software Licenses A software license is a legal agreement that explains the terms under which a program can be used, modified, and distributed. There are two main types of software licenses: free software licenses and proprietary software licenses. Free Software This refers to software that can be freely used, modified, and shared. The most famous free software license is the GNU General Public License (GPL), which allows anyone to run, study, modify, and share the software as long as they share their modifications with the same license. An example of free software is the Linux operating system. Benefits of Free Software : Freedom to modify : Users can improve the software. No cost : It is often available for free. Community support : Free software often has active communities that help users and developers. Proprietary Software This refers to software that is owned by a company or individual and comes with restrictions on its use, modification, and distribution. Examples of proprietary software include Microsoft Windows and Adobe Photoshop. Characteristics of Proprietary Software : Limited access : Users cannot view or change the source code. Licensing fees : Users typically need to pay for a license to use the software. Support from the company : Proprietary software usually comes with professional customer support. Respecting Copyrights and Licenses When creating or using software, it is essential to respect the rights of the creators. This includes: Attribution : Giving credit to the original authors. Following License Terms : Ensuring you follow the rules of the software license, whether it\u2019s free software or proprietary. Not using pirated software : Using unauthorized copies of proprietary software is illegal and can lead to legal consequences. By understanding software licenses and respecting intellectual property, you ensure that your work and the work of others are protected and valued.","title":"Software Licenses. Free Software and Proprietary Software"},{"location":"contents/unit05/swlicenses.html#3-software-licenses-free-software-and-proprietary-software","text":"","title":"3. Software Licenses. Free Software and Proprietary Software"},{"location":"contents/unit05/swlicenses.html#software-licenses","text":"A software license is a legal agreement that explains the terms under which a program can be used, modified, and distributed. There are two main types of software licenses: free software licenses and proprietary software licenses.","title":"Software Licenses"},{"location":"contents/unit05/swlicenses.html#free-software","text":"This refers to software that can be freely used, modified, and shared. The most famous free software license is the GNU General Public License (GPL), which allows anyone to run, study, modify, and share the software as long as they share their modifications with the same license. An example of free software is the Linux operating system. Benefits of Free Software : Freedom to modify : Users can improve the software. No cost : It is often available for free. Community support : Free software often has active communities that help users and developers.","title":"Free Software"},{"location":"contents/unit05/swlicenses.html#proprietary-software","text":"This refers to software that is owned by a company or individual and comes with restrictions on its use, modification, and distribution. Examples of proprietary software include Microsoft Windows and Adobe Photoshop. Characteristics of Proprietary Software : Limited access : Users cannot view or change the source code. Licensing fees : Users typically need to pay for a license to use the software. Support from the company : Proprietary software usually comes with professional customer support.","title":"Proprietary Software"},{"location":"contents/unit05/swlicenses.html#respecting-copyrights-and-licenses","text":"When creating or using software, it is essential to respect the rights of the creators. This includes: Attribution : Giving credit to the original authors. Following License Terms : Ensuring you follow the rules of the software license, whether it\u2019s free software or proprietary. Not using pirated software : Using unauthorized copies of proprietary software is illegal and can lead to legal consequences. By understanding software licenses and respecting intellectual property, you ensure that your work and the work of others are protected and valued.","title":"Respecting Copyrights and Licenses"},{"location":"contents/unit05/unit5.html","text":"Unit 5. Software Management: Programming Languages, Licenses and Maintenance Summary This unit introduces students to the basics of programming, focusing on high-level languages, software evaluation and maintenance, and software licenses. Programming in High-Level Languages Programming involves giving instructions to computers using high-level languages like Python, Java, and C++. These languages are more accessible than low-level ones, using readable code similar to English. Python is known for its simplicity, Java for building complex applications, and C++ for game development. Programming languages can be classified into procedural, object-oriented, and functional, each focusing on different ways to structure code. A programmer must understand both the syntax (rules of writing code) and semantics (meaning behind the code) to write correct and effective programs. Software Evaluation and Maintenance After software is created, it must be evaluated for functionality, security, and user experience through various testing methods like unit, integration, system, and user testing. Maintenance ensures the software remains functional, with tasks such as correcting bugs, adapting to new environments, and enhancing features. Regular evaluation and maintenance are crucial to keeping software up-to-date and free from errors. Software Licenses Software licenses govern how software can be used, modified, and distributed. Free software, like Linux, can be freely modified and shared, while proprietary software, like Microsoft Windows, restricts access to its source code. Respecting licenses ensures legal use and protects creators\u2019 rights. By understanding these concepts, students will learn how to evaluate, maintain, and create software responsibly. Evaluation Criteria Evaluating and Maintaining Developed Software : You should be able to test and maintain software you create. This includes running different tests to check for bugs, fixing any issues, and making sure the software is efficient and secure. Applying and Respecting Copyright and Licenses : When creating software, it is important to follow proper licensing rules. You should always give credit to authors of free software and ensure that your software follows the license you\u2019ve chosen, whether free or proprietary. These criteria help you build better software while respecting the work of others and ensuring your software is legal, secure, and efficient.","title":"Introduction"},{"location":"contents/unit05/unit5.html#unit-5-software-management-programming-languages-licenses-and-maintenance","text":"","title":"Unit 5. Software Management: Programming Languages, Licenses and Maintenance"},{"location":"contents/unit05/unit5.html#summary","text":"This unit introduces students to the basics of programming, focusing on high-level languages, software evaluation and maintenance, and software licenses. Programming in High-Level Languages Programming involves giving instructions to computers using high-level languages like Python, Java, and C++. These languages are more accessible than low-level ones, using readable code similar to English. Python is known for its simplicity, Java for building complex applications, and C++ for game development. Programming languages can be classified into procedural, object-oriented, and functional, each focusing on different ways to structure code. A programmer must understand both the syntax (rules of writing code) and semantics (meaning behind the code) to write correct and effective programs. Software Evaluation and Maintenance After software is created, it must be evaluated for functionality, security, and user experience through various testing methods like unit, integration, system, and user testing. Maintenance ensures the software remains functional, with tasks such as correcting bugs, adapting to new environments, and enhancing features. Regular evaluation and maintenance are crucial to keeping software up-to-date and free from errors. Software Licenses Software licenses govern how software can be used, modified, and distributed. Free software, like Linux, can be freely modified and shared, while proprietary software, like Microsoft Windows, restricts access to its source code. Respecting licenses ensures legal use and protects creators\u2019 rights. By understanding these concepts, students will learn how to evaluate, maintain, and create software responsibly.","title":"Summary"},{"location":"contents/unit05/unit5.html#evaluation-criteria","text":"Evaluating and Maintaining Developed Software : You should be able to test and maintain software you create. This includes running different tests to check for bugs, fixing any issues, and making sure the software is efficient and secure. Applying and Respecting Copyright and Licenses : When creating software, it is important to follow proper licensing rules. You should always give credit to authors of free software and ensure that your software follows the license you\u2019ve chosen, whether free or proprietary. These criteria help you build better software while respecting the work of others and ensuring your software is legal, secure, and efficient.","title":"Evaluation Criteria"},{"location":"contents/unit06/unit6.html","text":"Unit 6. Robotics in Action: Assembly, Control, and Programming","title":"Robotics in Action: Assembly, Control, and Programming"},{"location":"contents/unit06/unit6.html#unit-6-robotics-in-action-assembly-control-and-programming","text":"","title":"Unit 6. Robotics in Action: Assembly, Control, and Programming"},{"location":"pd/curriculo/curriculo.html","text":"Elementos curriculares Competencias clave CCL : competencia en comunicaci\u00f3n ling\u00fc\u00edstica CP : competencia pluriling\u00fce CMCT : competencia matem\u00e1tica, ciencia y tecnol\u00f3gica CD : competencia digital CPSAA : competencia personal, social y de aprender a aprender CC : competencia ciudadana CE : competencia emprendedora CCEC : competencia en conciencia y expresi\u00f3n cultural Competencias espec\u00edficas CE1 . Identificar, investigar y emplear t\u00e9cnicas de inteligencia artificial y virtualizaci\u00f3n de la realidad en el abordaje y la b\u00fasqueda de soluciones a problemas b\u00e1sicos de la sociedad valorando los principios \u00e9ticos e inclusivos aplicados. CE2 . Aplicar el pensamiento computacional en el an\u00e1lisis y resoluci\u00f3n de problemas b\u00e1sicos y significativos para el alumnado mediante el desarrollo de software. CE3 . Montar sistemas rob\u00f3ticos sencillos, analizando las respuestas que proporcionan en su interacci\u00f3n con el entorno y valorando la eficacia de estas frente a los retos planteados. CE4 Afrontar retos tecnol\u00f3gicos sencillos y proponer soluciones mediante la programaci\u00f3n, la inteligencia Artificial y la rob\u00f3tica, analizando las posibilidades y valorando cr\u00edticamente las implicaciones \u00e9ticas y ecosociales. Relaciones o conexiones con las competencias clave CE1: CCL, CP, CMCT, CD, CPSAA CE2: CCL, CMCT, CD, CPSAA CE3: CMCT, CD, CPSAA CE4: CMCT, CD, CPSAA, CC, CE Saberes b\u00e1sicos Bloque 1. Inteligencia Artifical. CE1 Sensores, tipolog\u00eda y aplicaciones. T\u00e9cnicas iniciales de IA: sistemas expertos, redes neuronales y aprendizaje autom\u00e1tico. Procesado autom\u00e1tico de la informaci\u00f3n. Equidad e inclusi\u00f3n en sistemas de IA. Sesgos en IA. Implicaciones sociales y \u00e9ticas de la inteligencia artificial. T\u00e9cnicas de virtualizaci\u00f3n de la realidad. Bloque 2. Programaci\u00f3n. CE2 Interpretaci\u00f3n de la realidad mediante modelado de problemas. Abstracci\u00f3n, secuenciaci\u00f3n, algor\u00edtmica y su representaci\u00f3n con lenguaje natural y diagramas de flujo. Detecci\u00f3n y reutilizaci\u00f3n de patrones. Generalizaci\u00f3n. Sostenibilidad e inclusi\u00f3n como requisitos del dise\u00f1o del software. Estructuras de control del flujo del programa. Variables, constantes, condiciones y operadores. Introducci\u00f3n a la programaci\u00f3n en lenguajes de alto nivel. Tipos de lenguajes. Sintaxis y sem\u00e1ntica Programaci\u00f3n de aplicaciones para dispositivos m\u00f3viles. Evaluaci\u00f3n y mantenimiento de software. Licencias de software. El software libre y el software propietario. Simuladores de tarjetas controladoras. Iniciativa, autoconfianza y metacognici\u00f3n en el proceso de aprendizaje del desarrollo de software. Bloque 3. Rob\u00f3tica. CE3 Montaje de robots. Control de sistemas robotizados. Sensores, actuadores y controladores. Carga y ejecuci\u00f3n de los algoritmos en robots. Sistemas robotizados en la experimentaci\u00f3n con prototipos dise\u00f1ados. Situaciones de aprendizaje texto. Criterios de evaluaci\u00f3n Competencia espec\u00edfica 1 CE1 . Identificar, investigar y emplear t\u00e9cnicas de inteligencia artificial y virtualizaci\u00f3n de la realidad en el abordaje y la b\u00fasqueda de soluciones a problemas b\u00e1sicos de la sociedad valorando los principios \u00e9ticos e inclusivos aplicados. 1.1. Identificar el funcionamiento de t\u00e9cnicas de IA. 1.2. Investigar situaciones donde se aplican t\u00e9cnicas de IA. 1.3. Valorar criterios \u00e9ticos aplicados a las funciones de IA. 1.4. Emplear funciones de IA en aplicaciones sencillas siguiendo criterios \u00e9ticos e inclusivos para buscar soluciones a problemas b\u00e1sicos 1.5 Emplear t\u00e9cnicas sencillas de virtualizaci\u00f3n de la realidad. Competencia espec\u00edfica 2 CE2 . Aplicar el pensamiento computacional en el an\u00e1lisis y resoluci\u00f3n de problemas b\u00e1sicos y significativos para el alumnado mediante el desarrollo de software. 2.1. Analizar problemas b\u00e1sicos significativos para el alumnado, mediante el uso de las estructuras de control m\u00e1s adecuadas. 2.2. Evaluar y mantener las aplicaciones inform\u00e1ticas desarrolladas por el propio alumnado. 2.3. Planificar de forma aut\u00f3noma la soluci\u00f3n de problemas b\u00e1sicos, utilizando los algoritmos y las estructuras de datos m\u00e1s adecuados. 2.4. Programar aplicaciones sencillas multiplataforma de manera aut\u00f3noma para resolver problemas b\u00e1sicos. 2.5. Aplicar y respetar los derechos de autor\u00eda, licencias de derechos y explotaci\u00f3n durante la creaci\u00f3n de software. Competencia espec\u00edfica 3 CE3 . Montar sistemas rob\u00f3ticos sencillos, analizando las respuestas que proporcionan en su interacci\u00f3n con el entorno y valorando la eficacia de estas frente a los retos planteados. 3.1. Montar robots de mayor complejidad empleando sensores, actuadores y otros operadores. 3.2. Conectar, transferir y validar la ejecuci\u00f3n del programa de control seleccionado al robot. 3.3. Seleccionar los m\u00f3dulos de entrada y salida para montar robots sencillos, que sean capaces de realizar tareas de forma aut\u00f3noma. 3.4. Analizar y evaluar la eficacia de la interacci\u00f3n del robot con el entorno. 3.5. Programar instrucciones sencillas multiplataforma de manera aut\u00f3noma para controlar un robot programable. 3.6. Controlar el robot por parte del usuario en tiempo real y de forma remota. Competencia espec\u00edfica 4 CE4 Afrontar retos tecnol\u00f3gicos sencillos y proponer soluciones mediante la programaci\u00f3n, la inteligencia Artificial y la rob\u00f3tica, analizando las posibilidades y valorando cr\u00edticamente las implicaciones \u00e9ticas y ecosociales. 4.1. Planificar tareas sencillas, crear estructuras de equipos de trabajo, distribuir funciones y responsabilidades de las personas integrantes y colaborar proactivamente en el desarrollo de soluciones digitales y tecnol\u00f3gicas 4.2. Valorar la importancia de la Inteligencia Artificial, la programaci\u00f3n y la rob\u00f3tica como elementos disruptores de la transformaci\u00f3n social, cultural y cient\u00edfica actuales. 4.3. Dise\u00f1ar soluciones utilizando la programaci\u00f3n, la inteligencia artificial y la rob\u00f3tica eligiendo la opci\u00f3n que mejor se adapte a los retos planteados. 4.4. Gestionar situaciones de incertidumbre en entornos digitales y tecnol\u00f3gicos con una actitud positiva, y afrontarlas utilizando el conocimiento adquirido y sinti\u00e9ndose competente. 4.5. Aplicar la sostenibilidad e inclusi\u00f3n como requisitos del dise\u00f1o de soluciones tecnol\u00f3gicas","title":"Elementos curriculares"},{"location":"pd/curriculo/curriculo.html#elementos-curriculares","text":"","title":"Elementos curriculares"},{"location":"pd/curriculo/curriculo.html#competencias-clave","text":"CCL : competencia en comunicaci\u00f3n ling\u00fc\u00edstica CP : competencia pluriling\u00fce CMCT : competencia matem\u00e1tica, ciencia y tecnol\u00f3gica CD : competencia digital CPSAA : competencia personal, social y de aprender a aprender CC : competencia ciudadana CE : competencia emprendedora CCEC : competencia en conciencia y expresi\u00f3n cultural","title":"Competencias clave"},{"location":"pd/curriculo/curriculo.html#competencias-especificas","text":"CE1 . Identificar, investigar y emplear t\u00e9cnicas de inteligencia artificial y virtualizaci\u00f3n de la realidad en el abordaje y la b\u00fasqueda de soluciones a problemas b\u00e1sicos de la sociedad valorando los principios \u00e9ticos e inclusivos aplicados. CE2 . Aplicar el pensamiento computacional en el an\u00e1lisis y resoluci\u00f3n de problemas b\u00e1sicos y significativos para el alumnado mediante el desarrollo de software. CE3 . Montar sistemas rob\u00f3ticos sencillos, analizando las respuestas que proporcionan en su interacci\u00f3n con el entorno y valorando la eficacia de estas frente a los retos planteados. CE4 Afrontar retos tecnol\u00f3gicos sencillos y proponer soluciones mediante la programaci\u00f3n, la inteligencia Artificial y la rob\u00f3tica, analizando las posibilidades y valorando cr\u00edticamente las implicaciones \u00e9ticas y ecosociales.","title":"Competencias espec\u00edficas"},{"location":"pd/curriculo/curriculo.html#relaciones-o-conexiones-con-las-competencias-clave","text":"CE1: CCL, CP, CMCT, CD, CPSAA CE2: CCL, CMCT, CD, CPSAA CE3: CMCT, CD, CPSAA CE4: CMCT, CD, CPSAA, CC, CE","title":"Relaciones o conexiones con las competencias clave"},{"location":"pd/curriculo/curriculo.html#saberes-basicos","text":"","title":"Saberes b\u00e1sicos"},{"location":"pd/curriculo/curriculo.html#bloque-1-inteligencia-artifical-ce1","text":"Sensores, tipolog\u00eda y aplicaciones. T\u00e9cnicas iniciales de IA: sistemas expertos, redes neuronales y aprendizaje autom\u00e1tico. Procesado autom\u00e1tico de la informaci\u00f3n. Equidad e inclusi\u00f3n en sistemas de IA. Sesgos en IA. Implicaciones sociales y \u00e9ticas de la inteligencia artificial. T\u00e9cnicas de virtualizaci\u00f3n de la realidad.","title":"Bloque 1. Inteligencia Artifical. CE1"},{"location":"pd/curriculo/curriculo.html#bloque-2-programacion-ce2","text":"Interpretaci\u00f3n de la realidad mediante modelado de problemas. Abstracci\u00f3n, secuenciaci\u00f3n, algor\u00edtmica y su representaci\u00f3n con lenguaje natural y diagramas de flujo. Detecci\u00f3n y reutilizaci\u00f3n de patrones. Generalizaci\u00f3n. Sostenibilidad e inclusi\u00f3n como requisitos del dise\u00f1o del software. Estructuras de control del flujo del programa. Variables, constantes, condiciones y operadores. Introducci\u00f3n a la programaci\u00f3n en lenguajes de alto nivel. Tipos de lenguajes. Sintaxis y sem\u00e1ntica Programaci\u00f3n de aplicaciones para dispositivos m\u00f3viles. Evaluaci\u00f3n y mantenimiento de software. Licencias de software. El software libre y el software propietario. Simuladores de tarjetas controladoras. Iniciativa, autoconfianza y metacognici\u00f3n en el proceso de aprendizaje del desarrollo de software.","title":"Bloque 2. Programaci\u00f3n. CE2"},{"location":"pd/curriculo/curriculo.html#bloque-3-robotica-ce3","text":"Montaje de robots. Control de sistemas robotizados. Sensores, actuadores y controladores. Carga y ejecuci\u00f3n de los algoritmos en robots. Sistemas robotizados en la experimentaci\u00f3n con prototipos dise\u00f1ados.","title":"Bloque 3. Rob\u00f3tica. CE3"},{"location":"pd/curriculo/curriculo.html#situaciones-de-aprendizaje","text":"texto.","title":"Situaciones de aprendizaje"},{"location":"pd/curriculo/curriculo.html#criterios-de-evaluacion","text":"","title":"Criterios de evaluaci\u00f3n"},{"location":"pd/curriculo/curriculo.html#competencia-especifica-1","text":"CE1 . Identificar, investigar y emplear t\u00e9cnicas de inteligencia artificial y virtualizaci\u00f3n de la realidad en el abordaje y la b\u00fasqueda de soluciones a problemas b\u00e1sicos de la sociedad valorando los principios \u00e9ticos e inclusivos aplicados. 1.1. Identificar el funcionamiento de t\u00e9cnicas de IA. 1.2. Investigar situaciones donde se aplican t\u00e9cnicas de IA. 1.3. Valorar criterios \u00e9ticos aplicados a las funciones de IA. 1.4. Emplear funciones de IA en aplicaciones sencillas siguiendo criterios \u00e9ticos e inclusivos para buscar soluciones a problemas b\u00e1sicos 1.5 Emplear t\u00e9cnicas sencillas de virtualizaci\u00f3n de la realidad.","title":"Competencia espec\u00edfica 1"},{"location":"pd/curriculo/curriculo.html#competencia-especifica-2","text":"CE2 . Aplicar el pensamiento computacional en el an\u00e1lisis y resoluci\u00f3n de problemas b\u00e1sicos y significativos para el alumnado mediante el desarrollo de software. 2.1. Analizar problemas b\u00e1sicos significativos para el alumnado, mediante el uso de las estructuras de control m\u00e1s adecuadas. 2.2. Evaluar y mantener las aplicaciones inform\u00e1ticas desarrolladas por el propio alumnado. 2.3. Planificar de forma aut\u00f3noma la soluci\u00f3n de problemas b\u00e1sicos, utilizando los algoritmos y las estructuras de datos m\u00e1s adecuados. 2.4. Programar aplicaciones sencillas multiplataforma de manera aut\u00f3noma para resolver problemas b\u00e1sicos. 2.5. Aplicar y respetar los derechos de autor\u00eda, licencias de derechos y explotaci\u00f3n durante la creaci\u00f3n de software.","title":"Competencia espec\u00edfica 2"},{"location":"pd/curriculo/curriculo.html#competencia-especifica-3","text":"CE3 . Montar sistemas rob\u00f3ticos sencillos, analizando las respuestas que proporcionan en su interacci\u00f3n con el entorno y valorando la eficacia de estas frente a los retos planteados. 3.1. Montar robots de mayor complejidad empleando sensores, actuadores y otros operadores. 3.2. Conectar, transferir y validar la ejecuci\u00f3n del programa de control seleccionado al robot. 3.3. Seleccionar los m\u00f3dulos de entrada y salida para montar robots sencillos, que sean capaces de realizar tareas de forma aut\u00f3noma. 3.4. Analizar y evaluar la eficacia de la interacci\u00f3n del robot con el entorno. 3.5. Programar instrucciones sencillas multiplataforma de manera aut\u00f3noma para controlar un robot programable. 3.6. Controlar el robot por parte del usuario en tiempo real y de forma remota.","title":"Competencia espec\u00edfica 3"},{"location":"pd/curriculo/curriculo.html#competencia-especifica-4","text":"CE4 Afrontar retos tecnol\u00f3gicos sencillos y proponer soluciones mediante la programaci\u00f3n, la inteligencia Artificial y la rob\u00f3tica, analizando las posibilidades y valorando cr\u00edticamente las implicaciones \u00e9ticas y ecosociales. 4.1. Planificar tareas sencillas, crear estructuras de equipos de trabajo, distribuir funciones y responsabilidades de las personas integrantes y colaborar proactivamente en el desarrollo de soluciones digitales y tecnol\u00f3gicas 4.2. Valorar la importancia de la Inteligencia Artificial, la programaci\u00f3n y la rob\u00f3tica como elementos disruptores de la transformaci\u00f3n social, cultural y cient\u00edfica actuales. 4.3. Dise\u00f1ar soluciones utilizando la programaci\u00f3n, la inteligencia artificial y la rob\u00f3tica eligiendo la opci\u00f3n que mejor se adapte a los retos planteados. 4.4. Gestionar situaciones de incertidumbre en entornos digitales y tecnol\u00f3gicos con una actitud positiva, y afrontarlas utilizando el conocimiento adquirido y sinti\u00e9ndose competente. 4.5. Aplicar la sostenibilidad e inclusi\u00f3n como requisitos del dise\u00f1o de soluciones tecnol\u00f3gicas","title":"Competencia espec\u00edfica 4"},{"location":"pd/progaula/progaula.html","text":"Programaci\u00f3n de aula Method Description GET :material-check: Fetch resource PUT :material-check-all: Update resource DELETE :material-close: Delete resource graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; sequenceDiagram autonumber Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! sequenceDiagram Alice->>John: Hello John, how are you? John-->>Alice: Great! Alice-)John: See you later! sequenceDiagram participant A as Alice participant J as John A->>J: Hello John, how are you? J->>A: Great!","title":"Programaci\u00f3n de aula"},{"location":"pd/progaula/progaula.html#programacion-de-aula","text":"Method Description GET :material-check: Fetch resource PUT :material-check-all: Update resource DELETE :material-close: Delete resource graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; sequenceDiagram autonumber Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! sequenceDiagram Alice->>John: Hello John, how are you? John-->>Alice: Great! Alice-)John: See you later! sequenceDiagram participant A as Alice participant J as John A->>J: Hello John, how are you? J->>A: Great!","title":"Programaci\u00f3n de aula"}]}